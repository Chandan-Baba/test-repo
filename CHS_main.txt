-----------------
[Grammar Checker]
GC
-----------------
== GUID ==
29c6a811-62c6-4a92-8d51-a048d87a1787

== CHUNK GRAMMAR ==
GC Chunk Grammar

== WRITING STYLES ==
Grammar

== OPTIONS ==
TitleGrammar
Punctuation Error
Punctuation
Reduplication
Non-Lexical error CHT
Non-Lexical error Confusable
Symbol
Whitespace
Spacing
Quantifier Error
Digital
Quote
Structural
Mixed Number Format Error
RomanLetter
Approximate Number Error
Interjection
Frequent confusable homonyms
Redundant Morphemes after Verbs

== OPTION DEFAULT VALUES ==
Punctuation Error	Grammar	$Off_Outlook
Punctuation	Grammar	$Off_Outlook
Reduplication	Grammar	$Off_Outlook
Non-Lexical error CHT	Grammar	$Off_Outlook
Non-Lexical error Confusable	Grammar	$Off_Outlook
Symbol	Grammar	$Off_Outlook
Whitespace	Grammar	$Off_Outlook
Spacing	Grammar	$Off_Outlook
Quantifier Error	Grammar	$Off_OutlookPPT
Digital	Grammar	$Off_Outlook
Quote	Grammar	$Off_Outlook
Structural	Grammar	$Off_OutlookPPT
Mixed Number Format Error	Grammar	True
RomanLetter	Grammar	$Off_Outlook
Approximate Number Error	Grammar	True
Interjection	Grammar	True
Frequent confusable homonyms	Grammar	True
Redundant Morphemes after Verbs	Grammar	True

== CRITIQUE TYPES ==
Approximate Number Error
Digital Error
Frequent confusable homonyms
Interjection Error
Mixed Number Format Error
Non-lexical Error CHT characters
Non-lexical Error Confusable words
NRC_CapFirstWord
NRC_FixExtraSpaceAfterPunct
NRC_FixExtraSpaceBeforePunct
NRC_FixMissSpaceAfterPunct
NRC_FixMissSpaceAfterPunctNotBefore
NRC_FixMissSpaceBeforePunct
NRC_FixPunctuationSuccession
NRC_FixTooManySpaceBetweenWd
Punctuation Error
Quantifier Error
Quote Error
Redundant Morphemes after Verbs
Reduplication Error
Roman Letter Error
Structural Error
Symbol Error
Whitespace Error

== DEFAULT RUNTIME CONFIGURATION ==
[GrammarChecker.ApplicationName="", GrammarChecker.DynamicAppAndDocProperties=[], GrammarChecker.OpenFeatureGates=["ChineseApproximateNumber", "ChineseFrequentConfusableHomonyms", "ChineseInterjection", "ChineseMixedNumberFormat", "ChineseRedundantMorphemesafterVerbs", "ChineseRomanLetter"], GrammarChecker.OptionValues=[[Name="Frequent confusable homonyms", Value="True"], [Name="Interjection", Value="True"], [Name="Approximate Number Error", Value="True"], [Name="RomanLetter", Value="True"], [Name="Mixed Number Format Error", Value="True"], [Name="Structural", Value="True"], [Name="Quote", Value="True"], [Name="Digital", Value="True"], [Name="Quantifier Error", Value="True"], [Name="Spacing", Value="True"], [Name="Whitespace", Value="True"], [Name="Symbol", Value="True"], [Name="Non-Lexical error Confusable", Value="True"], [Name="Non-Lexical error CHT", Value="True"], [Name="Reduplication", Value="True"], [Name="Punctuation", Value="True"], [Name="Punctuation Error", Value="True"]], Licensing.HaveSubscriptionLicense=True]

== ALLOW SUGGESTIONLESS CRITIQUES ==
False

== LOCALIZATION INSTEAD OF ==
原文：

== LOCALIZATION CONSIDER ==
建议使用：

== LOCALIZATION OR CONSIDER ==
或：

== LOCALIZATION NO SUGGESTIONS AVAILABLE ==
无可用建议

== LOCALIZATION STATISTIC COUNTS ==
总计

== LOCALIZATION STATISTIC CHARACTERS ==
字元数

== LOCALIZATION STATISTIC WORDS ==
字数

== LOCALIZATION STATISTIC SENTENCES ==
句数

== LOCALIZATION STATISTIC PARAGRAPHS ==
段落数

== LOCALIZATION STATISTIC AVERAGES ==
平均值

== LOCALIZATION STATISTIC CHARACTERS PER WORD ==
每字字元数

== LOCALIZATION STATISTIC WORDS PER SENTENCE ==
每句字数

== LOCALIZATION STATISTIC SENTENCES PER PARAGRAPH ==
每段句数

== FEATURE GATES ==
ChineseApproximateNumber(Audience::Microsoft)
ChineseFrequentConfusableHomonyms(Audience::Microsoft)
ChineseInterjection(Audience::Microsoft)
ChineseMixedNumberFormat(Audience::Microsoft)
ChineseRedundantMorphemesafterVerbs(Audience::Microsoft)
ChineseRomanLetter(Audience::Microsoft)

== TESTCASE ERRORFREE SENTENCE ==
今天天气不错。

== TESTCASE SENTENCE WITH ONE ERROR ==
今天天气不错,阳光灿烂。

== TESTCASE SENTENCE WITH TWO ERRORS FROM TWO OPTIONS ==
我看了１０个小说.

== TESTCASE SENTENCE WITH TWO ERRORS FROM SAME CRITIQUE ==
这件事没有办好,真是赔了夫人又折兵!

== DYNAMIC CONTEXTUAL PROPERTIES SCRIPT ==
List<string> Main(bundle staticContextualProperties,
                  IAppAndDocPropertyProvider propertyProvider)
{
    List<string> properties = new List<string>();

    object obj = propertyProvider.GetAppLevelProperty("BkgGrammarManuallyEnabled");
    if (obj != null &&
        obj is bool &&
        (bool) obj)
    {
        properties.Add("BkgGrammarManuallyEnabled");
    }

    return properties;
}

== OPTION DEFAULT VALUE FUNCTIONS ==
#pragma schema GrammarChecker

int Off_Outlook(bundle whiteBoard)
{
     return (whiteBoard.ApplicationName == "Outlook" && !whiteBoard.DynamicAppAndDocProperties.Contains("BkgGrammarManuallyEnabled") ? 0 : 1);
}

int Off_OutlookPPT(bundle whiteBoard)
{
     switch (whiteBoard.ApplicationName)
    {
        case "Outlook":
             {
return (whiteBoard.DynamicAppAndDocProperties.Contains("BkgGrammarManuallyEnabled") ? 1 : 0);
};
        case "PowerPoint":
             return 0;
        default:
            return 1;
	}
}

== LOCALIZED CATEGORIES ==
语法
明晰性
简明性
正式语体
包容性语言
标点规范
简历
敏感地缘政治参考
词汇选择
异体词统一
纠错
书写规范
笔误
改写


== FILTER FAMILY TEMPLATES ==
TokenName:[InternalPath=Attr(Tokenization.TokenName), ValueType=FeatureBundle, Context=SREAtomicNodeAnnotationsField]
NormalizedForm:[InternalPath=Attr(Syntax.Analyses), ValueType=FeatureBundle, ListItemPath=Attr(Normalization.Result).Field(NormalizedForm), Context=SREAtomicNodeAnnotationsField]
Lemma:[InternalPath=Attr(Syntax.Analyses), ValueType=FeatureBundle, ListItemPath=Attr(HebrewMorph.Lemma), Context=SREAtomicNodeAnnotationsField]
AnalysisAttr:[InternalPath=Attr(Syntax.Analyses), ValueType=FeatureBundle, Context=SREAtomicNodeAnnotationsField]

------------------
[GC Writing Style]
Grammar
------------------
== GUID ==
cec82665-2b7a-4a89-a3eb-dae107649efb

== LOCALIZED NAME ==
语法

------------------------
[GC Option]
Approximate Number Error
------------------------
== GUID ==
25bf83de-7663-4d4c-961a-3046720bad2d

== LOCALIZED NAME ==
概数表达数字错误

== TYPE ==
Binary

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseApproximateNumber"))

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-----------
[GC Option]
Digital
-----------
== GUID ==
6d051b37-1198-4351-a9c4-1ead060d21f9

== LOCALIZED NAME ==
数字错误

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

----------------------------
[GC Option]
Frequent confusable homonyms
----------------------------
== GUID ==
8fd59858-eed5-4d0e-9d73-6e48ddaf34f8

== LOCALIZED NAME ==
常见错别字

== TYPE ==
Binary

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseFrequentConfusableHomonyms"))

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

------------
[GC Option]
Interjection
------------
== GUID ==
9e15d493-9990-46ca-b2ff-6d3a204db5b7

== LOCALIZED NAME ==
感叹词错误

== TYPE ==
Binary

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseInterjection"))

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-------------------------
[GC Option]
Mixed Number Format Error
-------------------------
== GUID ==
80849fe0-09e8-43c6-bd47-939069984d73

== LOCALIZED NAME ==
汉字数字格式混合错误

== TYPE ==
Binary

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseMixedNumberFormat"))

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

---------------------
[GC Option]
Non-Lexical error CHT
---------------------
== GUID ==
5cc3dc20-f098-46b2-8091-3693ccca19b6

== LOCALIZED NAME ==
非词汇错误：繁简混用

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

----------------------------
[GC Option]
Non-Lexical error Confusable
----------------------------
== GUID ==
6ecd7fe1-e19c-4813-ba9a-9ea43bedbb0e

== LOCALIZED NAME ==
非词汇错误：易混词

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-----------
[GC Option]
Punctuation
-----------
== GUID ==
69f442e2-09eb-409d-800d-f6b37ff99e40

== LOCALIZED NAME ==
标点符号错误

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-----------------
[GC Option]
Punctuation Error
-----------------
== GUID ==
7e99b825-151e-46dd-af4d-e56ba7629506

== LOCALIZED NAME ==
标点使用错误

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

----------------
[GC Option]
Quantifier Error
----------------
== GUID ==
96ea5ac2-ffa9-4ac1-9a8c-5f3cb2ae76f1

== LOCALIZED NAME ==
量词使用建议

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-----------
[GC Option]
Quote
-----------
== GUID ==
1caff486-c02b-4124-a6ee-a820347b9973

== LOCALIZED NAME ==
引号错误

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-------------------------------
[GC Option]
Redundant Morphemes after Verbs
-------------------------------
== GUID ==
63420c82-f653-4273-b6ff-35b27d0df1dc

== LOCALIZED NAME ==
动词后介词冗杂

== TYPE ==
Binary

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseRedundantMorphemesafterVerbs"))

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-------------
[GC Option]
Reduplication
-------------
== GUID ==
daca21ff-33fe-47bd-86e5-fcd9afb227bb

== LOCALIZED NAME ==
重复错误

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-----------
[GC Option]
RomanLetter
-----------
== GUID ==
4058e09e-1908-4dc6-a6a5-d43e23b64da1

== LOCALIZED NAME ==
罗马字母错误

== TYPE ==
Binary

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseRomanLetter"))

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-----------
[GC Option]
Spacing
-----------
== GUID ==
7b3619d3-a9a2-42b9-923a-17a4d99a06d6

== LOCALIZED NAME ==
空格错误

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-----------
[GC Option]
Structural
-----------
== GUID ==
7d4a9d8d-367c-4b20-b991-97992a40c5be

== LOCALIZED NAME ==
助词错误

== TYPE ==
Binary

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

-----------
[GC Option]
Symbol
-----------
== GUID ==
8ccfbf2c-de74-480d-b544-525e24df628d

== LOCALIZED NAME ==
符号错误

== TYPE ==
Binary

== WHITEBOARD TEST ==
Licensing.HaveSubscriptionLicense=True

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

------------
[GC Option]
TitleGrammar
------------
== GUID ==
cc2afbc4-6083-4958-b528-f10b0816ca17

== LOCALIZED NAME ==
Grammar

== TYPE ==
Title

-----------
[GC Option]
Whitespace
-----------
== GUID ==
f25a80c9-8714-41a5-9e48-d030a7e925a3

== LOCALIZED NAME ==
空白间隔错误

== TYPE ==
Binary

== WHITEBOARD TEST ==
Licensing.HaveSubscriptionLicense=True

== VALUE WHEN WHITEBOARD TEST FAILS ==
False

== VALUE FOR ALL ON TESTING ==
True

------------------------
[GC Critique Type]
Approximate Number Error
------------------------
== GUID ==
8801b751-8139-4a32-a398-c4335a320d39

== USER-FACING NAME ==
概数表达数字错误使用建议

== EXPLANATION ==
在使用两个相邻数字表达概数时，需使用汉字数字，而非阿拉伯数字。

* 那个小孩7、8岁的样子。
--> 那个小孩今年七八岁的样子。

* 会议室能容纳30几个人。
--> 会议室能容纳三十几个人。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Approximate Number Error

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseApproximateNumber"))

------------------
[GC Critique Type]
Digital Error
------------------
== GUID ==
48c08c67-8d80-4767-920b-e3cb73fe19fb

== USER-FACING NAME ==
数字使用建议

== EXPLANATION ==
撰写中文文档时，常会出现半角数字和全角数字混用的情况。建议将全角数字改为对应半角数字。

* 我今年_５６_岁。
-->我今年56岁。

* 这把尺长_２０厘米_。
--> 这把尺长20厘米。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Digital

----------------------------
[GC Critique Type]
Frequent confusable homonyms
----------------------------
== GUID ==
64cea46c-4148-41c4-ae6b-695a8ed766ae

== USER-FACING NAME ==
常见错别字

== EXPLANATION ==
有许多汉字同音异义，也有许多汉字字形类似但意思不同，这使得人们在使用的时候常常出现用字错误。建议将用错的字改为正确的字。


* _帐号_有时可以由中文或英文组成，甚至是一些符号。
--> 账号有时可以由中文或英文组成，甚至是一些符号。


* 本活动只接受参与活动的回复，无关的请不要_跟贴_。
--> 本活动只接受参与活动的回复，无关的请不要跟帖。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Frequent confusable homonyms

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseFrequentConfusableHomonyms"))

------------------
[GC Critique Type]
Interjection Error
------------------
== GUID ==
2e048714-0e3b-434d-892e-f9118d74996b

== USER-FACING NAME ==
感叹词错误使用建议

== EXPLANATION ==
撰写简体中文文档时，有时会出现字形相似的词语错用为感叹词的情况。建议将用错的词语及后面的标点符号一起修改。


* 她怎么好意思说你_捏？_
--> 她怎么好意思说你呢？


* 好_滴,_就这么办。
--> 好的，就这么办。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Interjection

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseInterjection"))

-------------------------
[GC Critique Type]
Mixed Number Format Error
-------------------------
== GUID ==
04822f7b-a2d2-4bea-bb06-f878f5d6d715

== USER-FACING NAME ==
汉字数字格式混合使用建议

== EXPLANATION ==
撰写中文文档时，常会出现阿拉伯数字和汉字数字同时混合使用的情况。建议针对特定情况，将混用的阿拉伯数字改为对应汉字数字，或者将汉字数字改为阿拉伯数字。

* _3_分之一的人都是来自印度。
--> 三分之一的人都是来自印度。

* 现在是三点_40_分。
--> 现在是三点四十分。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Mixed Number Format Error

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseMixedNumberFormat"))

--------------------------------
[GC Critique Type]
Non-lexical Error CHT characters
--------------------------------
== GUID ==
e34ddb3e-ab03-411f-be48-d67cb0566234

== USER-FACING NAME ==
非词汇错误：繁简混用

== EXPLANATION ==
撰写简体中文文档时，有时会出现繁体字混于简体汉字中使用的情况。建议将不恰当的繁体字转换成简体字。


* 请你把房间打扫_乾_净。

--> 请你把房间打扫干净。


* 中国到美_國_飞机要飞多久？

--> 中国到美國飞机要飞多久？

== PRIORITY ==
2

== CONTROLLING OPTION ==
Non-Lexical error CHT

----------------------------------
[GC Critique Type]
Non-lexical Error Confusable words
----------------------------------
== GUID ==
cc9be890-8e1f-4288-bc49-8d36d3348498

== USER-FACING NAME ==
非词汇错误：易混词

== EXPLANATION ==
撰写简体中文文档时，有时会出现字形相似的词语混用的情况。建议将用错的词语改为正确的词语。


* 请将这张_像片_寄往宁夏，贴十块钱的邮票。

--> 请将这张相片寄往宁夏，贴十块钱的邮票。


* 我们每天都会收到人们发来的商务电子邮件，许多邮件写得_就象_10岁小孩的作品。
--> 我们每天都会收到人们发来的商务电子邮件，许多邮件写得就像10岁小孩的作品。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Non-Lexical error Confusable

------------------
[GC Critique Type]
NRC_CapFirstWord
------------------
== GUID ==
22bb2acd-99f0-48b3-974b-bfd112ff75fa

== USER-FACING NAME ==
句首英文单词首字母大写

== EXPLANATION ==
中文不适用句首词语首字母大写，仅适用于中文句首的英文单词首字母。

* _respect_ 是我今天学会的单词。
--> Respect是我今天学会的单词。

* _telephone_ 是什么意思？
--> Telephone是什么意思？

== PRIORITY ==
1

== CONTROLLING OPTION ==
Punctuation

---------------------------
[GC Critique Type]
NRC_FixExtraSpaceAfterPunct
---------------------------
== GUID ==
d4114d86-1cc9-4ee5-a908-7741453565a1

== USER-FACING NAME ==
删除标点后空格

== EXPLANATION ==
中文标点后通常不需空格。仅在出现外文段落时，在大多数标点后使用空格，但在左括号或者左中括号之后，不应添加空格。

*  他没有凭他的论文_（ _含若干抄袭）拿到高分。
--> 他没有凭他的论文（含若干抄袭）拿到高分。

== PRIORITY ==
1

== CONTROLLING OPTION ==
Spacing

----------------------------
[GC Critique Type]
NRC_FixExtraSpaceBeforePunct
----------------------------
== GUID ==
d89b8ac0-1d64-4da4-9d30-8a87af89853d

== USER-FACING NAME ==
删除标点前空格

== EXPLANATION ==
中文通常在词语之后使用大多数标点，不需要空格。但出现外文段落时，于起始标点符号，如左括号或者左中括号之前，需空一格。

*  大家都想要更多的停车位_ ，_更好的食物，和弹性工时。
--> 大家都想要更多的停车位，更好的食物，和弹性工时。

*  备注显示野餐（仅限员工_ ）_已经重新安排。
--> 备注显示野餐（仅限员工）已经重新安排。

== PRIORITY ==
1

== CONTROLLING OPTION ==
Spacing

--------------------------
[GC Critique Type]
NRC_FixMissSpaceAfterPunct
--------------------------
== GUID ==
606b8d61-2158-4400-a585-366c05da801d

== USER-FACING NAME ==
英文标点后空格

== EXPLANATION ==
中文标点后通常不需空格。仅在出现外文段落时，在大多数标点后使用空格，但在左括号或者左中括号之后，不应添加空格。

*  他没有凭他的论文_（ _含若干抄袭）拿到一个好分数。
--> 他没有凭他的论文（含若干抄袭）拿到一个好分数。

== PRIORITY ==
1

== CONTROLLING OPTION ==
Spacing

-----------------------------------
[GC Critique Type]
NRC_FixMissSpaceAfterPunctNotBefore
-----------------------------------
== GUID ==
a48c6a7b-7400-40d1-b3c1-4c20cd02650b

== USER-FACING NAME ==
英文标点后非前空格

== EXPLANATION ==
中文通常在词语后使用大多数标点，不需要空格。

*  备注显示野餐（仅限员工_ ）_已经重新安排。
--> 备注显示野餐（仅限员工）已经重新安排。


*  大家都想要更多的停车位_ ，_更好的食物，和弹性工时。
--> 大家都想要更多的停车位，更好的食物，和弹性工时。

== PRIORITY ==
1

== CONTROLLING OPTION ==
Spacing

---------------------------
[GC Critique Type]
NRC_FixMissSpaceBeforePunct
---------------------------
== GUID ==
ee61480b-56b9-42cd-ab2f-1bb5ecb294db

== USER-FACING NAME ==
英文标点前空格

== EXPLANATION ==
中文通常在词语之后使用大多数标点，不需要空格。但出现外文段落时，于起始标点符号，如左括号或者左中括号之前，需空一格。

*  大家都想要更多的停车位_ ，_更好的食物，和弹性工时。
--> 大家都想要更多的停车位，更好的食物，和弹性工时。

*  备注显示野餐（仅限员工_ ）_已经重新安排。
--> 备注显示野餐（仅限员工）已经重新安排。

== PRIORITY ==
1

== CONTROLLING OPTION ==
Spacing

----------------------------
[GC Critique Type]
NRC_FixPunctuationSuccession
----------------------------
== GUID ==
6233dcc1-aca3-4bc9-96de-5cdaa75b1a98

== USER-FACING NAME ==
标点冗余

== EXPLANATION ==
中文书写时，可能出现多余的标点，或者标点颠倒位置的情况。应删除重复或颠倒位置的标点符号。

*  我们赢了锦标赛了_，。_
--> 我们赢了锦标赛了。

*  你和比利说过什么_？！！_
--> 你和比利说过什么？

== PRIORITY ==
1

== CONTROLLING OPTION ==
Punctuation

----------------------------
[GC Critique Type]
NRC_FixTooManySpaceBetweenWd
----------------------------
== GUID ==
4c42e1be-afcb-4e5b-aab6-2593cb80dee1

== USER-FACING NAME ==
词语间多余的空格

== EXPLANATION ==
中文句子中的词语之间不需空格。

*  这_  句_话特别长。
--> 这句话特别长。

*  她_  去_银行的路上一直在笑。
--> 她去银行的路上一直在笑。

== PRIORITY ==
1

== CONTROLLING OPTION ==
Spacing

------------------
[GC Critique Type]
Punctuation Error
------------------
== GUID ==
9baba65f-989b-4ce0-891d-de767fc345ab

== USER-FACING NAME ==
中文标点符号使用建议

== EXPLANATION ==
撰写中文文档时，常会出现中文半角标点符号和英文全角标点符号混用的情况。建议将英文标点改为对应中文标点符号。


* 你要干_什么!_
--> 你要干什么！

* 今天下午实验室（本科生除外）_开会._
--> 今天下午实验室（本科生除外）开会。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Punctuation Error

------------------
[GC Critique Type]
Quantifier Error
------------------
== GUID ==
69d3a1d7-d645-4e41-a8c4-7cfbc174bad5

== USER-FACING NAME ==
量词使用建议

== EXPLANATION ==
书写中文文档时，会有误用或是缺用量词的情况。建议以正确量词取代错误量词，或是提供可能的正确量词（列表）。

* 这是_三棵奇异果_。
--> 这是三颗奇异果。

* 我买了_一件裙子_。
--> 我买了一条裙子。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Quantifier Error

------------------
[GC Critique Type]
Quote Error
------------------
== GUID ==
64ac192d-57c2-4fb3-b1d8-6bc9ad8e9342

== USER-FACING NAME ==
引号使用建议

== EXPLANATION ==
撰写中文文档时，常会出现中文半角引号和英文全角引号混用的情况。建议将英文标点改为对应中文标点符号。


* 老师_说："_请同学们起立！”
--> 老师说：“请同学们起立！”


* 人生本来就是“逆水行舟，_不进则退"_嘛。
--> 人生本来就是“逆水行舟，不进则退”嘛。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Quote

-------------------------------
[GC Critique Type]
Redundant Morphemes after Verbs
-------------------------------
== GUID ==
54b893b4-28ad-45e1-bf2b-3579e6849202

== USER-FACING NAME ==
动词后介词冗杂建议

== EXPLANATION ==
撰写中文文档时，一些动词本身隐含介词的信息，由于对词素信息的不敏感导致重复使用介词。建议将此类动词后的介系词删除。

* 我这样做是源自于对你的喜爱。 
--> 我这样做是源自对你的喜爱。

* 这句话出自于毛主席的作品。
--> 这句话出自毛主席的作品。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Redundant Morphemes after Verbs

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseRedundantMorphemesafterVerbs"))

-------------------
[GC Critique Type]
Reduplication Error
-------------------
== GUID ==
c27f039b-c080-4a3e-8e4e-ed4d8e356db4

== USER-FACING NAME ==
重复用词使用建议

== EXPLANATION ==
撰写中文文档时，常会出现词重复使用的情况。建议将重复出现的词保留仅一个。


* 我了解您_的的_设备的问题。

--> 我了解您的设备的问题。


* 我想_在在_大专中考专升本，不知道该报对口专科还是高职专科。

--> 我想在大专中考专升本，不知道该报对口专科还是高职专科。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Reduplication

------------------
[GC Critique Type]
Roman Letter Error
------------------
== GUID ==
69fd34af-c3e4-4588-8b24-fceda32970a4

== USER-FACING NAME ==
罗马字母使用建议

== EXPLANATION ==
撰写中文文档时，常会出现罗马字母半角和全角混用的情况。建议将全角字母改为对应半角字母。

* 我最喜欢的2个英文字母是_ＹＺ_。
-->我最喜欢的2个英文字母是YZ。

* _ＯＱＲ_里面有几个元音呢？
--> OQR里面有几个元音呢？

== PRIORITY ==
2

== CONTROLLING OPTION ==
RomanLetter

== WHITEBOARD TEST ==
AND(Licensing.HaveSubscriptionLicense=True, GrammarChecker.OpenFeatureGates=*Contains("ChineseRomanLetter"))

------------------
[GC Critique Type]
Structural Error
------------------
== GUID ==
60c3e904-99fe-4e90-96ff-fdccf99fd1c7

== USER-FACING NAME ==
助词使用建议

== EXPLANATION ==
撰写中文文档时，常会出现助词“的地得”混用的情况。建议将用错的词语改为正确的词语。

* 他唱歌_好地很_，曾经拿过冠军。

--> 他唱歌好得很，曾经拿过冠军。


* 你_得意洋洋的说_：“最后还不是来求我”。
--> 你得意洋洋地说：“最后还不是来求我”。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Structural

------------------
[GC Critique Type]
Symbol Error
------------------
== GUID ==
9344de87-89e1-4e21-aca5-70919dcdba09

== USER-FACING NAME ==
特殊符号使用建议

== EXPLANATION ==
撰写中文文档时，常会出现半角符号和全角符号字混用，或混肴相似符号的情况。建议使用符合教育部规定的符号。

* 他一天只_花＄_20元。
--> 他一天只花$20元。

* 她最爱去_H＆_M买衣服。
--> 她最爱去H&M买衣服。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Symbol

== WHITEBOARD TEST ==
Licensing.HaveSubscriptionLicense=True

------------------
[GC Critique Type]
Whitespace Error
------------------
== GUID ==
185f830a-588d-422f-ad61-98635a7e0279

== USER-FACING NAME ==
空白间隔使用建议

== EXPLANATION ==
在中文文件中，常会有多余的空白间隔。建议将其删除，亦或以适当的标点符号取代之。


* 这杯_咖啡 123 _元。
--> 这杯咖啡123元。

* 第一_条 一般_义务。
--> 第一条、一般义务。

== PRIORITY ==
2

== CONTROLLING OPTION ==
Whitespace

== WHITEBOARD TEST ==
Licensing.HaveSubscriptionLicense=True

----------------
[Chunk Grammar]
GC Chunk Grammar
----------------
== GUID ==
d19c8b28-85b1-424d-a3c2-66d6dcd51921

== LEVELS ==
LinguisticFoundation
Tokenization
TokenAdjustment
MWEAnalysis
GrammarMWEAnalysis
UnconditionalNonLexCrit
LexLookup
LexLookup-Affixes
WhitespaceChunking
ManualDisambiguation
AutoDisambiguation
InitialChunk
Annotate_BOS
Annotate_LatinStrings
Annotate_Quotes_Double
Annotate_Quotes_Single
InterjectionError
PunctuationError
ReduplicationError
StructuralError
QuantifierError
QuoteError
Mixed Number Format Error
Approximate Number Error
DigitalError
RomanLetterError
Redundant_Morphemes_after_Verbs
FrequentConfusableHomonyms
NonLexicalErrorConfusable
NonLexicalErrorCHT
SymbolError
WhitespaceError
Quote-Chunk
Professions-Chunk
Adj-Chunk
Noun-Chunk
Adv-Chunk

== SCHEMAS ==
Schemas\Chinese_SimplifiedSyntax.ans

---------------------
[Chunk Grammar Level]
Adj-Chunk
---------------------
== GUID ==
1245638f-0136-462b-b9cc-fe68ecf0883f

== TYPE ==
Rule

== INIT ==
Chunk-Adj+(Punc/Conj)+AdjToADJ

---------------------
[Chunk Grammar Level]
Adv-Chunk
---------------------
== GUID ==
49ae47ae-697e-41ee-afc8-3c95e68ddd41

== TYPE ==
Rule

== INIT ==
Chunk-Adv+(Punc/Conj)+AdvToADV

---------------------
[Chunk Grammar Level]
Annotate_BOS
---------------------
== GUID ==
5c8e0db1-3327-4ed8-a3b3-435f265750f0

== TYPE ==
Rule

== INIT ==
Annotate_BOS

---------------------
[Chunk Grammar Level]
Annotate_LatinStrings
---------------------
== GUID ==
a851573f-0d3f-4dde-ba7a-35c6f0f040e2

== TYPE ==
Rule

== INIT ==
Annotate_LatinCharachterWords

----------------------
[Chunk Grammar Level]
Annotate_Quotes_Double
----------------------
== GUID ==
6cda638e-c0c9-4dc5-a31c-40776915ead5

== TYPE ==
Rule

== INIT ==
Annotate_QuotationsDouble

----------------------
[Chunk Grammar Level]
Annotate_Quotes_Single
----------------------
== GUID ==
7aedfda2-f493-436a-8f64-3fc7f9f2e8f1

== TYPE ==
Rule

== INIT ==
Annotate_QuotationsSingle

------------------------
[Chunk Grammar Level]
Approximate Number Error
------------------------
== GUID ==
7d23ee36-6347-42d7-a54a-b3b1e0e1cbe1

== TYPE ==
Rule

== INIT ==
number_approximate_1,2 or 2,3 +  CHS bai-qian-wan-yi/TIME
number_approximate_1,2 or 2,3 + time-quantifier-measure
number_approximate_3 to 9+time-quantifier-measure
number_approximate_CHS 1,2 + time-quantifier-measure
number_approximate_CHS 1,2 or 2,3 + punc +  time-quantifier-measure
number_approximate_CHS 2,3 + time-quantifier-measure
number_approximate_CHS ersanfenzhong
number_approximate_CHS ersanwan
number_approximate_CHS ersanyi
number_approximate_CHS yierqian
number_approximate_CHS yierwan
number_approximate_CHS yieryi
number_approximate_ji
number_approximate_CHS yierfenzhong
number_approximate_3 to 9 + CHS shi
number_approximate_3 to 9 + CHS bai-qian-wan-yi/TIME
number_approximate_1,2 or 2.3 + 分钟
number_approximate_3 to 9 + 分钟
number_approximate_10余/多
number_approximate_数10
number_approximate_ji_100-900
number_approximate_ji_1000-9000
number_approximate_1,2 or 2,3 + 十/线城市
number_approximate_CHS 一二万公斤
number_approximate_CHS二三公里
number_approximate_CHS 一二千万
number_approximate_CHS二三千万
number_approximate_CHS一二千米
number_approximate_CHS二三千元
number_approximate_CHS二三点钟
number_approximate_CHS二三公斤
number_approximate_CHS二三千斤
number_approximate_CHS一二千斤
number_approximate_CHS一二毫米
number_approximate_CHS一二吨
number_approximate_CHS一二公里
number_approximate_CHS一二公斤
number_approximate_CHS一二小时
number_approximate_CHS一二秒
number_approximate_9,10 + time-quantifier-measure
number_approximate_CHS二三千
number_approximate_CHS二三千一
number_approximate_CHS一二年
number_approximate_9,10秒
number_approximate_9,10毫米
number_approximate_9,10公里

---------------------
[Chunk Grammar Level]
AutoDisambiguation
---------------------
== GUID ==
59c5bea4-8937-4801-8839-a7495509e53b

== TYPE ==
POSTagger

== INIT ==
..\..\MORPHMODELS\CHINESE_SIMPLIFIED\CHINESE_SIMPLIFIED.BIN

---------------------
[Chunk Grammar Level]
DigitalError
---------------------
== GUID ==
5999feab-5d48-48ef-8f65-fb199d60a79d

== DESCRIPTION ==
This grammar level targets digits inappropriately used in CHS sentences. The suggestion is to replace them with corresponding corect ones. This level contains two rules.

== TYPE ==
Rule

== INIT ==
error_digital
error_digital_punct

--------------------------
[Chunk Grammar Level]
FrequentConfusableHomonyms
--------------------------
== GUID ==
77bdedf4-8969-4fd6-b22f-33eaea8464e8

== TYPE ==
Rule

== INIT ==
frequent_confusable_[防]碍
frequent_confusable_[穿]流不息
frequent_confusable_再接再[励]
frequent_confusable_一[幅]对联
frequent_confusable_粗[旷]
frequent_confusable_大[姆]指
frequent_confusable_挖[墙角]
frequent_confusable_[既]使
frequent_confusable_不能|无法[自己]
frequent_confusable_[美仑]美奂
frequent_confusabke_自[抱]自弃
frequent_confusable_走[头]无路
frequent_confusable_凑[和]
frequent_confusable_[做]为
frequent_confusbale_[帐]X
frequent_confusable_X[帐]
frequent_confusable_X[贴]
frequent_confusable_[贴]子
frequent_confusable_[到是]
frequent_confusable_[跟帖]
frequent_confusable_[转贴]
frequent_confusable_[帐号]
frequent_confusable_[做月子]
frequent_confusable_[到是]BOS
frequent_confusable_不能|无法[自己]BOS
frequent_confusable_不能|无法[自己]MOS
frequent_confusable_[亲]睐
frequent_confusable_[侯车]
frequent_confusable_[凭]添
frequent_confusable_[名]信片
frequent_confusable_[幅]射
frequent_confusable_坐[阵]
frequent_confusable_脉[博]
frequent_confusable_当[做]
frequent_confusable_[当做]
frequent_confusable_[按]装
frequent_confusable_编[缉]
frequent_confusable_[分]丝
frequent_confusable_X[份]
frequent_confusable_[份]X
frequent_confusable_[分]额

---------------------
[Chunk Grammar Level]
GrammarMWEAnalysis
---------------------
== GUID ==
97c595cf-d0c3-4008-b5df-cb89edfd4486

== TYPE ==
RawFlatLexiconLookup

== INIT ==
AlternateContainerAttribute=Chinese_SimplifiedSyntax.GrammarLBCs
..\..\MorphModels\Chinese_Simplified\Chinese_Simplified.mwes.GrammarMWE.txt

---------------------
[Chunk Grammar Level]
InitialChunk
---------------------
== GUID ==
91f2a4d1-cdba-4219-b0a1-9fdb03c63010

== TYPE ==
Rule

== INIT ==
Chunk-Initial

---------------------
[Chunk Grammar Level]
InterjectionError
---------------------
== GUID ==
3b339c95-3389-4eec-9bdc-60b5dc0c8e9a

== DESCRIPTION ==
This grammar level targets Chinese particles mistakenly used in CHS sentences. The suggestion is to replace them with corresponding corect ones. This level contains nine rules.

== TYPE ==
Rule

== INIT ==
error_interjection_luo
error_interjection_ne
error_interjection_de
error_interjection_ha
error_interjection_ba
error_interjection_ha_1
error_interjection_mie_1
error_interjection_e
error_interjection_en_1
error_interjection_en
error_interjection_en_2
error_interjection_e_1
error_interjection_luo_1

---------------------
[Chunk Grammar Level]
LexLookup
---------------------
== GUID ==
39eb1322-2020-41d8-866b-171d199ecdf6

== TYPE ==
Rule

== INIT ==
LexLookup

---------------------
[Chunk Grammar Level]
LexLookup-Affixes
---------------------
== GUID ==
a4223baa-05f9-42bc-a2f3-e809dd9d9bca

== TYPE ==
Rule

== INIT ==
LexLookup-Affixes1
LexLookup-Suffixes1
LexLookup-Affixes2
LexLookup-Suffixes2
LexLookup-Affixes3
LexLookup-Suffixes3
LexLookup-Suffixes4

---------------------
[Chunk Grammar Level]
LinguisticFoundation
---------------------
== GUID ==
9545fefa-8cb3-4a5b-aa1b-92e8160dca5e

== TYPE ==
ReferenceGrammar

== INIT ==
NRCGrammar=Chinese_Simplified

---------------------
[Chunk Grammar Level]
ManualDisambiguation
---------------------
== GUID ==
b4a5af75-8bb4-41c0-92b1-54d21107a8db

== TYPE ==
Rule

== INIT ==
MD_NounAfterDE/Adj
MD_MeasureAfterPron/NumBeforeNoun
-------------------------
[Chunk Grammar Level]
Mixed Number Format Error
-------------------------
== GUID ==
152be393-e5ca-481a-be4b-a03b1b207d91

== TYPE ==
Rule

== INIT ==
number_week
number_fraction_after_single
number_fraction_before_single
number_fraction_after_double
number_fraction_before_double
number_clock_second_cn_single
number_clock_second_cn_double
number_clock_second_after_arabic_single
number_clock_second_after_arabic_double
number_round_arabic_cn_single
number_clock_minute_after_arabic_double
number_clock_minute_after_arabic_single
number_clock_minute_cn_double
number_clock_minute_cn_single
number_round_arabic_cn_double
number_arabic_before_single
number_arabic_after_double
number_arabic_before_double
number_arabic_after_thousand_round
number_arabic_after_hundred_round
number_arabic_after_single
number_fraction_before_cn_single
number_arabic_before_jin
number_arabic_after_cun
number_arabic_before_kuai
number_arabic_before_double_year
number_arabic_single_square
number_arabic_after_double_ling
number_arabic_after_single_ling

---------------------
[Chunk Grammar Level]
MWEAnalysis
---------------------
== GUID ==
48daa1e7-aa38-4e0d-8a65-ca0b3e1d8c04

== TYPE ==
RawFlatLexiconLookup

== INIT ==
MultipleAnalysesAttribute=Syntax.Analyses
..\..\MorphModels\Chinese_Simplified\Chinese_Simplified.mwes.txt

---------------------
[Chunk Grammar Level]
NonLexicalErrorCHT
---------------------
== GUID ==
54daf9d4-9df7-4bb9-bc7c-5b570c9b48a6

== DESCRIPTION ==
This grammar level targets traditional characters (CHT) inappropriately used in CHS sentences. The suggestion is to replace them with corresponding CHS characters.

== TYPE ==
Rule

== INIT ==
CHTreplacement_qian

-------------------------
[Chunk Grammar Level]
NonLexicalErrorConfusable
-------------------------
== GUID ==
f8dd40da-84a8-42d2-b493-eaad5d296ac0

== DESCRIPTION ==
This grammar level targets Chinese confusable characters mistakenly used in CHS sentences. The suggestion is to replace them with corresponding correct ones.

== TYPE ==
Rule

== INIT ==
error_nonlexical_haoxiang
error_nonlexical_xiaoxiang
error_nonlexical_huaxiang
error_nonlexical_jiuxiang
error_nonlexical_xiangshi
error_nonlexical_tianxiang
error_nonlexical_xiangzheng
error_nonlexical_chouxiang
error_nonlexical_xiangpian
error_nonlexical_zhaoxiang
error_nonlexical_xiangmao
error_nonlexical_xiangyiyang
error_nonlexical_benfen
error_nonlexical_yuanfen
error_nonlexical_qifen
error_nonlexical_feifen
error_nonlexical_zhishi
error_nonlexical_fennei
error_nonlexical_fene
error_nonlexical_shenfen
error_nonlexical_gufen
error_nonlexical_hecai
error_nonlexical_caiyong
error_nonlexical_fengcai
error_nonlexical_shencai
error_nonlexical_caixia
error_nonlexical_cailie
error_nonlexical_fengfuduocai
error_nonlexical_wenshen
error_nonlexical_xinpian
error_nonlexical_zhenhan
error_nonlexical_liaowang
error_nonlexical_dujia
error_nonlexical_zuoluo
error_nonlexical_jiaju
error_nonlexical_ziji
error_nonlexical_yijing
error_nonlexical_baqi
error_nonlexical_dianbo
error_nonlexical_boda
error_nonlexical_lizi
error_nonlexical_anli
error_nonlexical_mingbian
error_nonlexical_dabian
error_nonlexical_bianbie
error_nonlexical_fenbian
error_nonlexical_baozha
error_nonlexical_baofahu
error_nonlexical_baozao
error_nonlexical_baoguang
error_nonlexical_zaore
error_nonlexical_zaodong
error_nonlexical_ganzao
error_nonlexical_fanzao
error_nonlexical_tuxiang
error_nonlexical_huhu
error_nonlexical_qihuhu
error_nonlexical_a
error_nonlexical_fanhui
error_nonlexical_zhefan
error_nonlexical_jiaorouzaozuo
error_nonlexical_jungong
error_nonlexical_xuanxie
error_nonlexical_zangkuan
error_nonlexical_xuanlv
error_nonlexical_ouxinlixue
error_nonlexical_bolaipin
error_nonlexical_zhishoukere
error_nonlexical_kuaizhirenkou
error_nonlexical_yinpin
error_nonlexical_zhefu
error_nonlexical_zhanshui
error_nonlexical_moshouchenggui

---------------------
[Chunk Grammar Level]
Noun-Chunk
---------------------
== GUID ==
d0cf9fe2-8eb2-449e-bb95-86f616dad115

== TYPE ==
Rule

== INIT ==
Chunk-Professions+SuffixToNoun
Chunk-Adj+(Pctl)+NounToNOUN
Chunk-Noun+(Punc/Conj)+NounToNoun
Chunk-Num/Dem+Measure+NounToNOUN
Chunk-Prefix+TitleToNoun

---------------------
[Chunk Grammar Level]
Professions-Chunk
---------------------
== GUID ==
0afa1cd3-54ee-4998-9c18-b67e2c7c0228

== TYPE ==
Rule

== INIT ==
Chunk-Professions+SuffixToNoun
Chunk-Prefix+TitleToNoun

---------------------
[Chunk Grammar Level]
PunctuationError
---------------------
== GUID ==
9ad91c30-cdb2-439e-9a18-d8cfdb6c00d8

== DESCRIPTION ==
This grammar level targets punctuation marks inappropriately used in CHS sentences. The suggestion is to replace them with corresponding corect ones. This level contains fifteen rules.

== TYPE ==
Rule

== INIT ==
error_punctuation_single
error_punctuation_parenthesis_open
error_punctuation_parenthesis_close
error_punctuation_ellipsis_1
error_punctuation_repetition
error_punctuation_parenthesis_full
error_punctuation_consecutive_angle_quotes
error_punctuation_consecutive_parenthesis
error_punctuation_consecutive_comma_parenthesis
error_punctuation_consecutive_enumeration_comma
error_punctuation_consecutive_percent_comma
error_punctuation_consecutive_question_parenthesis
error_punctuation_consecutive_bracket_parenthesis
error_punctuation_question_exclamation
error_punctuation_ellipsis_2
error_closing_double_quote_consecutive_punct
error_closing_single_quote_consecutive_punct

---------------------
[Chunk Grammar Level]
QuantifierError
---------------------
== GUID ==
9d848f82-731e-496f-91f0-17f782424910

== DESCRIPTION ==
The Quantifier Error is to correct the quantifiers associated with the nouns which they qualify. A Chinese noun can be qualified by one or several quantifiers.

== TYPE ==
Rule

== INIT ==
ClassifierMatching_fu2_painting
ClassifierMatching_fu4_pairs
ClassifierMatching_gen1_plants
ClassifierMatching_ke1_objects
ClassifierMatching_ke1_plants
ClassifierMatching_kuai4_objects
ClassifierMatching_pian1_documents
ClassifierMatching_pian4_objects
ClassifierMatching_zhi1_animals
ClassifierMatching_zhi1_objects
ClassifierMatching_zhi1_plants
ClassifierMatching_zuo4_building
ClassifierMatching_ge5_people
ClassifierMatching_dao4_objects
ClassifierMatching_gu3_group
ClassifierMatching_tou2_animals
ClassifierMatching_fen4_documents
ClassifierMatching_duo3_plants
ClassifierMatching_ming2_people
ClassifierMatching_zhang1_ojects
ClassifierMatching_tiao2_plants

---------------------
[Chunk Grammar Level]
Quote-Chunk
---------------------
== GUID ==
e35c1cfa-1594-46bc-a693-1d4dc19cd12c

== TYPE ==
Rule

== INIT ==
Chunk-QuoteWORDQuote

---------------------
[Chunk Grammar Level]
QuoteError
---------------------
== GUID ==
e49dfc7c-6953-4f34-a256-59e5a6768e98

== DESCRIPTION ==
This grammar level targets quotes inappropriately used in CHS sentences. The suggestion is to replace them with corresponding corect ones. This level contains 13 rules.

== TYPE ==
Rule

== INIT ==
error_colon_open_quote
error_consecutive_closing_quote
error_closing_quote
Annotate_LatinCharachterWords
error_parenthesis_quote
error_open_quote
error_colon_open_single_quote
error_consecutive_single_closing_quote
error_closing_double_quote_punct
error_closing_single_quote_punct
error_single_token_quote

-------------------------------
[Chunk Grammar Level]
Redundant_Morphemes_after_Verbs
-------------------------------
== GUID ==
1e75bc61-b082-499d-8c01-9966de4bf402

== TYPE ==
Rule

== INIT ==
Redundant_Morphemes_after_Verbs_X自于
Redundant_Morphemes_after_Verbs_X到
Redundant_Morphemes_after_Verbs_XX于
Redundant_Morphemes_after_Verbs_源自于

---------------------
[Chunk Grammar Level]
ReduplicationError
---------------------
== GUID ==
894b6b9b-5a46-4356-8d2b-f75715426bf0

== DESCRIPTION ==
This grammar level targets reduplicate Chinese charactes inappropriately used in CHS sentences. The suggestion is to replace them with corresponding corect ones. This level contains three rules.

== TYPE ==
Rule

== INIT ==
error_reduplication_a
error_reduplication_de
error_reduplication_zai

---------------------
[Chunk Grammar Level]
RomanLetterError
---------------------
== GUID ==
20bb3860-3605-4cb3-b4a2-ee57a87af3cb

== TYPE ==
Rule

== INIT ==
error_roman_letters

---------------------
[Chunk Grammar Level]
StructuralError
---------------------
== GUID ==
66662249-305f-4c6e-b379-2de111fffd76

== DESCRIPTION ==
This grammar level targets Chinese particles mistakenly used in CHS sentences. The suggestion is to replace them with corresponding corect ones. This level contains nine rules.

== TYPE ==
Rule

== INIT ==
error_structure_de_adv_verb
error_structure_de_adj_adv
error_structure_de_token1
error_structure_de_token2
error_structure_de_token3
error_structure_de_verb
error_structure_de_fei
error_structure_de_chang
error_structure_de_renzhen

---------------------
[Chunk Grammar Level]
SymbolError
---------------------
== GUID ==
b597b53e-0ef4-48cd-9672-c88707696ac2

== DESCRIPTION ==
This grammar level targets symbols inappropriately used in CHS sentences. The suggestion is to replace them with corresponding correct ones.

== TYPE ==
Rule

== INIT ==
error_symbol_ampersand
error_symbol_asterisk
error_symbol_backslash
error_symbol_caret
error_symbol_dollar
error_symbol_hash
error_symbol_left_curly_bracket
error_symbol_right_curly_bracket
error_symbol_slash
error_symbol_vertical_bar
error_symbol_close_tag
error_symbol_negative
error_symbol_open_tag
error_symbol_percent
error_symbol_tilde_range
error_symbol_equal
error_symbol_plus

---------------------
[Chunk Grammar Level]
TokenAdjustment
---------------------
== GUID ==
15c76ce6-fba7-4756-ab15-c82c8f087fdb

== TYPE ==
Rule

== INIT ==
TokenAdjustment1
TokenAdjustment2

---------------------
[Chunk Grammar Level]
Tokenization
---------------------
== GUID ==
f6d76b74-c2b2-492a-ba33-cbfe381648a4

== TYPE ==
Tokenizer

== INIT ==
WB:..\..\..\..\Import\x64\ship\nlginternal\x-none\x64\nlg\x-none;zh-CN;LongestMatch;None;False;True;True

-----------------------
[Chunk Grammar Level]
UnconditionalNonLexCrit
-----------------------
== GUID ==
6b06a798-6ef0-40b5-b3b2-ee86299977c7

== TYPE ==
Rule

== INIT ==
ListReplacement

---------------------
[Chunk Grammar Level]
WhitespaceChunking
---------------------
== GUID ==
cb252aaf-cdd7-495e-be85-e251efae8f06

== TYPE ==
Rule

== INIT ==
Chunk-Whitespace

---------------------
[Chunk Grammar Level]
WhitespaceError
---------------------
== GUID ==
872616d2-8add-419e-a6c2-cbdca56d1461

== DESCRIPTION ==
The Whitespace Error is to remove unnecessary whitespaces and to replace whitespaces by suitable punctuation.

== TYPE ==
Rule

== INIT ==
WhitespaceError_digit_measure_word
WhitespaceError_ciwai_token
WhitespaceError_ma_punct
WhitespaceError_enumeration
WhitespaceError_paired_parentheses
WhitespaceError_paired_Chinese_parentheses
WhitespaceError_diwu_token
WhitespaceError_punct_ws_token
WhitespaceError_particle_twopuncsugsts
WhitespaceError_particle_punct
WhitespaceError_punct_conj
WhitespaceError_token_ws_punct
WhitespaceError_token_num_token
WhitespaceError_token_ws_token
WhitespaceError_pattern_ws_token
WhitespaceError_token_ws_pattern

--------------------
[Chunk Grammar Rule]
Annotate_BOS
--------------------
== GUID ==
1f7015e4-98a5-4a37-9f6e-c50ee72c6537

== PATTERN ==
#START# :
(
  [@Annotations:
      Tokenization.TokenName=
        *StartsWith(Z_|P_|Q_|BULLET|ELLIPSIS)
  ]
)* :
(
  <HEAD>
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            *StartsWith(Z_|P_|Q_|BULLET|ELLIPSIS))
    ]
  </HEAD>
  |
  <HEAD>
    [@Text:
        ^[a-zA-Z]
    ]
  </HEAD>
)

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
%{ModifySpan(
    Get(Head)
  ,
    Assign(
      Get(Output).
      Attr(Chinese_SimplifiedSyntax.BOS)
    ,
      Value(
        Boolean
      ,
        True))
    .
    If(
      Get(Output).
      Attr(Syntax.Analyses).
      Count().
      Matches(
        >0)
    ,
      Enumerate(
      OutputAnalysis
      ,
        Get(Output).
        Attr(Syntax.Analyses)
      ,
        Assign(
          Get(OutputAnalysis).
          Attr(Chinese_SimplifiedSyntax.BOS)
        ,
          Value(
            Boolean
          ,
            True)))))}

-----------------------------
[Chunk Grammar Rule]
Annotate_LatinCharachterWords
-----------------------------
== GUID ==
9690abf0-ad5a-41de-aca3-45a3603a23de

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              [a-zA-Z])
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{ModifySpan(
    Get(Target)
  ,
    Assign(
      Get(Output).
      Attr(Chinese_SimplifiedSyntax.LatinString)
    ,
      Value(
        Boolean
      ,
        True))
    .
    Enumerate(
    Analyses
    ,
      Get(Output).
      Attr(Syntax.Analyses)
    ,
      Assign(
        Get(Analyses).
        Attr(Chinese_SimplifiedSyntax.LatinString)
      ,
        Value(
          Boolean
        ,
          True))))}

-------------------------
[Chunk Grammar Rule]
Annotate_QuotationsDouble
-------------------------
== GUID ==
9db94309-069f-43c1-b42c-95e42f8bbbb0

== PATTERN ==
(
  <TARGET>
    .
  </TARGET>
)+

== ACTION ==
Region(
  BooleanInit
,
  New(
    Opening)
  .
  Assign(
    Get(Opening).
    Attr(AnnotationScript.Boolean)
  ,
    Value(
      Boolean
    ,
      True)))
.
If(
  Get(TARGET).
  Attr(Capture.Matches).
  ItemsMatching(
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            ""|“|”")).
  Count().
  Matches(
    >1)
,
  Enumerate(
  Item
  ,
    Get(TARGET).
    Attr(Capture.Matches)
  ,
    If(
      Get(Item).
      Attr(Syntax.Analyses).
      LastItem().
      Attr(Normalization.Result).
      Field(NormalizedForm).
      Matches(
        ""|“|”")
    ,
      If(
        Get(Opening).
        Attr(AnnotationScript.Boolean).
        Or(
          Get(Item).
          Attr(Syntax.Analyses).
          LastItem().
          Attr(Normalization.Result).
          Field(NormalizedForm).
          Matches(
            "“"))
      ,
        %{ModifySpan(
            Get(Item)
          ,
            Region(
              Assignments
            ,
              Assign(
                Get(Output).
                Attr(Chinese_SimplifiedSyntax.QuoteOpening)
              ,
                Value(
                  Boolean
                ,
                  True))
              .
              Enumerate(
              Analysis
              ,
                Get(Output).
                Attr(Syntax.Analyses)
              ,
                Assign(
                  Get(Analysis).
                  Attr(Chinese_SimplifiedSyntax.QuoteOpening)
                ,
                  Value(
                    Boolean
                  ,
                    True)))
              .
              Enumerate(
              Analysis
              ,
                Get(Output).
                Attr(Syntax.Head).
                Attr(Syntax.Analyses)
              ,
                Assign(
                  Get(Analysis).
                  Attr(Chinese_SimplifiedSyntax.QuoteOpening)
                ,
                  Value(
                    Boolean
                  ,
                    True)))))}
        .
        Assign(
          Get(Opening).
          Attr(AnnotationScript.Boolean)
        ,
          Value(
            Boolean
          ,
            False))
      ,
        %{ModifySpan(
            Get(Item)
          ,
            Region(
              Assignments
            ,
              Assign(
                Get(Output).
                Attr(Chinese_SimplifiedSyntax.QuoteClosing)
              ,
                Value(
                  Boolean
                ,
                  True))
              .
              Enumerate(
              Analysis
              ,
                Get(Output).
                Attr(Syntax.Analyses)
              ,
                Assign(
                  Get(Analysis).
                  Attr(Chinese_SimplifiedSyntax.QuoteClosing)
                ,
                  Value(
                    Boolean
                  ,
                    True)))
              .
              Enumerate(
              Analysis
              ,
                Get(Output).
                Attr(Syntax.Head).
                Attr(Syntax.Analyses)
              ,
                Assign(
                  Get(Analysis).
                  Attr(Chinese_SimplifiedSyntax.QuoteClosing)
                ,
                  Value(
                    Boolean
                  ,
                    True)))))}
        .
        Assign(
          Get(Opening).
          Attr(AnnotationScript.Boolean)
        ,
          Value(
            Boolean
          ,
            True))))))

-------------------------
[Chunk Grammar Rule]
Annotate_QuotationsSingle
-------------------------
== GUID ==
648c3f4f-f76a-479c-90d2-13675573f574

== PATTERN ==
(
  <TARGET>
    .
  </TARGET>
)+

== ACTION ==
Region(
  BooleanInit
,
  New(
    Opening)
  .
  Assign(
    Get(Opening).
    Attr(AnnotationScript.Boolean)
  ,
    Value(
      Boolean
    ,
      True)))
.
If(
  Get(TARGET).
  Attr(Capture.Matches).
  ItemsMatching(
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "'|‘|’")).
  Count().
  Matches(
    >1)
,
  Enumerate(
  Item
  ,
    Get(TARGET).
    Attr(Capture.Matches)
  ,
    If(
      Get(Item).
      Attr(Syntax.Analyses).
      LastItem().
      Attr(Normalization.Result).
      Field(NormalizedForm).
      Matches(
        "'|‘|’")
    ,
      If(
        Get(Opening).
        Attr(AnnotationScript.Boolean).
        Or(
          Get(Item).
          Attr(Syntax.Analyses).
          LastItem().
          Attr(Normalization.Result).
          Field(NormalizedForm).
          Matches(
            "‘"))
      ,
        %{ModifySpan(
            Get(Item)
          ,
            Region(
              Assignments
            ,
              Assign(
                Get(Output).
                Attr(Chinese_SimplifiedSyntax.QuoteOpening)
              ,
                Value(
                  Boolean
                ,
                  True))
              .
              Enumerate(
              Analysis
              ,
                Get(Output).
                Attr(Syntax.Analyses)
              ,
                Assign(
                  Get(Analysis).
                  Attr(Chinese_SimplifiedSyntax.QuoteOpening)
                ,
                  Value(
                    Boolean
                  ,
                    True)))
              .
              Enumerate(
              Analysis
              ,
                Get(Output).
                Attr(Syntax.Head).
                Attr(Syntax.Analyses)
              ,
                Assign(
                  Get(Analysis).
                  Attr(Chinese_SimplifiedSyntax.QuoteOpening)
                ,
                  Value(
                    Boolean
                  ,
                    True)))))}
        .
        Assign(
          Get(Opening).
          Attr(AnnotationScript.Boolean)
        ,
          Value(
            Boolean
          ,
            False))
      ,
        %{ModifySpan(
            Get(Item)
          ,
            Region(
              Assignments
            ,
              Assign(
                Get(Output).
                Attr(Chinese_SimplifiedSyntax.QuoteClosing)
              ,
                Value(
                  Boolean
                ,
                  True))
              .
              Enumerate(
              Analysis
              ,
                Get(Output).
                Attr(Syntax.Analyses)
              ,
                Assign(
                  Get(Analysis).
                  Attr(Chinese_SimplifiedSyntax.QuoteClosing)
                ,
                  Value(
                    Boolean
                  ,
                    True)))
              .
              Enumerate(
              Analysis
              ,
                Get(Output).
                Attr(Syntax.Head).
                Attr(Syntax.Analyses)
              ,
                Assign(
                  Get(Analysis).
                  Attr(Chinese_SimplifiedSyntax.QuoteClosing)
                ,
                  Value(
                    Boolean
                  ,
                    True)))))}
        .
        Assign(
          Get(Opening).
          Attr(AnnotationScript.Boolean)
        ,
          Value(
            Boolean
          ,
            True))))))

--------------------
[Chunk Grammar Rule]
CHTreplacement_qian
--------------------
== GUID ==
af53325a-1510-41af-85ad-a70186157d4f

== DESCRIPTION ==
This rule targets CHTcharacter "qian" (乾)  incorrectly used as "gan" (干)  in CHS sentences. 
The suggestion is to flag 乾 and replace it with 干.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "乾")
  ]
</TARGET1>
WHERE:
  OR(
    *SubSRE(
      After(TARGET1)
    ,
      #START# :
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "净|爽|燥|咳|杯|涸|旱|冰")
      ])
  ,
    *SubSRE(
      Before(TARGET1)
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "烧")
      ] :
      #END#))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error CHT characters")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "干"))})}

---------------------------
[Chunk Grammar Rule]
Chunk-Adj+(Pctl)+NounToNOUN
---------------------------
== GUID ==
8e9edea9-38d8-4333-b2bd-08b37da38fc7

== PATTERN ==
(
  <DEP>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            +Chinese_SimplifiedMorph.Adj)
    ]
  </DEP> :
  (
    <DEP>
      [@Annotations:
          Normalization.Result=
            NormalizedForm=
              "的"
      ]
    </DEP>
  )?
)+ :
<HEAD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          +Chinese_SimplifiedMorph.Noun)
  ]
</HEAD>

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
New(
  Dep
,
  Get(DEP))
.
%{CreateChunk(
    Get(Head)
  ,
    Get(Dep).
    Attr(Capture.Matches))}

------------------------------
[Chunk Grammar Rule]
Chunk-Adj+(Punc/Conj)+AdjToADJ
------------------------------
== GUID ==
52c2fcb2-bbbf-4900-a37c-8c49ef0669fd

== PATTERN ==
(
  <DEP>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            +Chinese_SimplifiedMorph.Adj)
    ]
  </DEP> :
  (
    <DEP>
      [@Annotations:
          OR(
            Tokenization.TokenName=
              "Punctuation"
          ,
            Syntax.Analyses=
              *Contains(
                +Chinese_SimplifiedMorph.Conj))
      ]
    </DEP>
  )?
)+ :
<HEAD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          +Chinese_SimplifiedMorph.Adj)
  ]
</HEAD>

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
New(
  Dep
,
  Get(DEP))
.
%{CreateChunk(
    Get(Head)
  ,
    Get(Dep).
    Attr(Capture.Matches))}

------------------------------
[Chunk Grammar Rule]
Chunk-Adv+(Punc/Conj)+AdvToADV
------------------------------
== GUID ==
b75b85ee-e47d-4c8e-a41c-fcd8e5f9e028

== PATTERN ==
(
  <DEP>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            +Chinese_SimplifiedMorph.Adv)
    ]
  </DEP> :
  (
    <DEP>
      [@Annotations:
          OR(
            Tokenization.TokenName=
              "Punctuation"
          ,
            Syntax.Analyses=
              *Contains(
                +Chinese_SimplifiedMorph.Conj))
      ]
    </DEP>
  )?
)+ :
<HEAD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          +Chinese_SimplifiedMorph.Adv)
  ]
</HEAD>

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
New(
  Dep
,
  Get(DEP))
.
%{CreateChunk(
    Get(Head)
  ,
    Get(Dep).
    Attr(Capture.Matches))}

--------------------
[Chunk Grammar Rule]
Chunk-Initial
--------------------
== GUID ==
1c0e353f-f661-4b10-a312-8830fc45e367

== PATTERN ==
<WORD>
  [@Annotations:
      -Syntax.Head
  ]
</WORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
If(
  Get(Word).
  Attr(Syntax.Analyses).
  Count().
  Matches(
    =0)
,
  New(
    NormOnly)
  .
  Assign(
    Get(NormOnly).
    Attr(Normalization.Result).
    Field(NormalizedForm)
  ,
    %{SpanTextWithoutFinalWS(
        Get(Word))})
  .
  Assign(
    Get(Word).
    Attr(Syntax.Analyses)
  ,
    Get(NormOnly).
    ToList()))
.
New(
  Chunk
,
  Get(Word))
.
Assign(
  Get(Chunk).
  Attr(Syntax.Head)
,
  Get(Word))
.
Modify(
  Get(Whiteboard).
  Attr(ChunkParsing.NewChunks)
,
  Append(
    Get(Chunk)))

---------------------------------
[Chunk Grammar Rule]
Chunk-Noun+(Punc/Conj)+NounToNoun
---------------------------------
== GUID ==
f681b8e2-1d3a-4237-86a4-a22700587547

== PATTERN ==
(
  <DEP>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            +Chinese_SimplifiedMorph.Noun)
    ]
  </DEP> :
  (
    <DEP>
      [@Annotations:
          OR(
            Tokenization.TokenName=
              "Punctuation"
          ,
            Syntax.Analyses=
              *Contains(
                +Chinese_SimplifiedMorph.Conj))
      ]
    </DEP>
  )?
)+ :
<HEAD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          +Chinese_SimplifiedMorph.Noun)
  ]
</HEAD>

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
New(
  Dep
,
  Get(DEP))
.
%{CreateChunk(
    Get(Head)
  ,
    Get(Dep).
    Attr(Capture.Matches))}

--------------------------------
[Chunk Grammar Rule]
Chunk-Num/Dem+Measure+NounToNOUN
--------------------------------
== GUID ==
785b21eb-1a88-4972-8a6b-276974295f7d

== PATTERN ==
<DEP>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          OR(
            +Chinese_SimplifiedMorph.Num
          ,
            Normalization.Result=
              NormalizedForm=
                "这|那"))
  ]
</DEP> :
<DEP>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          +Chinese_SimplifiedMorph.Measure)
  ]
</DEP> :
<HEAD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          +Chinese_SimplifiedMorph.Noun)
  ]
</HEAD>

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
New(
  Dep
,
  Get(DEP))
.
%{CreateChunk(
    Get(Head)
  ,
    Get(Dep).
    Attr(Capture.Matches))}

------------------------
[Chunk Grammar Rule]
Chunk-Prefix+TitleToNoun
------------------------
== GUID ==
a3675bdb-ab4b-4ea2-9985-6567dbb162f2

== PATTERN ==
<DEP>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "副")
  ]
</DEP> :
<HEAD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          OR(
            +Chinese_SimplifiedMorph.Noun
          ,
            +Chinese_SimplifiedMorph.Verb))
  ]
</HEAD>

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
New(
  Dep
,
  Get(DEP))
.
%{CreateChunk(
    Get(Head)
  ,
    Get(Dep).
    Attr(Capture.Matches))}

------------------------------
[Chunk Grammar Rule]
Chunk-Professions+SuffixToNoun
------------------------------
== GUID ==
50e434ac-b3b3-41ae-a77f-113f6967bcb6

== PATTERN ==
<HEAD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          OR(
            +Chinese_SimplifiedMorph.Noun
          ,
            +Chinese_SimplifiedMorph.Verb))
  ]
</HEAD> :
<DEP>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "家|员|者|学|树")
  ]
</DEP>

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
New(
  Dep
,
  Get(DEP))
.
%{CreateChunk(
    Get(Head)
  ,
    Get(Dep).
    Attr(Capture.Matches))}

--------------------
[Chunk Grammar Rule]
Chunk-QuoteWORDQuote
--------------------
== GUID ==
83895cd8-aa91-4ca7-bce6-42bcb2a74a17

== PATTERN ==
<DEP1>
  <DEP>
    [@Annotations:
        Tokenization.TokenName=
          "P_QUOTE_INITIAL"
    ]
  </DEP>
</DEP1> :
<HEAD>
  [@Annotations:
      +Tokenization.TokenName
  ]
</HEAD> :
<DEP>
  [@Annotations:
      Tokenization.TokenName=
        "P_QUOTE_FINAL"
  ]
</DEP>
WHERE:
  AND(
    *SubSRE(
      HEAD
    ,
      [@Annotations:
          Syntax.FinalWSCount=
            =0
      ])
  ,
    *SubSRE(
      DEP1
    ,
      [@Annotations:
          Syntax.FinalWSCount=
            =0
      ]))

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
New(
  Dep
,
  Get(DEP))
.
%{CreateChunk(
    Get(Head)
  ,
    Get(Dep).
    Attr(Capture.Matches))}

--------------------
[Chunk Grammar Rule]
Chunk-Whitespace
--------------------
== GUID ==
9a9ae836-ec01-4b1b-b856-c2b9ac5af969

== PATTERN ==
<HEAD>
  .
</HEAD> :
(
  <PUNCT>
    [@Annotations:
        Tokenization.TokenName=
          "Q_CONTROL|Q_FORMAT|Z_LINEDELIMITER|Z_SPACE|Z_TAB|Whitespace"
    ]
  </PUNCT>
)+

== ACTION ==
New(
  Head
,
  %{GetSingleCapture(
      Get(HEAD))})
.
New(
  Punct
,
  Get(PUNCT))
.
New(
  Chunk
,
  Get(Head))
.
Enumerate(
Puncts
,
  Get(Punct).
  Attr(Capture.Matches)
,
  New(
    PuncItem
  ,
    Get(Puncts))
  .
  Modify(
    Get(Chunk).
    Attr(Span.Length)
  ,
    Add(
      Get(PuncItem).
      Attr(Span.Length))))
.
Assign(
  Get(Chunk).
  Attr(Syntax.FinalWSCount)
,
  Get(Punct).
  Attr(Capture.Matches).
  Count())
.
Modify(
  Get(Whiteboard).
  Attr(ChunkParsing.NewChunks)
,
  Append(
    Get(Chunk)))

-------------------------------
[Chunk Grammar Rule]
ClassifierMatching_dao4_objects
-------------------------------
== GUID ==
417859e3-5401-4b9d-99f7-45827bdee4f0

== DESCRIPTION ==
The Pattern is to flag sequences comprised of numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 条, optional Adjective Phrase(s) and finally nouns The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 条(tiao2), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 道 (dao4).

The Action is to replace the wrong quantifier 条 (tiao2) by the correct one 道 (dao4).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "条")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          OR(
            AND(
              *Contains(
                +Chinese_SimplifiedMorph.Noun)
            ,
              *Contains(
                Chinese_SimplifiedMorph.NominalClassifiersUnitObjects1=
                  道_dao4))
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  "阳光"))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "道")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

------------------------------
[Chunk Grammar Rule]
ClassifierMatching_duo3_plants
------------------------------
== GUID ==
4fcb1e05-8d53-4be1-a43a-c201b6fd2bfc

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 根 (gen1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 朵 (duo3).

The Action is to replace the wrong quantifier 根 (gen1) by the correct one 朵 (duo3).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "根")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          OR(
            AND(
              *Contains(
                +Chinese_SimplifiedMorph.Noun)
            ,
              *Contains(
                Chinese_SimplifiedMorph.NominalClassifiersUnitPlants=
                  朵_duo3))
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  "花"))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "朵")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

---------------------------------
[Chunk Grammar Rule]
ClassifierMatching_fen4_documents
---------------------------------
== GUID ==
751bb2bc-b84b-4b2c-84e1-84262a301729

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 分 (fen4), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 份 (fen4).

The Action is to replace the wrong quantifier 分 (fen4) by the correct one 份 (fen4).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "分")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          OR(
            AND(
              *Contains(
                +Chinese_SimplifiedMorph.Noun)
            ,
              *Contains(
                Chinese_SimplifiedMorph.NominalClassifiersUnitDocuments=
                  份_fen4))
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  "工作"))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "份")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

-------------------------------
[Chunk Grammar Rule]
ClassifierMatching_fu2_painting
-------------------------------
== GUID ==
e3145fa2-b713-4f05-bd62-b9bcef0488d2

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifiers, optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 幅 (fu2).

The Action is to replace the wrong quantifiers by the correct one 幅 (fu2).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        AND(
          *Contains(
            +Chinese_SimplifiedMorph.Measure)
        ,
          *ForAll(
            Chinese_SimplifiedMorph.NominalClassifiersUnitDocuments?=
              NOT(
                幅_fu2))
        ,
          *ForAll(
            Normalization.Result=
              NormalizedForm=
                NOT(
                  "盒|件|种|里|眼|笔|轴|摞|周|卷|帧|下|岁|秒|倍|声|组|套|线|针|年|楼|天|级|名|个|区|块|带|门|处|英寸|会儿|系列")))
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          OR(
            AND(
              *Contains(
                +Chinese_SimplifiedMorph.Noun)
            ,
              *Contains(
                Chinese_SimplifiedMorph.NominalClassifiersUnitDocuments=
                  幅_fu2)
            ,
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    NOT(
                      "布|相片|作品|海报|画布|漫画|素描|对联|对子|春联|白绒|地毯|绒|珠帘|地图|图片|图|画面|门帘|标语|情景|画像")))
          ,
            AND(
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    "画")
            ,
              *Contains(
                +Chinese_SimplifiedMorph.Noun)))
    ]
  </NOUN>
</TARGET> :
<POSTWORD>
  .
</POSTWORD>
WHERE:
  *SubSRE(
    POSTWORD
  ,
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                NOT(
                  "出来|特效"))
    ])

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "幅")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

----------------------------
[Chunk Grammar Rule]
ClassifierMatching_fu4_pairs
----------------------------
== GUID ==
a944175a-7ab2-48d7-8aeb-40d289f837bc

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifiers 幅 (fu2) and 付 (fu4), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 副 (fu4).

The Action is to replace the wrong quantifiers 幅 (fu2) and 付 (fu4) by the correct one 副 (fu4).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "幅|付")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitDocuments=
                副_fu4))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "副")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

-----------------------------
[Chunk Grammar Rule]
ClassifierMatching_ge5_people
-----------------------------
== GUID ==
6ce6d91d-439d-4d38-bb5d-4ed7212a6271

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifiers 枚 (mei2), 首 (shou3), 条 (tiao2) and 根 (gen1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 个 (ge4).

The Action is to replace the wrong quantifiers 枚 (mei2), 首 (shou3), 条 (tiao2) and 根 (gen1) by the correct one 个 (ge4).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "枚|首|条|根")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          OR(
            AND(
              *Contains(
                +Chinese_SimplifiedMorph.Noun)
            ,
              *Contains(
                Chinese_SimplifiedMorph.NominalClassifiersUnitPeople=
                  个_ge4)
            ,
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    NOT(
                      "心|轨迹|意见|消息|政策|词语|图章|原则|理由|胳膊")))
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  "碗|颜色|讯息|瓶子|谜语|念头|序列号|杀手锏"))
    ]
  </NOUN>
</TARGET> :
<POSTWORD>
  .
</POSTWORD>
WHERE:
  *SubSRE(
    POSTWORD
  ,
    [@Annotations:
        Syntax.Analyses=
          *ForAll(
            Normalization.Result=
              NormalizedForm=
                NOT(
                  "航线"))
    ])

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "个")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

------------------------------
[Chunk Grammar Rule]
ClassifierMatching_gen1_plants
------------------------------
== GUID ==
577c5d89-dbbb-4bcb-8e59-ca4017313f3f

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 跟 (gen1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 根 (gen1).

The Action is to replace the wrong quantifier 跟 (gen1) by the correct one 根 (gen1).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "跟")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitPlants=
                根_gen1))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "根")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

----------------------------
[Chunk Grammar Rule]
ClassifierMatching_gu3_group
----------------------------
== GUID ==
fbe19f8a-f1a8-41f9-8798-1faff9437917

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 道 (dao4), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 股 (gu3).

The Action is to replace the wrong quantifier 道 (dao4) by the correct one 股 (gu3).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "道")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersGroup=
                股_gu3))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "股")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

------------------------------
[Chunk Grammar Rule]
ClassifierMatching_ke1_objects
------------------------------
== GUID ==
67669837-94db-47e0-947b-84ac10dc89fd

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 棵 (ke1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 颗 (ke1).

The Action is to replace the wrong quantifier 棵 (ke1) by the correct one 颗 (ke1).

== PATTERN ==
<PREWORD1>
  .
</PREWORD1> :
<PREWORD2>
  .
</PREWORD2> :
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "棵")
  ] :
  (
    <ADJPHRASE>
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                +Chinese_SimplifiedMorph.Adj)
        ] :
        (
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "的")
          ]
        )?
      )
      |
      (
        [@Annotations:
            Tokenization.TokenName=
              NOT(
                *StartsWith(P_|WORD))
        ]
      )+
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitPlants=
                颗_ke1))
    ]
  </NOUN>
</TARGET>
WHERE:
  AND(
    *SubSRE(
      PREWORD1
    ,
      [@Annotations:
          Syntax.Analyses=
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  NOT(
                    "种"))
      ])
  ,
    *SubSRE(
      PREWORD2
    ,
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_))
      ]))

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "颗")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

-----------------------------
[Chunk Grammar Rule]
ClassifierMatching_ke1_plants
-----------------------------
== GUID ==
c546fcb9-760d-4076-a075-719b74f70116

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 颗 (ke1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 棵 (ke1).

The Action is to replace the wrong quantifier 颗 (ke1) by the correct one 棵 (ke1).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "颗")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          OR(
            AND(
              *Contains(
                +Chinese_SimplifiedMorph.Noun)
            ,
              *Contains(
                Chinese_SimplifiedMorph.NominalClassifiersUnitPlants=
                  棵_ke1))
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  "树"))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "棵")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

--------------------------------
[Chunk Grammar Rule]
ClassifierMatching_kuai4_objects
--------------------------------
== GUID ==
da4c6399-1f6f-47dc-82ab-e28ae09cbcf3

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifiers 快 (kuai4), 根 (gen1) and 道 (dao4), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 块 (kuai4).

The Action is to replace the wrong quantifiers 快 (kuai4), 根 (gen1) and 道 (dao4) by the correct one 块 (kuai4).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "快|根|道")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            OR(
              AND(
                *Contains(
                  +Chinese_SimplifiedMorph.Noun)
              ,
                *Contains(
                  Chinese_SimplifiedMorph.NominalClassifiersUnitBuildings=
                    块_kuai4))
            ,
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    OR(
                      "钱|板子|金牌|银牌|铜牌|肥皂"
                    ,
                      *Contains(砖))))
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  NOT(
                    "骨头")))
    ]
  </NOUN>
</TARGET> :
<POSTWORD>
  .
</POSTWORD>
WHERE:
  *SubSRE(
    POSTWORD
  ,
    [@Annotations:
        Syntax.Analyses=
          *ForAll(
            Normalization.Result=
              NormalizedForm=
                NOT(
                  "菜|葫芦|白墙|屏门"))
    ])

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "块")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

-------------------------------
[Chunk Grammar Rule]
ClassifierMatching_ming2_people
-------------------------------
== GUID ==
407729df-5c3b-42ef-8dd3-eb0a376c2682

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 束 (shu4), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 名 (ming2).

The Action is to replace the wrong quantifier 束 (shu4) by the correct one 名 (ming2).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result?=
            NormalizedForm=
              "束")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NP>
    (
      [@Annotations:
          Syntax.Analyses=
            AND(
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "足球|篮球|棒球|排球|垒球|高尔夫球|大学|研究所|硕士|博士|动物|植物|生物|矿物|食品|数学|社科院")
            ,
              *Contains(
                Syntax.FinalWSCount?=
                  >=0))
      ]
    )? :
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitPeople=
                名_ming2))
    ]
  </NP>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Np
  ,
    %{GetSingleCapture(
        Get(NP))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "名")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Np))}))})}

----------------------------------
[Chunk Grammar Rule]
ClassifierMatching_pian1_documents
----------------------------------
== GUID ==
f93cea48-6c73-40b9-95c7-8f6b362cd080

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 片 (pian4), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 篇 (pian1).

The Action is to replace the wrong quantifier 片 (pian4) by the correct one 篇 (pian1).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "片")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitDocuments=
                篇_pian1))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "篇")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

--------------------------------
[Chunk Grammar Rule]
ClassifierMatching_pian4_objects
--------------------------------
== GUID ==
77e363b3-a050-4614-9467-e9462a97b5d7

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifiers 只 (zhi1) and 篇 (pian1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 片 (pian4).

The Action is to replace the wrong quantifiers 只 (zhi1) and 篇 (pian1) by the correct one 片 (pian4).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "只|篇")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            AND(
              *Contains(
                +Chinese_SimplifiedMorph.Adj)
            ,
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    NOT(
                      "野生")))
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitObjects1=
                片_pian4))
    ]
  </NOUN>
</TARGET> :
<POSTWORD>
  .
</POSTWORD>
WHERE:
  *SubSRE(
    POSTWORD
  ,
    [@Annotations:
        Syntax.Analyses=
          *ForAll(
            Normalization.Result=
              NormalizedForm=
                NOT(
                  "手|铲子"))
    ])

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "片")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

-------------------------------
[Chunk Grammar Rule]
ClassifierMatching_tiao2_plants
-------------------------------
== GUID ==
e814f67d-e116-40c8-a689-dd73dbc2dbc4

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifiers 片 (pian4), 道 (dao4), 张 (zhang1), 匹 (pi1), 把 (ba3) and 件 (jian4), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 条 (tiao2).

The Action is to replace the wrong quantifiers 片 (pian4), 道 (dao4), 张 (zhang1), 匹 (pi1), 把 (ba3) and 件 (jian4) by the correct one 条 (tiao2).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  (
    (
      [@Annotations:
          Syntax.Analyses=
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  "片|道|张|匹|把")
      ] :
      (
        <ADJPHRASE1>
          [@Annotations:
              Syntax.Analyses=
                AND(
                  *Contains(
                    +Chinese_SimplifiedMorph.Adj)
                ,
                  *ForAll(
                    Normalization.Result=
                      NormalizedForm=
                        NOT(
                          "整")))
          ] :
          (
            [@Annotations:
                Syntax.Analyses=
                  *Contains(
                    Normalization.Result=
                      NormalizedForm=
                        "的")
            ]
          )?
        </ADJPHRASE1>
      )? :
      (
        <PREWORD>
          [@Annotations:
              Syntax.Analyses=
                *ForAll(
                  Normalization.Result=
                    NormalizedForm=
                      "羊毛")
          ]
        </PREWORD>
      )? :
      <NOUN1>
        [@Annotations:
            Syntax.Analyses=
              AND(
                OR(
                  AND(
                    *Contains(
                      +Chinese_SimplifiedMorph.Noun)
                  ,
                    *Contains(
                      Chinese_SimplifiedMorph.NominalClassifiersUnitPlants=
                        条_tiao2))
                ,
                  *ForAll(
                    Normalization.Result=
                      NormalizedForm=
                        "线|绳|巷"))
              ,
                *ForAll(
                  Normalization.Result=
                    NormalizedForm=
                      NOT(
                        "烟|沟|伤疤|防线|凳子|小黄瓜|风景线")))
        ]
      </NOUN1>
    )
    |
    (
      [@Annotations:
          Syntax.Analyses=
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  "件")
      ] :
      (
        <ADJPHRASE2>
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Adj)
          ] :
          (
            [@Annotations:
                Syntax.Analyses=
                  *Contains(
                    Normalization.Result=
                      NormalizedForm=
                        "的")
            ]
          )?
        </ADJPHRASE2>
      )? :
      <NOUN2>
        [@Annotations:
            Syntax.Analyses=
              AND(
                *Contains(
                  +Chinese_SimplifiedMorph.Noun)
              ,
                *ForAll(
                  Normalization.Result=
                    NormalizedForm=
                      *Contains(裙|裤)))
        ]
      </NOUN2>
    )
  )
</TARGET> :
<POSTWORD>
  .
</POSTWORD>
WHERE:
  *SubSRE(
    POSTWORD
  ,
    [@Annotations:
        Syntax.Analyses?=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                NOT(
                  "子|的|菜|老化|扳子"))
    ])

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Preword
  ,
    If(
      IsDefined(PREWORD)
    ,
      %{GetSingleCapture(
          Get(PREWORD))}))
  .
  New(
    Adjphrase1
  ,
    If(
      IsDefined(ADJPHRASE1)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE1))}))
  .
  New(
    Noun1
  ,
    If(
      IsDefined(NOUN1)
    ,
      %{GetSingleCapture(
          Get(NOUN1))}))
  .
  New(
    Adjphrase2
  ,
    If(
      IsDefined(ADJPHRASE2)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE2))}))
  .
  New(
    Noun2
  ,
    If(
      IsDefined(NOUN2)
    ,
      %{GetSingleCapture(
          Get(NOUN2))})))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "条")).
        If(
          IsDefined(ADJPHRASE1)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase1))})
        ,
          If(
            IsDefined(ADJPHRASE2)
          ,
            Concat(
              %{SpanTextWithoutFinalWS(
                  Get(Adjphrase2))}))).
        If(
          IsDefined(POSTWORD)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Preword))})).
        If(
          IsDefined(NOUN1)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Noun1))})
        ,
          If(
            IsDefined(NOUN2)
          ,
            Concat(
              %{SpanTextWithoutFinalWS(
                  Get(Noun2))}))))})}

-------------------------------
[Chunk Grammar Rule]
ClassifierMatching_tou2_animals
-------------------------------
== GUID ==
70b1f8ea-dd02-43fe-a0ad-46106db63b90

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 匹 (pi1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 头 (tou2).

The Action is to replace the wrong quantifier 匹 (pi1) by the correct one 头 (tou2).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "匹")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          OR(
            AND(
              *Contains(
                +Chinese_SimplifiedMorph.Noun)
            ,
              *Contains(
                Chinese_SimplifiedMorph.NominalClassifiersUnitAnimals=
                  头_tou2))
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  "羊|牛|猪"))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "头")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

--------------------------------
[Chunk Grammar Rule]
ClassifierMatching_zhang1_ojects
--------------------------------
== GUID ==
5bb673de-4f46-4d94-8232-ea4901cc7281

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 个 (ge4), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 张 (zhang1).

The Action is to replace the wrong quantifier 个 (ge4) by the correct one 张 (zhang1).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "个")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitDocuments=
                张_zhang1))
    ]
  </NOUN>
</TARGET> :
<POSTWORD>
  .
</POSTWORD>
WHERE:
  *SubSRE(
    POSTWORD
  ,
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                NOT(
                  "病|病色|文件夹"))
    ])

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "张")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

-------------------------------
[Chunk Grammar Rule]
ClassifierMatching_zhi1_animals
-------------------------------
== GUID ==
dd45e611-727f-4f7f-bd56-7f508f11882a

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 支 (zhi1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 只 (zhi1).

The Action is to replace the wrong quantifier 支 (zhi1) by the correct one 只 (zhi1).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "支")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitAnimals=
                只_zhi1)
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  NOT(
                    "口红|唇膏|眉笔|手电筒|温度计|拐杖|飞镖")))
    ]
  </NOUN>
</TARGET> :
<POSTWORD>
  .
</POSTWORD>
WHERE:
  *SubSRE(
    POSTWORD
  ,
    [@Annotations:
        Syntax.Analyses=
          *ForAll(
            Normalization.Result=
              NormalizedForm=
                NOT(
                  "的|头|簪子|步摇|毛笔|眼镜头"))
    ])

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "只")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

-------------------------------
[Chunk Grammar Rule]
ClassifierMatching_zhi1_objects
-------------------------------
== GUID ==
20d11e74-295a-47bd-a54e-7fca3e6d4dd5

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifiers 只 (zhi1) and 枝 (zhi1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 支 (zhi1).

The Action is to replace the wrong quantifiers 只 (zhi1) and 枝 (zhi1) by the correct one 支 (zhi1).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "只|枝")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitMusic=
                支_zhi1)
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  AND(
                    NOT(
                      *EndsWith(笔|枪|箭|壶))
                  ,
                    NOT(
                      "角|蜡烛|手套|镯子|手机|耳机|竹筒|热水瓶|花瓶"))))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "支")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

------------------------------
[Chunk Grammar Rule]
ClassifierMatching_zhi1_plants
------------------------------
== GUID ==
41639a3b-db36-4a58-9e25-4b4fd8a38c43

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifier 支 (zhi1), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 枝 (zhi1).

The Action is to replace the wrong quantifier 支 (zhi1) by the correct one 枝 (zhi1).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "支")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitPlants=
                枝_zhi1)
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  NOT(
                    "枪|筷子")))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "枝")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

--------------------------------
[Chunk Grammar Rule]
ClassifierMatching_zuo4_building
--------------------------------
== GUID ==
76cbbcd4-2244-46aa-ae00-59bf376ed00c

== DESCRIPTION ==
The Pattern is to flag sequences comprised of cardinal numbers or a set of determiners (e.g. 每 (every) | 几 (several) | 这 (this) | 那 (that)), followed by the wrong quantifiers 坐 (zhi1) and 条 (tiao2), optional Adjective Phrase(s) and finally nouns associated with the appropriate quantifier 座 (zuo4).

The Action is to replace the wrong quantifiers 坐 (zhi1) and 条 (tiao2) by the correct one 座 (zuo4).

== PATTERN ==
<TARGET>
  <NUM>
    [@Annotations:
        OR(
          AND(
            OR(
              Tokenization.TokenName=
                "NUMBER"
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.Analyses=
              *ForAll(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      NOT(
                        *EndsWith(%|％))
                    ,
                      NOT(
                        *StartsWith(第))
                    ,
                      NOT(
                        *Contains(点))
                    ,
                      NOT(
                        *StartsWith(-))
                    ,
                      NOT(
                        *EndsWith(-))))
          ,
            Syntax.FinalWSCount?=
              >=0)
        ,
          AND(
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "每|几|这|那")
          ,
            Syntax.FinalWSCount?=
              >=0))
    ]
  </NUM> :
  [@Annotations:
      Syntax.Analyses=
        *ForAll(
          Normalization.Result=
            NormalizedForm=
              "坐|条")
  ] :
  (
    <ADJPHRASE>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Adj)
      ] :
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "的")
        ]
      )?
    </ADJPHRASE>
  )? :
  <NOUN>
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *Contains(
              Chinese_SimplifiedMorph.NominalClassifiersUnitBuildings=
                座_zuo4))
    ]
  </NOUN>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Num
  ,
    %{GetSingleCapture(
        Get(NUM))})
  .
  New(
    Adjphrase
  ,
    If(
      IsDefined(ADJPHRASE)
    ,
      %{GetSingleCapture(
          Get(ADJPHRASE))}))
  .
  New(
    Noun
  ,
    %{GetSingleCapture(
        Get(NOUN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Quantifier Error")
  ,
    %{SuggestLiteral(
        Get(Num).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "座")).
        If(
          IsDefined(ADJPHRASE)
        ,
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Adjphrase))})).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Noun))}))})}

--------------------------------------------
[Chunk Grammar Rule]
error_closing_double_quote_consecutive_punct
--------------------------------------------
== GUID ==
470ba51f-39c0-4faf-801e-134f2afaad58

== DESCRIPTION ==
This rule targets consecutive occurrences of full-width double closing quote and half-width comma/dot/question mark/closing parenthesis/exclamation mark.
The suggestion is to flag them and preceding word as whole, and replace the punctuation marks with full-width corresponding ones.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteClosing=
        True
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(!|\)|,|\.|\?)$)
  ]
</TARGET3>
WHERE:
  AND(
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "’|'")
        ]))
  ,
    NOT(
      *SubSRE(
        Before(Match)
      ,
        #START# :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "printf|s|Left|Val|Upper|requestParams.put|•")
        ]))
  ,
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "＝")
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "“")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [a-zA-Z]{1,20})
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target3).
      Attr(Span.Text).
      Matches(
        ^(\)|）)$)
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "”）")))}
    ,
      If(
        Get(Target3).
        Attr(Span.Text).
        Matches(
          "？|?")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "”？")))}
      ,
        If(
          Get(Target3).
          Attr(Span.Text).
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "”！")))}
        ,
          If(
            Get(Target3).
            Attr(Span.Text).
            Matches(
              [\,\，])
          ,
            %{SuggestLiteral(
                %{SpanTextWithoutFinalWS(
                    Get(Target1))}.
                Concat(
                  Value(
                    String
                  ,
                    "”，")))}
          ,
            If(
              Get(Target3).
              Attr(Span.Text).
              Matches(
                "。|.")
            ,
              %{SuggestLiteral(
                  %{SpanTextWithoutFinalWS(
                      Get(Target1))}.
                  Concat(
                    Value(
                      String
                    ,
                      "”。")))}))))))}

--------------------------------
[Chunk Grammar Rule]
error_closing_double_quote_punct
--------------------------------
== GUID ==
89e0904a-0e09-441f-af41-2b35c0a8d166

== DESCRIPTION ==
This rule targets consecutive occurrences of half-width double closing quote and full-width comma/dot/question mark/closing parenthesis/exclamation mark.
The suggestion is to flag them and preceding word as whole, and replace the punctuation marks with full-width corresponding ones.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteClosing=
        True
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "！|）|，|。|？")
  ]
</TARGET3>
WHERE:
  AND(
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "’|'|”")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [a-zA-Z]{1,20})
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    If(
      Get(Target3).
      Attr(Span.Text).
      Matches(
        ^(\)|）)$)
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "”）")))}
    ,
      If(
        Get(Target3).
        Attr(Span.Text).
        Matches(
          "？|?")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "”？")))}
      ,
        If(
          Get(Target3).
          Attr(Span.Text).
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "”！")))}
        ,
          If(
            Get(Target3).
            Attr(Span.Text).
            Matches(
              [\,\，])
          ,
            %{SuggestLiteral(
                %{SpanTextWithoutFinalWS(
                    Get(Target1))}.
                Concat(
                  Value(
                    String
                  ,
                    "”，")))}
          ,
            If(
              Get(Target3).
              Attr(Span.Text).
              Matches(
                "。|.")
            ,
              %{SuggestLiteral(
                  %{SpanTextWithoutFinalWS(
                      Get(Target1))}.
                  Concat(
                    Value(
                      String
                    ,
                      "”。")))}))))))}

--------------------
[Chunk Grammar Rule]
error_closing_quote
--------------------
== GUID ==
87ca7f67-9285-4454-a2dc-6c201e64de73

== DESCRIPTION ==
This rule targets a closing quote in half-width when it follows a word. The suggestion is to replace the half-width closing quote with corresponding full-width one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteClosing=
        True
  ]
</TARGET2>
WHERE:
  AND(
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "’|”")
        ]))
  ,
    NOT(
      *SubSRE(
        After(TARGET2)
      ,
        #START# :
        [@Annotations:
            Tokenization.TokenName=
              *StartsWith(P_)
        ]))
  ,
    *SubSRE(
      TARGET1
    ,
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              "NUMBER")
      ])
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Chinese_SimplifiedSyntax.LatinString=
              True
        ]))
  ,
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ""|'|”|’")
        ] :
        #END#))
  ,
    OR(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NOT(
                    NormalizedForm=
                      "F"))
        ])
    ,
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NOT(
                    NormalizedForm=
                      "'"))
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        If(
          Get(Target2).
          Attr(Span.Text).
          Matches(
            ""|" |" ")
        ,
          Concat(
            Value(
              String
            ,
              "”"))
        ,
          If(
            Get(Target2).
            Attr(Span.Text).
            Matches(
              "'|' ")
          ,
            Concat(
              Value(
                String
              ,
                "’")))))})}

--------------------------------------------
[Chunk Grammar Rule]
error_closing_single_quote_consecutive_punct
--------------------------------------------
== GUID ==
b7ee4fcf-d272-40e4-bd7d-27b56b42622f

== DESCRIPTION ==
This rule targets consecutive occurrences of full-width single closing quote and half-width comma/dot/question mark/closing parenthesis/exclamation mark.
The suggestion is to flag them and preceding word as whole, and replace the punctuation marks with full-width corresponding ones.

== PATTERN ==
<TARGET1>
  AND(
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            *StartsWith(P_))
    ]
  ,
    [@Annotations:
        Chinese_SimplifiedSyntax.LatinString=
          False
    ])
</TARGET1> :
<TARGET2>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteClosing=
        True
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(!|\)|,|\.|\?)$)
  ]
</TARGET3>
WHERE:
  AND(
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "”|"")
        ]))
  ,
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [a-zA-Z])
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ^\($)
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "'")
        ]))
  ,
    AND(
      NOT(
        *SubSRE(
          Before(TARGET1)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "‘|'")
          ]))
    ,
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Tokenization.TokenName=
              NOT(
                "NUMBER")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target3).
      Attr(Span.Text).
      Matches(
        ^(\)|）)$)
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "’）")))}
    ,
      If(
        Get(Target3).
        Attr(Span.Text).
        Matches(
          "？|?")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "’？")))}
      ,
        If(
          Get(Target3).
          Attr(Span.Text).
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "’！")))}
        ,
          If(
            Get(Target3).
            Attr(Span.Text).
            Matches(
              [\,\，])
          ,
            %{SuggestLiteral(
                %{SpanTextWithoutFinalWS(
                    Get(Target1))}.
                Concat(
                  Value(
                    String
                  ,
                    "’，")))}
          ,
            If(
              Get(Target3).
              Attr(Span.Text).
              Matches(
                "。|.")
            ,
              %{SuggestLiteral(
                  %{SpanTextWithoutFinalWS(
                      Get(Target1))}.
                  Concat(
                    Value(
                      String
                    ,
                      "’。")))}))))))}

--------------------------------
[Chunk Grammar Rule]
error_closing_single_quote_punct
--------------------------------
== GUID ==
18d4edec-cdd0-4e78-a9ff-2bc1669df4f4

== DESCRIPTION ==
This rule targets consecutive occurrences of half-width single closing quote and full-width comma/dot/question mark/closing parenthesis/exclamation mark.
The suggestion is to flag them and preceding word as whole, and replace the punctuation marks with full-width corresponding ones.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteClosing=
        True
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "！|）|，|。|？")
  ]
</TARGET3>
WHERE:
  AND(
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "”|"|’")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Tokenization.TokenName=
              "NUMBER"
        ]))
  ,
    NOT(
      *SubSRE(
        Before(Match)
      ,
        #START# :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "VALUES")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    If(
      Get(Target3).
      Attr(Span.Text).
      Matches(
        ^(\)|）)$)
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "’）")))}
    ,
      If(
        Get(Target3).
        Attr(Span.Text).
        Matches(
          "？|?")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "’？")))}
      ,
        If(
          Get(Target3).
          Attr(Span.Text).
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "’！")))}
        ,
          If(
            Get(Target3).
            Attr(Span.Text).
            Matches(
              [\,\，])
          ,
            %{SuggestLiteral(
                %{SpanTextWithoutFinalWS(
                    Get(Target1))}.
                Concat(
                  Value(
                    String
                  ,
                    "’，")))}
          ,
            If(
              Get(Target3).
              Attr(Span.Text).
              Matches(
                "。|.")
            ,
              %{SuggestLiteral(
                  %{SpanTextWithoutFinalWS(
                      Get(Target1))}.
                  Concat(
                    Value(
                      String
                    ,
                      "’。")))}))))))}

----------------------
[Chunk Grammar Rule]
error_colon_open_quote
----------------------
== GUID ==
d569a5bb-5c10-4f94-b88c-5e9b8b849103

== DESCRIPTION ==
This rule targets consecutive occurrences ofcolon and opening double quote, when either of these two is half-width.
The suggestion is to replace them with  corresponding full-width punctuation marks.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ":|：")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteOpening=
        True
  ]
</TARGET3>
WHERE:
  AND(
    OR(
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "：")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET3
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "“|'|‘")
          ])))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [a-zA-Z]{1,20})
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET3
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "'|‘")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "：“")))})}

-----------------------------
[Chunk Grammar Rule]
error_colon_open_single_quote
-----------------------------
== GUID ==
fa8c41b9-6c71-4735-9d98-86c077ff3684

== DESCRIPTION ==
This rule targets consecutive occurrences of clon and opening single quote, when either of these two is half-width.
The suggestion is to replace them with  corresponding full-width punctuation marks.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ":|：")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteOpening=
        True
  ]
</TARGET3>
WHERE:
  AND(
    OR(
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "：")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET3
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "‘|"|“")
          ])))
  ,
    NOT(
      *SubSRE(
        TARGET3
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ""|“")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "：‘")))})}

-------------------------------
[Chunk Grammar Rule]
error_consecutive_closing_quote
-------------------------------
== GUID ==
80290032-019b-49d5-b0c5-65b97287b1a6

== DESCRIPTION ==
This rule targets consecutive occurrences of  dot/question mark/exclamation mark and closing double quote when either of them is half/width.
The suggestion is to flag them and preceding word as whole, and replace the punctuation marks with full-width corresponding ones.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ".|?|!|。|？|！")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteClosing=
        True
  ]
</TARGET3>
WHERE:
  AND(
    OR(
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "。|？|！")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET3
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "”|'|’")
          ])))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [a-zA-Z]{1,20})
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET3
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "'|’")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    If(
      Get(Target2).
      Attr(Span.Text).
      Matches(
        ".|。")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "。”")))}
    ,
      If(
        Get(Target2).
        Attr(Span.Text).
        Matches(
          "？|?")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "？”")))}
      ,
        If(
          Get(Target2).
          Attr(Span.Text).
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "！”")))}))))}

--------------------------------------
[Chunk Grammar Rule]
error_consecutive_single_closing_quote
--------------------------------------
== GUID ==
12b06f2f-b6a1-4a9e-b2b6-1fa95409e2f1

== DESCRIPTION ==
This rule targets consecutive occurrences of  dot/question mark/exclamation mark and closing single quote when either of them is half/width.
The suggestion is to flag them and preceding word as whole, and replace the punctuation marks with full-width corresponding ones.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ".|?|!|。|？|！")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "’|'")
  ]
</TARGET3>
WHERE:
  AND(
    OR(
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "。|？|！")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET3
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "’")
          ])))
  ,
    *SubSRE(
      Before(TARGET1)
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "‘|'")
      ]))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    If(
      Get(Target2).
      Attr(Span.Text).
      Matches(
        ".|。")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "。’")))}
    ,
      If(
        Get(Target2).
        Attr(Span.Text).
        Matches(
          "？|?")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "？’")))}
      ,
        If(
          Get(Target2).
          Attr(Span.Text).
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "！’")))}))))}

--------------------
[Chunk Grammar Rule]
error_digital
--------------------
== GUID ==
7010e46c-8852-4625-ae1e-af6266358da6

== DESCRIPTION ==
This rule targets full-width digits, when they are used in Chinese 

texts. The suggestion is to replace them with the corresponding 

half-width one, e.g., ５６ -> 56.

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER|DATE|CURRENCY|TIME|URL|WORD"
  ]
</TARGET>
WHERE:
  *SubSRE(
    TARGET
  ,
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                *Contains(１|２|３|４|５|６|７|８|９|０))
    ])

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "０")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "0")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "１")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "1")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "２")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "2")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "３")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "3")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "４")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "4")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "５")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "5")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "６")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "6")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "７")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "7")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "８")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "8")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "９")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "9")))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Get(Char).
                            Attr(AnnotationScript.String)))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Digital Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

--------------------
[Chunk Grammar Rule]
error_digital_punct
--------------------
== GUID ==
9bcc64ac-d0d9-4e32-8efe-5976f66bb01f

== DESCRIPTION ==
This rule targets full-width digits, when they are used in Chinese 

texts. The suggestion is to replace them with the corresponding 

half-width one, e.g., ５６ -> 56.

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER|DATE|CURRENCY|TIME|URL|WORD"
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ";|,|!|?")
  ]
</TARGET1>
WHERE:
  *SubSRE(
    TARGET
  ,
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                *Contains(１|２|３|４|５|６|７|８|９|０))
    ])

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "０")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "0")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "１")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "1")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "２")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "2")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "３")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "3")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "４")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "4")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "５")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "5")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "６")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "6")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "７")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "7")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "８")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "8")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "９")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "9")))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Get(Char).
                            Attr(AnnotationScript.String)))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Digital Error")
  ,
    If(
      Get(Target1).
      Attr(Span.Text).
      Matches(
        ";")
    ,
      %{SuggestLiteral(
          Get(Whiteboard).
          Attr(AnnotationScript.String).
          Concat(
            Value(
              String
            ,
              "；")))}
    ,
      If(
        Get(Target1).
        Attr(Span.Text).
        Matches(
          \,)
      ,
        %{SuggestLiteral(
            Get(Whiteboard).
            Attr(AnnotationScript.String).
            Concat(
              Value(
                String
              ,
                "，")))}
      ,
        If(
          Get(Target1).
          Attr(Span.Text).
          Matches(
            "?")
        ,
          %{SuggestLiteral(
              Get(Whiteboard).
              Attr(AnnotationScript.String).
              Concat(
                Value(
                  String
                ,
                  "？")))}
        ,
          If(
            Get(Target1).
            Attr(Span.Text).
            Matches(
              "!")
          ,
            %{SuggestLiteral(
                Get(Whiteboard).
                Attr(AnnotationScript.String).
                Concat(
                  Value(
                    String
                  ,
                    "！")))})))))}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

---------------------
[Chunk Grammar Rule]
error_interjection_ba
---------------------
== GUID ==
5a3d4613-89ea-4ab4-bc8a-0b52cfc66ce1

== DESCRIPTION ==
This rule targets CHS character  吧  (ba) incorrectly used as an interjection at the end of a CHS sentence. 
The suggestion is to flag the character and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
<TARGET1>
  [@Text:
      "把"
  ]
</TARGET1> :
<TARGET2>
  [@Text:
      "?|!|？|！"
  ]
</TARGET2>
WHERE:
  *SubSRE(
    Before(TARGET1)
  ,
    NOT(
      [@Text:
          "一"
      ]) :
    #END#)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        "?|？")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "吧？"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "！|!")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "吧！"))})))}

---------------------
[Chunk Grammar Rule]
error_interjection_de
---------------------
== GUID ==
bb6647d3-d1ca-49cb-9cfe-70cadbc540a6

== DESCRIPTION ==
This rule targets CHS character  滴  (di) incorrectly used as an interjection at the end of a CHS sentence. 
The suggestion is to flag the character and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "滴")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ".|。|，|,|！|!")
  ]
</TARGET2>
WHERE:
  *SubSRE(
    Before(TARGET1)
  ,
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "好|对|真|是|稀罕|问题|真相")
    ] :
    #END#)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        [\, \，])
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "的，"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "。|.")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "的。"))}
      ,
        If(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}.
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              Value(
                String
              ,
                "的！"))}))))}

--------------------
[Chunk Grammar Rule]
error_interjection_e
--------------------
== GUID ==
7d929dd6-6527-46bf-8a34-4fe439da76aa

== DESCRIPTION ==
This rule targets CHS character  额  (e) incorrectly used as an interjection at the end of a CHS sentence. 
The suggestion is to flag the character and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
#START# :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "额")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ".|。|，|,|！|!")
  ]
</TARGET2>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        [\, \，])
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "呃，"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "。|.")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "呃。"))}
      ,
        If(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}.
          Matches(
            "！|!")
        ,
          %{SuggestLiteral(
              Value(
                String
              ,
                "呃！"))}))))}

----------------------
[Chunk Grammar Rule]
error_interjection_e_1
----------------------
== GUID ==
ee6e5361-c9e7-49cb-9850-ad0e7ad4b5c0

== DESCRIPTION ==
This rule targets CHS character  额  (e) incorrectly used as an interjection at the end of a CHS sentence. Besides,  there exist a comma or CHS character 了 before 额.
The suggestion is to flag the character 额  and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "额")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ".|。|，|,|！|!")
  ]
</TARGET2>
WHERE:
  *SubSRE(
    Before(TARGET1)
  ,
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "，|了")
    ] :
    #END#)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        [\, \，])
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "呃，"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "。|.")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "呃。"))}
      ,
        If(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}.
          Matches(
            "！|!")
        ,
          %{SuggestLiteral(
              Value(
                String
              ,
                "呃！"))}))))}

---------------------
[Chunk Grammar Rule]
error_interjection_en
---------------------
== GUID ==
f65e5fa8-84c2-4305-83d0-00729c0518c2

== DESCRIPTION ==
This rule targets CHS character  恩  (en) incorrectly used as an interjection before  CHS character  恩. 
The suggestion is to flag this character, and replace it with the correct expression.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "恩")
  ]
</TARGET1>
WHERE:
  *SubSRE(
    After(TARGET1)
  ,
    #START# :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "恩")
    ])

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList()
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "嗯"))})}

-----------------------
[Chunk Grammar Rule]
error_interjection_en_1
-----------------------
== GUID ==
3dd3fc77-6587-4259-a71f-d651f8e4c007

== DESCRIPTION ==
This rule targets CHS character  恩 (en) incorrectly used as an interjection at the end of a CHS sentence. Besides,  there exist a CHS character  恩 or comma before 恩.
The suggestion is to flag the character 恩  and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "恩")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "，|,|！|!|。|.")
  ]
</TARGET2>
WHERE:
  *SubSRE(
    Before(TARGET1)
  ,
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "恩|，")
    ] :
    #END#)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        [\, \，])
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "嗯，"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "!|！")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "嗯！"))}
      ,
        If(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}.
          Matches(
            ".|。")
        ,
          %{SuggestLiteral(
              Value(
                String
              ,
                "嗯。"))}))))}

-----------------------
[Chunk Grammar Rule]
error_interjection_en_2
-----------------------
== GUID ==
8f5a7966-e16b-4fb7-8c56-a1912403991b

== DESCRIPTION ==
This rule targets CHS character  恩 (en) incorrectly used as an interjection at the end of a CHS sentence. 
The suggestion is to flag the character 恩  and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
#START# :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "恩")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "，|,|！|!|。|.")
  ]
</TARGET2>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        [\, \，])
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "嗯，"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "!|！")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "嗯！"))}
      ,
        If(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}.
          Matches(
            ".|。")
        ,
          %{SuggestLiteral(
              Value(
                String
              ,
                "嗯。"))}))))}

---------------------
[Chunk Grammar Rule]
error_interjection_ha
---------------------
== GUID ==
290a5bf6-d88f-4d51-99e3-64298c6df9c7

== DESCRIPTION ==
This rule targets CHS character  蛤 (ha) incorrectly used as an interjection.
The suggestion is to flag the character 蛤 and replace it with the correct expression.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "蛤")
  ]
</TARGET1>
WHERE:
  AND(
    NOT(
      *SubSRE(
        After(TARGET1)
      ,
        #START# :
        [@Text:
            "蟆|刃|贝|碁|和|壳|仔|螟"
        ]))
  ,
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Text:
            "雪|花|淡水|蟾|文|鸟|扇|灰|海|石"_@t
        ] :
        #END#)))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList()
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "哈"))})}

-----------------------
[Chunk Grammar Rule]
error_interjection_ha_1
-----------------------
== GUID ==
65398ae3-9f3e-43b2-8088-b7d6b0af6e92

== DESCRIPTION ==
This rule targets CHS character  蛤 (ha) incorrectly used as an interjection at the end of a CHS sentence. 
The suggestion is to flag the character 蛤  and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "蛤")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "，|,|！|!")
  ]
</TARGET2>
WHERE:
  NOT(
    *SubSRE(
      Before(TARGET1)
    ,
      [@Text:
          "雪"
      ] :
      #END#))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        [\, \，])
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "哈，"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "!|！")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "哈！"))})))}

----------------------
[Chunk Grammar Rule]
error_interjection_luo
----------------------
== GUID ==
fa7020a8-8e3b-4ac6-811b-568703ecb84c

== DESCRIPTION ==
This rule targets CHS character  罗 (luo) incorrectly used as an interjection at the end of a CHS sentence. 
The suggestion is to flag the character 罗  and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "罗")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "？|?|!|！")
  ]
</TARGET2>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        "?|？")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "啰？"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "!|！")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "啰！"))})))}

------------------------
[Chunk Grammar Rule]
error_interjection_luo_1
------------------------
== GUID ==
01048ac6-1dd1-4345-8cc1-19c320d1be3f

== DESCRIPTION ==
This rule targets CHS word  哈罗 (ha luo) incorrectly used as an interjection. 
The suggestion is to flag the whole word and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
#START# :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "哈罗")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "!|！")
  ]
</TARGET2>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        "?|？")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "哈啰？"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "!|！")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "哈啰！"))})))}

------------------------
[Chunk Grammar Rule]
error_interjection_mie_1
------------------------
== GUID ==
aaa18b32-2d59-4d9b-96f8-d9aeccd1e46d

== DESCRIPTION ==
This rule targets CHS character 咩 (mie) incorrectly used as an interjection at the end of a CHS sentence. 
The suggestion is to flag the character 咩  and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "咩")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "，|,|？|?|.|。|！|!")
  ]
</TARGET2>
WHERE:
  NOT(
    *SubSRE(
      Before(TARGET1)
    ,
      [@Text:
          "咩"
      ] :
      #END#))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        [\, \，])
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "吗，"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "!|！")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "吗！"))}
      ,
        If(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}.
          Matches(
            "？|?")
        ,
          %{SuggestLiteral(
              Value(
                String
              ,
                "吗？"))}
        ,
          If(
            %{SpanTextWithoutFinalWS(
                Get(Target2))}.
            Matches(
              "。|.")
          ,
            %{SuggestLiteral(
                Value(
                  String
                ,
                  "吗。"))})))))}

---------------------
[Chunk Grammar Rule]
error_interjection_ne
---------------------
== GUID ==
61baa11c-aa84-4aea-9ace-9acbedcacb28

== DESCRIPTION ==
This rule targets CHS character  捏 (ne) incorrectly used as an interjection at the end of a CHS sentence. 
The suggestion is to flag the character 捏  and the punctuation mark following it, and replace them with the correct expression.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "捏")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "?|？|！|!")
  ]
</TARGET2>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Interjection Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target2))}.
      Matches(
        [\, \，])
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "呢，"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target2))}.
        Matches(
          "!|！")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "呢！"))}
      ,
        If(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}.
          Matches(
            "？|?")
        ,
          %{SuggestLiteral(
              Value(
                String
              ,
                "呢？"))}
        ,
          If(
            %{SpanTextWithoutFinalWS(
                Get(Target2))}.
            Matches(
              "。|.")
          ,
            %{SuggestLiteral(
                Value(
                  String
                ,
                  "呢。"))})))))}

--------------------
[Chunk Grammar Rule]
error_nonlexical_a
--------------------
== GUID ==
c0747bd4-8945-4abe-bd04-aa3803421926

== DESCRIPTION ==
This rule targets CHS character 阿 (a) incorrectly used at the end of a sentence. 
The suggestion is to flag this word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "阿")
  ]
</TARGET1>
WHERE:
  AND(
    *SubSRE(
      After(TARGET1)
    ,
      #START# :
      [@Text:
          "？|！|。|，"
      ])
  ,
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Text:
            "廉洁|刚正|公正"
        ] :
        [@Text:
            "不"
        ] :
        #END#)))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "啊"))})}

---------------------
[Chunk Grammar Rule]
error_nonlexical_anli
---------------------
== GUID ==
86f766e3-c226-4b17-a26a-8cd468e77af9

== DESCRIPTION ==
This rule targets CHS character 列  (lie) incorrectly used in the word 案例(anli). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "案")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "列")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "例")))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_baofahu
------------------------
== GUID ==
626c2bfd-7cbe-4c8d-bb84-e0ccc9f6a0d0

== DESCRIPTION ==
This rule targets CHS character 爆 (bao ) incorrectly used in the word 暴发户 (baofahu ). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "爆发")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "户")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "暴发").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_baoguang
-------------------------
== GUID ==
def69506-f8eb-4976-9753-5ff4f925a106

== DESCRIPTION ==
This rule targets CHS character 爆 (bao) incorrectly used in the word 曝光 (bao guang). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "爆")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "光")
  ]
</TARGET>
WHERE:
  NOT(
    *SubSRE(
      Before(TARGET1)
    ,
      [@Text:
          "核"
      ] :
      #END#))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "曝").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_baozao
-----------------------
== GUID ==
8ec638fd-f64c-4cfb-a4ec-2b5a06a7a2e2

== DESCRIPTION ==
This rule targets CHS character 爆 (bao) incorrectly used in the word 暴涨 （bao zhang）and 暴躁(bao zao). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "爆")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "涨|躁")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "暴").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_baozha
-----------------------
== GUID ==
bc5e6c9f-560b-46e1-b031-271cccfd8d56

== DESCRIPTION ==
This rule targets CHS character 暴 (bao) incorrectly used in the words 爆裂  (bao lie) and 爆炸 (bao zha). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "暴")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "裂|炸")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "爆").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

---------------------
[Chunk Grammar Rule]
error_nonlexical_baqi
---------------------
== GUID ==
0edf9ebf-6d9e-4dd7-ab65-25e1258a4fe3

== DESCRIPTION ==
This rule targets CHS character 拨  (bo) incorrectly used in the word 拔起 (ba qi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "拨")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "起")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "拔").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_benfen
-----------------------
== GUID ==
42405792-a6d3-4661-9970-6e96055ef117

== DESCRIPTION ==
This rule targets CHS character 份 (fen) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "成|水|过|本|情|充|部|养")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "份")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "分")))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_bianbie
------------------------
== GUID ==
0db9271a-5994-464b-88e3-003ab2e62d91

== DESCRIPTION ==
This rule targets CHS character 辩/辫 (bian) incorrectly used in the words 辨别(bian bie) and 辨认(bianren).
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "辩|辫")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "别|认")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "辨").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

---------------------
[Chunk Grammar Rule]
error_nonlexical_boda
---------------------
== GUID ==
61ba5c17-88bc-4cf3-bd57-2f7193e6eef9

== DESCRIPTION ==
This rule targets CHS character 拔 (ba) incorrectly used in the words 拨打 (dujia) and 拨款(bo kuan). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "拔")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "打|款")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "拨").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_bolaipin
-------------------------
== GUID ==
c259da48-ebe2-495a-90de-a935dbb3c349

== DESCRIPTION ==
This rule targets CHS character 泊  (bo) incorrectly used in the word 舶来品(bo lai pin). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "泊")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "来")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "品")
    ]
  </TARGET2>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "舶来品"))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_cailie
-----------------------
== GUID ==
31fb3b84-888b-420b-909d-45ddd526271b

== DESCRIPTION ==
This rule targets CHS character 彩 (cai) incorrectly used in word 兴高采烈 (xinggaocailie). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "兴")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "高彩烈")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "高采烈")))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_caixia
-----------------------
== GUID ==
ebcf8240-8ec2-4b3c-8e44-7a5276f862fc

== DESCRIPTION ==
This rule targets CHS character 采 (cai) incorrectly used in the word 彩霞 (caixia). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "采")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "霞")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "彩").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_caiyong
------------------------
== GUID ==
ef8b0d4a-b9ba-43dd-a741-e3c61e38c7fc

== DESCRIPTION ==
This rule targets character 彩 (cai) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "彩")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "用|集|访")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "采").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

--------------------------
[Chunk Grammar Rule]
error_nonlexical_chouxiang
--------------------------
== GUID ==
f5bc0fe5-7b9e-4b11-b26d-ac29a37aba88

== DESCRIPTION ==
This rule targets CHS character 像 (xiang) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "抽|具|形")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "像")
  ]
</TARGET1>
WHERE:
  OR(
    NOT(
      *SubSRE(
        TARGET
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "想")
        ]))
  ,
    NOT(
      *SubSRE(
        After(Match)
      ,
        (
          [@Annotations:
              Tokenization.TokenName=
                "WORD"
          ]
        )+ :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "一样|这样|那样")
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "象")))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_dabian
-----------------------
== GUID ==
3f340784-c6f2-4119-9280-54f267feee1d

== DESCRIPTION ==
This rule targets CHS character 答  (da) incorrectly used in the word 答辩 (da bian). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "答")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "辨")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "辩")))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_dianbo
-----------------------
== GUID ==
d9669376-18b1-4d8a-bbdd-b024e6f2f4f9

== DESCRIPTION ==
This rule targets CHS character 拔(ba) incorrectly used in the word 点拨 (dian bo). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "点")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "拔")
  ]
</TARGET1>
WHERE:
  NOT(
    *SubSRE(
      After(TARGET1)
    ,
      #START# :
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "牙")
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "拨")))})}

----------------------
[Chunk Grammar Rule]
error_nonlexical_dujia
----------------------
== GUID ==
d8c8820e-83c8-4f63-9e92-2b6980007c0f

== DESCRIPTION ==
This rule targets CHS character (du) 渡incorrectly used in the word 度假 (dujia). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "渡")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "假")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "度").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_fanhui
-----------------------
== GUID ==
b5c83dcb-5cb9-4d36-9277-643a90deb285

== DESCRIPTION ==
This rule targets CHS character 反 (fan) incorrectly used in the word 返回 (fan hui). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "反")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "回")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "返").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_fanzao
-----------------------
== GUID ==
a3acbcec-b9eb-4eda-9107-436fda900e63

== DESCRIPTION ==
This rule targets CHS character 燥  (zao) incorrectly used in the word 烦躁 (fan zao). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "烦")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "燥")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "躁")))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_feifen
-----------------------
== GUID ==
b26b8933-f007-47a5-a0fb-47b9eebef207

== DESCRIPTION ==
This rule targets CHS character 份 (fen) incorrectly used in the word 非分之想 (feifenzhixiang). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "非")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "份")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "之")
    ]
  </TARGET2> :
  <TARGET3>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "想")
    ]
  </TARGET3>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "非分之想"))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_fenbian
------------------------
== GUID ==
8177c476-4d82-4719-82c6-fba6afe2c6ed

== DESCRIPTION ==
This rule targets CHS character 辩  (bian) incorrectly used in the word 分辨(fen bian). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "分辩")
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "分辨"))})}

---------------------
[Chunk Grammar Rule]
error_nonlexical_fene
---------------------
== GUID ==
885b0e57-7bca-4501-ae39-62d4d90ab827

== DESCRIPTION ==
This rule targets CHS character 分 (fen) incorrectly used in the word 份额 (fene). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "分")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "额")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "份").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_fengcai
------------------------
== GUID ==
9b8c6372-e361-4961-b286-13a0d7de8e7b

== DESCRIPTION ==
This rule targets CHS character 采 (cai) incorrectly used in the word 风彩 (fengcai). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "风")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "彩")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "采")))})}

-----------------------------
[Chunk Grammar Rule]
error_nonlexical_fengfuduocai
-----------------------------
== GUID ==
a0b827f6-3750-4164-a7d0-5403ad52d306

== DESCRIPTION ==
This rule targets CHS character 采 (cai) incorrectly used in the word 丰富多彩(fengfuduocai). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "丰富多采")
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "丰富多彩"))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_fennei
-----------------------
== GUID ==
98e837a7-9668-47db-85f7-181cff12b469

== DESCRIPTION ==
This rule targets CHS character 份 (fen) incorrectly used in the word 分内(fennei). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "份")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "内")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "分").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_ganzao
-----------------------
== GUID ==
4188d34c-bda2-4003-8b35-4d30cc11a12e

== DESCRIPTION ==
This rule targets CHS character 躁  (zao) incorrectly used in the word 干燥 (gan zao). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "干")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "躁")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "燥")))})}

----------------------
[Chunk Grammar Rule]
error_nonlexical_gufen
----------------------
== GUID ==
744f7cdc-9275-4df9-a47d-6fe6c1c8a10e

== DESCRIPTION ==
This rule targets CHS character 分  (fen) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "股|月|年|省")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "分")
  ]
</TARGET1>
WHERE:
  AND(
    NOT(
      *SubSRE(
        Before(Match)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "按|一|3|个")
        ]))
  ,
    NOT(
      *SubSRE(
        After(Match)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "账|为")
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "份")))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_haoxiang
-------------------------
== GUID ==
3fd7a4be-f123-4cb1-9b21-7e9de1cb7363

== DESCRIPTION ==
This rule targets CHS characters 象 (xiang) incorrectly used in different CHS words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "好象|相象")
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target1))}.
      Matches(
        "好象")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "好像"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Matches(
          "相象")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "相像"))})))}

----------------------
[Chunk Grammar Rule]
error_nonlexical_hecai
----------------------
== GUID ==
da1feaf2-bc18-4db6-99f0-d977d0182810

== DESCRIPTION ==
This rule targets CHS character 采  (cai) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "喝|多|光|精|五")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "采")
  ]
</TARGET1>
WHERE:
  NOT(
    *SubSRE(
      After(TARGET1)
    ,
      #START# :
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "拮|煤炭")
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "彩")))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_huaxiang
-------------------------
== GUID ==
b35e7ea1-7e74-48bb-ba99-3a11d5a6d302

== DESCRIPTION ==
This rule targets CHS character 象  (xiang) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "画|塑|录")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "象")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "像")))})}

---------------------
[Chunk Grammar Rule]
error_nonlexical_huhu
---------------------
== GUID ==
a266d927-d4f4-4474-92e9-72ad03704d75

== DESCRIPTION ==
This rule targets CHS characters 呼呼  (huhu) incorrectly used in different words.
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "肉|黑|晕")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "呼")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "呼")
    ]
  </TARGET2>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "乎乎")))})}

----------------------
[Chunk Grammar Rule]
error_nonlexical_jiaju
----------------------
== GUID ==
85cc064d-42c8-46b4-b88c-d9ea36ac8682

== DESCRIPTION ==
This rule targets CHS character 俱  (ju) incorrectly used in the word 家具 (jiaju). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "家")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "俱")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "具")))})}

------------------------------
[Chunk Grammar Rule]
error_nonlexical_jiaorouzaozuo
------------------------------
== GUID ==
5e880ac3-8d0d-4496-977b-7de4812d0df7

== DESCRIPTION ==
This rule targets CHS character 娇 (jiao) incorrectly used in the word 矫揉造作(jiao rou zao zuo). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "娇")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "揉")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "造作")
    ]
  </TARGET2>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "矫揉造作"))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_jiuxiang
-------------------------
== GUID ==
282f1284-bf9d-42d3-a113-c3c859765711

== DESCRIPTION ==
This rule targets CHS character 象  (xiang) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "就|不|多|很")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "象")
  ]
</TARGET1>
WHERE:
  NOT(
    *SubSRE(
      After(TARGET1)
    ,
      #START# :
      [@Text:
          "形"
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "像")))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_jungong
------------------------
== GUID ==
f824647c-df70-41f6-aab7-049fb62b448e

== DESCRIPTION ==
This rule targets CHS character 峻 (jun) incorrectly used in the word 竣工(jun gong). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "峻")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "工")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "竣").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

------------------------------
[Chunk Grammar Rule]
error_nonlexical_kuaizhirenkou
------------------------------
== GUID ==
0344df0a-4e07-4ec8-b495-045e0101ff23

== DESCRIPTION ==
This rule targets CHS character 烩  (hui) incorrectly used in the word 脍炙人口 (kuai zhi ren kou). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "烩")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "炙")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "人口")
    ]
  </TARGET2>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "脍炙人口"))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_liaowang
-------------------------
== GUID ==
49e94808-facb-4d50-ab4c-9841155007dd

== DESCRIPTION ==
This rule targets CHS character 了  (liao) incorrectly used in the word 瞭望(liaowang). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "了")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "望")
  ]
</TARGET>
WHERE:
  AND(
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "妹妹|，")
        ]))
  ,
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "望")
        ] :
        #END#)))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "瞭").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

---------------------
[Chunk Grammar Rule]
error_nonlexical_lizi
---------------------
== GUID ==
f74b7812-7c76-41ef-876b-ab6d64bf70c1

== DESCRIPTION ==
This rule targets CHS character 列 (lie) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "列")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "子|如")
  ]
</TARGET>
WHERE:
  AND(
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "被|、|《")
        ] :
        #END#))
  ,
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "之|·|了|」|》")
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "例").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_mingbian
-------------------------
== GUID ==
cc94f49d-86e7-40fd-ad40-b004ab7cd038

== DESCRIPTION ==
This rule targets CHS character 辩/辫  (biain) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "分|明")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "辩|辫")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "辨")))})}

-------------------------------
[Chunk Grammar Rule]
error_nonlexical_moshouchenggui
-------------------------------
== GUID ==
ad2477cc-b3e2-4c97-b257-8a7551c6d404

== DESCRIPTION ==
This rule targets CHS character 默  (mo) incorrectly used in the word 墨守成规(mo shou cheng gui). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "默")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "守成")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "规")
    ]
  </TARGET2>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "墨守成规"))})}

---------------------------
[Chunk Grammar Rule]
error_nonlexical_ouxinlixue
---------------------------
== GUID ==
6e73e0ee-6fa6-4761-b465-be4545944806

== DESCRIPTION ==
This rule targets CHS character 沤 (ou) incorrectly used in the word 呕心沥血(ou xin li xue). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "沤")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "心")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "沥")
    ]
  </TARGET2> :
  <TARGET3>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "血")
    ]
  </TARGET3>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "呕心沥血"))})}

----------------------
[Chunk Grammar Rule]
error_nonlexical_qifen
----------------------
== GUID ==
7d0657c2-565b-4ae2-b4db-f3da76d83703

== DESCRIPTION ==
This rule targets CHS character 份  (fen) incorrectly used in the word 恰如其分(qiaruqifen). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "恰如")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "其")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "份")
    ]
  </TARGET2>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "恰如其分"))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_qihuhu
-----------------------
== GUID ==
1219f31c-bd20-4909-8141-b68f3243f1b9

== DESCRIPTION ==
This rule targets CHS character 乎乎 (huhu) incorrectly used in the word 气呼呼(qi hu hu). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "气乎乎")
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "气呼呼"))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_shencai
------------------------
== GUID ==
a375fb58-2aab-46a7-bda9-0af78015bccc

== DESCRIPTION ==
This rule targets CHS character 彩  (cai) incorrectly used in the word 神采(shencai). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "神彩")
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "神采"))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_shenfen
------------------------
== GUID ==
099b1b88-147b-42ae-80ba-2a4093573677

== DESCRIPTION ==
This rule targets CHS character 分  (fen) incorrectly used in the word 身份(shenfen). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "身分")
  ]
</TARGET1>
WHERE:
  NOT(
    *SubSRE(
      After(TARGET1)
    ,
      #START# :
      [@Text:
          "六腑"
      ]))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "身份"))})}

--------------------------
[Chunk Grammar Rule]
error_nonlexical_tianxiang
--------------------------
== GUID ==
e625050c-5a2a-45f1-a849-b753253020a7

== DESCRIPTION ==
This rule targets CHS character 像 (xiang) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "表|天|气|景|印")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "像")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "象")))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_tuxiang
------------------------
== GUID ==
5c27acc4-133f-4304-8ded-b394920dbf8c

== DESCRIPTION ==
This rule targets CHS character 像  (xiang) incorrectly used in the word 照相 (zhaoxiang). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "图")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "象")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "像")))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_wenshen
------------------------
== GUID ==
5786641c-a29f-4ce7-a8d5-b36812b4a4d5

== DESCRIPTION ==
This rule targets CHS characters incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "白晰|世外桃园|尤如|一如继往|甘败下风|磬竹难书|黄梁一梦|文身")
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target1))}.
      Matches(
        "白晰")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "白皙"))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Matches(
          "世外桃园")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "世外桃源"))}
      ,
        If(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Matches(
            "尤如")
        ,
          %{SuggestLiteral(
              Value(
                String
              ,
                "犹如"))}
        ,
          If(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Matches(
              "一如继往")
          ,
            %{SuggestLiteral(
                Value(
                  String
                ,
                  "一如既往"))}
          ,
            If(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Matches(
                "甘败下风")
            ,
              %{SuggestLiteral(
                  Value(
                    String
                  ,
                    "甘拜下风"))}
            ,
              If(
                %{SpanTextWithoutFinalWS(
                    Get(Target1))}.
                Matches(
                  "磬竹难书")
              ,
                %{SuggestLiteral(
                    Value(
                      String
                    ,
                      "罄竹难书"))}
              ,
                If(
                  %{SpanTextWithoutFinalWS(
                      Get(Target1))}.
                  Matches(
                    "黄梁一梦")
                ,
                  %{SuggestLiteral(
                      Value(
                        String
                      ,
                        "黄粱一梦"))}
                ,
                  If(
                    %{SpanTextWithoutFinalWS(
                        Get(Target1))}.
                    Matches(
                      "文身")
                  ,
                    %{SuggestLiteral(
                        Value(
                          String
                        ,
                          "纹身"))})))))))))}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_xiangmao
-------------------------
== GUID ==
9bf96971-4bd2-434b-8b32-dd1a18c9b948

== DESCRIPTION ==
This rule targets CHS character 像  (xiang) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "像")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "貌|纸")
  ]
</TARGET>
WHERE:
  AND(
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "就")
        ]))
  ,
    NOT(
      *SubSRE(
        After(Match)
      ,
        (
          [@Annotations:
              Tokenization.TokenName=
                "WORD"
          ]
        )* :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "一样")
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "相").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

--------------------------
[Chunk Grammar Rule]
error_nonlexical_xiangpian
--------------------------
== GUID ==
09251191-ec58-4b1a-944f-af72ab795dad

== DESCRIPTION ==
This rule targets CHS character 像  (xiang) incorrectly used in the word 相片 (xiangpian). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "像片")
  ]
</TARGET1>
WHERE:
  NOT(
    *SubSRE(
      Before(TARGET1)
    ,
      [@Text:
          "人"
      ] :
      #END#))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "相片"))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_xiangshi
-------------------------
== GUID ==
5ea0922b-49d4-43f7-a4c2-21314a1c86be

== DESCRIPTION ==
This rule targets CHS character 象  (xiang) incorrectly used in the word 像是. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "象")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "是")
  ]
</TARGET>
WHERE:
  NOT(
    *SubSRE(
      Before(TARGET1)
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "卦")
      ] :
      #END#))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "像").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

----------------------------
[Chunk Grammar Rule]
error_nonlexical_xiangyiyang
----------------------------
== GUID ==
199fb21b-2a72-4bdd-b2e3-026a11e6b18d

== DESCRIPTION ==
This rule targets CHS character 象 (xiang) incorrectly used in different phrases. 
The suggestion is to flag the character and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "象")
  ]
</TARGET1>
WHERE:
  OR(
    *SubSRE(
      After(Match)
    ,
      #START# :
      (
        [@Annotations:
            NOT(
              Tokenization.TokenName=
                *StartsWith(P_))
        ]
      )+ :
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "一样|那样")
      ])
  ,
    *SubSRE(
      After(Match)
    ,
      #START# :
      (
        [@Annotations:
            NOT(
              Tokenization.TokenName=
                *StartsWith(P_))
        ]
      )+ :
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "似")
      ] :
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "的")
      ]))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "像"))})}

---------------------------
[Chunk Grammar Rule]
error_nonlexical_xiangzheng
---------------------------
== GUID ==
bd76db03-baa6-4d54-a7c1-abe97bc9dd9f

== DESCRIPTION ==
This rule targets CHS character 像  (xiang) incorrectly used in different words. 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "像")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "征|形")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "象").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

--------------------------
[Chunk Grammar Rule]
error_nonlexical_xiaoxiang
--------------------------
== GUID ==
95322a76-768f-40b9-bb0c-6b757101ec85

== DESCRIPTION ==
This rule targets CHS character 象  (xiang) incorrectly used in the word 肖像 (xiaoxiang). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "肖象")
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "肖像"))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_xinpian
------------------------
== GUID ==
41d26d02-d1a0-458b-ace9-62cb5bba846b

== DESCRIPTION ==
This rule targets CHS character 名  (ming) incorrectly used in the word 明信片 (mingxinpian). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "名")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "信")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "片")
    ]
  </TARGET2>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "明信片"))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_xuanlv
-----------------------
== GUID ==
9924dfca-6050-4115-8e68-09ac791aed8e

== DESCRIPTION ==
This rule targets CHS character 弦 (xian) incorrectly used in the word 旋律(xuan lv ). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "弦")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "律")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "旋").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_xuanxie
------------------------
== GUID ==
543022eb-5b70-4247-91fd-d84bedad32be

== DESCRIPTION ==
This rule targets CHS character 渲 (xuan) incorrectly used in the word 宣泄(xuan xie). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "渲")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "泄")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "宣").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_yijing
-----------------------
== GUID ==
5e1fae23-64a7-4e6c-aa38-d53b31e3065d

== DESCRIPTION ==
This rule targets CHS character 已/巳  (yi/si) incorrectly used in the word 已经 (yi jing). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "己|巳")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "经")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "已").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_yinpin
-----------------------
== GUID ==
db8376dd-3fc4-47e3-9917-28dabdd9156a

== DESCRIPTION ==
This rule targets CHS character  膺  (ying) incorrectly used in the word 赝品 (yanpin). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "膺")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "品")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "赝").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_yuanfen
------------------------
== GUID ==
3a73fb52-eac0-41ef-a2a2-8399579be410

== DESCRIPTION ==
This rule targets CHS character 份  (fen) incorrectly used in the word 缘分 (yuanfen). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "缘份")
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "缘分"))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_zangkuan
-------------------------
== GUID ==
7aaf4709-a4a8-423f-9ee3-f0313ddf4c29

== DESCRIPTION ==
This rule targets CHS character 脏 (zang) incorrectly used in the word 赃款(zang kuan). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "脏")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "款")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "赃").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_zaodong
------------------------
== GUID ==
3993b9a1-67c1-4aca-a7f1-7f5d939e7e40

== DESCRIPTION ==
This rule targets CHS character 燥 (zao) incorrectly used in the word 躁动 (zao dong). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "燥")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "动")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "躁").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

----------------------
[Chunk Grammar Rule]
error_nonlexical_zaore
----------------------
== GUID ==
209f5552-2a2c-4865-acdd-dea56a1e9c5e

== DESCRIPTION ==
This rule targets CHS character 躁 (zao) incorrectly used in the word 燥热 (zao re). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "躁")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "热")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "燥").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-------------------------
[Chunk Grammar Rule]
error_nonlexical_zhanshui
-------------------------
== GUID ==
bc4711e6-1435-4a5f-8c21-cfa251731f68

== DESCRIPTION ==
This rule targets CHS character 醮  (jiao) incorrectly used in the word 蘸水 (zhan shui). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "醮")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "水")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "蘸").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

--------------------------
[Chunk Grammar Rule]
error_nonlexical_zhaoxiang
--------------------------
== GUID ==
9bf01e75-8cc2-4512-94ec-aed9f3e929d7

== DESCRIPTION ==
This rule targets CHS character 像  (xiang) incorrectly used in the word 照相 (zhaoxiang). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "照")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "像")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "相")))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_zhefan
-----------------------
== GUID ==
33ba580a-958e-4392-8def-0b8dd153ee8d

== DESCRIPTION ==
This rule targets CHS character 反  (fan) incorrectly used in the word  折返(zhe fan). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "折")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "反")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "返")))})}

----------------------
[Chunk Grammar Rule]
error_nonlexical_zhefu
----------------------
== GUID ==
25b54970-b7d7-4106-8c1b-b787fd4ea6a4

== DESCRIPTION ==
This rule targets CHS character 蜇 (zhe) incorrectly used in the word 蛰伏 (zhe fu). 
The suggestion is to flag the whole word and r6place it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "蜇")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "伏")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "蛰").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

------------------------
[Chunk Grammar Rule]
error_nonlexical_zhenhan
------------------------
== GUID ==
6e219cb8-1667-4be1-af91-7b1923f9f13a

== DESCRIPTION ==
This rule targets CHS character 憾  (han) incorrectly used in the word 震撼(zhenhan). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "震")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "憾")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "撼")))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_zhishi
-----------------------
== GUID ==
bd846e5f-2c27-4d2e-89b6-4fb56132e5f8

== DESCRIPTION ==
This rule targets CHS character 份  (fen) incorrectly used in the word 知识分子(zhishifenzi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "知识")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "份")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "子")
    ]
  </TARGET2>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "知识分子"))})}

----------------------------
[Chunk Grammar Rule]
error_nonlexical_zhishoukere
----------------------------
== GUID ==
7161683e-f071-4e7c-9494-b7c82638a887

== DESCRIPTION ==
This rule targets CHS character 灸 (jiu) incorrectly used in the word 炙手可热 (zhi shou ke re). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "灸")
  ]
</TARGET1> :
(
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "手")
    ]
  </TARGET> :
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "可")
    ]
  </TARGET2> :
  <TARGET3>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "热")
    ]
  </TARGET3>
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "炙手可热"))})}

---------------------
[Chunk Grammar Rule]
error_nonlexical_ziji
---------------------
== GUID ==
371019e6-dd06-48ed-b87f-181d211bdf63

== DESCRIPTION ==
This rule targets CHS character 已  (yi) incorrectly used in the word 自己 (zi ji). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "自")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "已")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Concat(
          Value(
            String
          ,
            "己")))})}

-----------------------
[Chunk Grammar Rule]
error_nonlexical_zuoluo
-----------------------
== GUID ==
691dd507-a2c9-49df-bc0c-e7ff0bc9ace8

== DESCRIPTION ==
This rule targets CHS character 座  (zuo) incorrectly used in the word 坐落 (zuoluo). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "座")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "落")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Non-lexical Error Confusable words")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "坐").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

--------------------
[Chunk Grammar Rule]
error_open_quote
--------------------
== GUID ==
f48fbb20-4922-48ff-9dd0-408ddc625b8e

== DESCRIPTION ==
This rule targets the opening quote in half-width and the word following it. The suggestion is to replace the half-width opening quote with corresponding full-width one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteOpening=
        True
  ]
</TARGET> :
<TARGET1>
  AND(
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            *StartsWith(P_))
    ]
  ,
    AND(
      [@Annotations:
          NOT(
            Chinese_SimplifiedSyntax.LatinString=
              True)
      ]
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              NOT(
                Normalization.Result=
                  NormalizedForm=
                    "→"))
      ]))
</TARGET1>
WHERE:
  AND(
    OR(
      NOT(
        *SubSRE(
          TARGET
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "“|‘")
          ]))
    ,
      NOT(
        *SubSRE(
          Before(TARGET)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "：|:")
          ])))
  ,
    NOT(
      *SubSRE(
        Before(TARGET)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [a-zA-Z])
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ^\($)
        ] :
        #END#))
  ,
    NOT(
      *SubSRE(
        Before(Match)
      ,
        [@Annotations:
            Chinese_SimplifiedSyntax.LatinString=
              True
        ] :
        #END#))
  ,
    NOT(
      *SubSRE(
        After(TARGET1)
      ,
        #START# :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ""|'|”|’")
        ]))
  ,
    OR(
      *SubSRE(
        Before(TARGET)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NOT(
                    NormalizedForm=
                      "F"))
        ] :
        #END#)
    ,
      *SubSRE(
        TARGET
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NOT(
                    NormalizedForm=
                      "'"))
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    If(
      Get(Target).
      Attr(Span.Text).
      Matches(
        ""|" ")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "“").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}))}
    ,
      If(
        Get(Target).
        Attr(Span.Text).
        Matches(
          "'")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "‘").
            Concat(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}))})))}

-----------------------
[Chunk Grammar Rule]
error_parenthesis_quote
-----------------------
== GUID ==
21aa9aaa-a19c-48ff-8a13-450152e67e9f

== DESCRIPTION ==
This rule targets a pair of quotes in half-width and tokens (not punctuation marks) between them with the block of a pair of parentheses. The suggestion is to replace the half-width quotes with corresponding full-width ones.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^\($)
  ]
</TARGET> :
<TARGET11>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              """)
  ]
</TARGET11> :
(
  <TARGET1>
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            *StartsWith(P_))
    ]
  </TARGET1>
)+ :
<TARGET22>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              """)
  ]
</TARGET22> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^\)$)
  ]
</TARGET2>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target11
,
  %{GetSingleCapture(
      Get(TARGET11))})
.
New(
  Target1
,
  Get(TARGET1))
.
New(
  Target22
,
  %{GetSingleCapture(
      Get(TARGET22))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
Assign(
  Get(Whiteboard).
  Attr(AnnotationScript.String)
,
  Value(
    String
  ,
    ""))
.
Enumerate(
TargetSpan
,
  Get(Target1).
  Attr(Capture.Matches)
,
  Modify(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Concat(
      Get(TargetSpan).
      Attr(Span.Text))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    Attr(Capture.Matches).
    Append(
      Get(Target11)).
    Append(
      Get(Target22)).
    Append(
      Get(Target2)).
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "（“").
        Concat(
          Get(Whiteboard).
          Attr(AnnotationScript.String)).
        Concat(
          Value(
            String
          ,
            "”）")))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

------------------------------------------
[Chunk Grammar Rule]
error_punctuation_consecutive_angle_quotes
------------------------------------------
== GUID ==
0bd43ba5-5f6f-4ed8-98d8-3a38d4103afb

== DESCRIPTION ==
This rule targets consecutive occurrences of closing guillemet (》 or >) and comma/dot/question mark/closing parenthesis/exclamation mark, when 1. either of  these two is half-width 
2. they occur at the end or iin the middle of a slice.
The suggestion is to replace them with full-width corresponding punctuation marks.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ">|》")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(!|\)|,|\.|\?|、|。|！|）|，|？)$)
  ]
</TARGET3>
WHERE:
  AND(
    OR(
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "》")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET3
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "，|。|？|！|、|）")
          ])))
  ,
    *SubSRE(
      TARGET1
    ,
      NOT(
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Chinese_SimplifiedSyntax.LatinString=
                  True)
        ]))
  ,
    *SubSRE(
      TARGET1
    ,
      NOT(
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "大|绿|公|母|打|走路|忘记|李四")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target3).
      Attr(Span.Text).
      Matches(
        [\，\,])
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "》，")))}
    ,
      If(
        Get(Target3).
        Attr(Span.Text).
        Matches(
          "。|.")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "》。")))}
      ,
        If(
          Get(Target3).
          Attr(Span.Text).
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "》！")))}
        ,
          If(
            Get(Target3).
            Attr(Span.Text).
            Matches(
              "？|?")
          ,
            %{SuggestLiteral(
                %{SpanTextWithoutFinalWS(
                    Get(Target1))}.
                Concat(
                  Value(
                    String
                  ,
                    "》？")))}
          ,
            If(
              Get(Target3).
              Attr(Span.Text).
              Matches(
                ^(\)|）)$)
            ,
              %{SuggestLiteral(
                  %{SpanTextWithoutFinalWS(
                      Get(Target1))}.
                  Concat(
                    Value(
                      String
                    ,
                      "》）")))}
            ,
              If(
                Get(Target3).
                Attr(Span.Text).
                Matches(
                  "、")
              ,
                %{SuggestLiteral(
                    %{SpanTextWithoutFinalWS(
                        Get(Target1))}.
                    Concat(
                      Value(
                        String
                      ,
                        "》、")))})))))))}

-------------------------------------------------
[Chunk Grammar Rule]
error_punctuation_consecutive_bracket_parenthesis
-------------------------------------------------
== GUID ==
462d9a1b-7bd4-4a0e-a138-f9726892a00e

== DESCRIPTION ==
This rule targets consecutive occurrences of closing guillemet and closing parenthesis, when 
1. either of these two is half-width 
2. they occur at the end or in the middle of a slice.
The suggestion is to replace them with  corresponding full-width punctuation marks.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^\]$)
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^\)$)
  ]
</TARGET3>
WHERE:
  *SubSRE(
    TARGET1
  ,
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            "NUMBER")
    ])

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "\]）")))})}

-----------------------------------------------
[Chunk Grammar Rule]
error_punctuation_consecutive_comma_parenthesis
-----------------------------------------------
== GUID ==
fc013ec7-61e8-441b-8234-31e71c78bcaf

== DESCRIPTION ==
This rule targets consecutive occurrences of comma and opening parenthesis/guillemet, when 
1. either of these two is half-width 
2. they occur at the end or in the middle of a slice.
The suggestion is to replace them with corresponding full-width punctuation marks.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ",|，")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(\(|<|《|（)$)
  ]
</TARGET3>
WHERE:
  OR(
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "，")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET3
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "（|《")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target3).
      Attr(Span.Text).
      Matches(
        "《|<")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "，《")))}
    ,
      If(
        Get(Target3).
        Attr(Span.Text).
        Matches(
          ^(\(|（)$)
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "，（")))})))}

-----------------------------------------------
[Chunk Grammar Rule]
error_punctuation_consecutive_enumeration_comma
-----------------------------------------------
== GUID ==
8a751ea7-4dc5-4f3b-b44b-5faa1e61ca63

== DESCRIPTION ==
This rule targets consecutive occurrences of enumeration comma  and opening parenthesis/guillemet, when 
1. either of these two is half-width
2. they occur  at the end or in the middle of a slice.
The suggestion is to replace them with  corresponding full-width punctuation marks.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "、")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(\(|<|《|（)$)
  ]
</TARGET3>
WHERE:
  OR(
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "、")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET3
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "（|《")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target3).
      Attr(Span.Text).
      Matches(
        "《|<")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "、《")))}
    ,
      If(
        Get(Target3).
        Attr(Span.Text).
        Matches(
          ^(\(|（)$)
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "、（")))})))}

-----------------------------------------
[Chunk Grammar Rule]
error_punctuation_consecutive_parenthesis
-----------------------------------------
== GUID ==
968cc99e-8ac4-4b4b-8ffc-bff699a32dbe

== DESCRIPTION ==
This rule targets consecutive occurrences of closing parenthesis and comma/dot/question mark/exclamation mark, when 
1. either of these two is half-width
2. they occur at the end or in the middle of a slice.
The suggestion is to replace them with  corresponding full-width punctuation marks.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(\)|）)$)
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ",|.|?|!|？|！|，|。")
  ]
</TARGET3>
WHERE:
  AND(
    OR(
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "）")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET3
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "，|。|？|！")
          ])))
  ,
    *SubSRE(
      TARGET1
    ,
      NOT(
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [A-Z])
        ]))
  ,
    OR(
      *SubSRE(
        TARGET1
      ,
        NOT(
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "长|宽|高")
          ]))
    ,
      *SubSRE(
        Before(TARGET1)
      ,
        NOT(
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      ^\|$)
          ])))
  ,
    *SubSRE(
      TARGET1
    ,
      NOT(
        [@Annotations:
            Chinese_SimplifiedSyntax.LatinString=
              True
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target3).
      Attr(Span.Text).
      Matches(
        [\，\,])
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "），")))}
    ,
      If(
        Get(Target3).
        Attr(Span.Text).
        Matches(
          "。|.")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "）。")))}
      ,
        If(
          Get(Target3).
          Attr(Span.Text).
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "）！")))}
        ,
          If(
            Get(Target3).
            Attr(Span.Text).
            Matches(
              "？|?")
          ,
            %{SuggestLiteral(
                %{SpanTextWithoutFinalWS(
                    Get(Target1))}.
                Concat(
                  Value(
                    String
                  ,
                    "）？")))})))))}

-------------------------------------------
[Chunk Grammar Rule]
error_punctuation_consecutive_percent_comma
-------------------------------------------
== GUID ==
7ed7c0dd-3451-409c-822e-c44e9a0f0ca1

== DESCRIPTION ==
This rule targets consecutive occurrences of percent mark and exclamation mark/comma/dot/question mark/closing guillemet/closing parenthesis, when
1. either of these two is half-width
2. they occur at the end or in the middle of a slice.
The suggestion is to replace them with corresponding full-width punctuation marks.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "%")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(!|\)|,|\.|>|\?|。|》|！|）|，|？)$)
  ]
</TARGET3>
WHERE:
  OR(
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "%")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET3
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "，|。|？|！|》|）")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target3).
      Attr(Span.Text).
      Matches(
        [\，\,])
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "%，")))}
    ,
      If(
        Get(Target3).
        Attr(Span.Text).
        Matches(
          "。|.")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "%。")))}
      ,
        If(
          Get(Target3).
          Attr(Span.Text).
          Matches(
            "!|！")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "%！")))}
        ,
          If(
            Get(Target3).
            Attr(Span.Text).
            Matches(
              "？|?")
          ,
            %{SuggestLiteral(
                %{SpanTextWithoutFinalWS(
                    Get(Target1))}.
                Concat(
                  Value(
                    String
                  ,
                    "%？")))}
          ,
            If(
              Get(Target3).
              Attr(Span.Text).
              Matches(
                "》|>")
            ,
              %{SuggestLiteral(
                  %{SpanTextWithoutFinalWS(
                      Get(Target1))}.
                  Concat(
                    Value(
                      String
                    ,
                      "%》")))}
            ,
              If(
                Get(Target3).
                Attr(Span.Text).
                Matches(
                  ^(\)|）)$)
              ,
                %{SuggestLiteral(
                    %{SpanTextWithoutFinalWS(
                        Get(Target1))}.
                    Concat(
                      Value(
                        String
                      ,
                        "%）")))})))))))}

--------------------------------------------------
[Chunk Grammar Rule]
error_punctuation_consecutive_question_parenthesis
--------------------------------------------------
== GUID ==
341845eb-3ed2-4c33-bcdf-d39d875c46b3

== DESCRIPTION ==
This rule targets consecutive occurrences of dot/question mark/exclamation mark and closing parenthesis, when 
1. either of these two is half-width
2. they occur at the end or in the middle of a slice.
The suggestion is to replace them with corresponding full-width punctuation marks.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ".|?|!|。|？|！")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(\)|）)$)
  ]
</TARGET3>
WHERE:
  OR(
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "。|？|！")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET3
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "）")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target2).
      Attr(Span.Text).
      Matches(
        "！|!")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "！）")))}
    ,
      If(
        Get(Target2).
        Attr(Span.Text).
        Matches(
          "。|.")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "。）")))}
      ,
        If(
          Get(Target2).
          Attr(Span.Text).
          Matches(
            "？|?")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}.
              Concat(
                Value(
                  String
                ,
                  "？）")))}))))}

----------------------------
[Chunk Grammar Rule]
error_punctuation_ellipsis_1
----------------------------
== GUID ==
013a8555-e09a-495d-b179-5344bf0ff4a1

== DESCRIPTION ==
This rule targets a sequence of dot  (more than three) mixed in half- or full- width when they are used at the end of a slice. The suggestion is to replace them with six dots in half-width as ellipsis.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_|ELLI))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "...|。。。")
  ]
</TARGET2>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  Get(TARGET2))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2).
      Attr(Capture.Matches))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "……")))})}

----------------------------
[Chunk Grammar Rule]
error_punctuation_ellipsis_2
----------------------------
== GUID ==
5199ffd9-265e-4b31-9ff4-22310e446dee

== DESCRIPTION ==
This rule targets a sequence of dot  (more than three) mixed in half- or full- width when they are used at the end of a slice. The suggestion is to replace them with six dots in half-width as ellipsis.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_|ELLI))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "...|。。。")
  ]
</TARGET2> :
(
  <TARGET3>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "...|。。。")
    ]
  </TARGET3>
  |
  (
    <TARGET3>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  ".|。")
      ]
    </TARGET3>
  ){1,2}
)

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  Get(TARGET2))
.
New(
  Target3
,
  Get(TARGET3))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2).
      Attr(Capture.Matches)).
    Append(
      Get(Target3).
      Attr(Capture.Matches))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "……")))})}

-----------------------------------
[Chunk Grammar Rule]
error_punctuation_parenthesis_close
-----------------------------------
== GUID ==
5fba65ff-99ff-4f6a-91fc-ac3dcd4d8da0

== DESCRIPTION ==
This rule targets half-width closing parenthesis/guillemet, when it is used at the end or in the middle of a slice. The suggestion is to replace the half-width mark with corresponding full-width one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_|ELL))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(\)|>)$)
  ]
</TARGET2>
WHERE:
  AND(
    NOT(
      *SubSRE(
        Before(TARGET2)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ">")
        ]))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Tokenization.TokenName=
                "NUMBER"
          ]))
    ,
      NOT(
        *SubSRE(
          After(TARGET2)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      ">")
          ] :
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      [0-9]{1,6})
          ])))
  ,
    NOT(
      *SubSRE(
        After(TARGET2)
      ,
        #START# :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ">")
        ]))
  ,
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ^\($)
        ] :
        #END#))
  ,
    NOT(
      *SubSRE(
        After(TARGET2)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [1,2,3,4,5,6,7,8,9]ml)
        ]))
  ,
    NOT(
      *SubSRE(
        Before(Match)
      ,
        #START# :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "VALUES|s|Left")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Chinese_SimplifiedSyntax.LatinString=
              True
        ]))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "长|宽|高")
          ]))
    ,
      NOT(
        *SubSRE(
          Before(TARGET1)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      ^\|$)
          ] :
          #END#)))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "大|绿|公|母|打|走路|忘记|李四")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target2).
      Attr(Span.Text).
      Matches(
        ^(\)(\ )?)$)
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "）")))}
    ,
      If(
        Get(Target2).
        Attr(Span.Text).
        Matches(
          ">")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "》")))})))}

----------------------------------
[Chunk Grammar Rule]
error_punctuation_parenthesis_full
----------------------------------
== GUID ==
f6e8387c-d266-4430-bd41-b554dbcc47f3

== DESCRIPTION ==
This rule targets a pair of parentheses in half-width and tokens (not punctuation marks) between them, when they appear in the middle or at the end of a slice. The suggestion is to replace the half-width parenthesis with corresponding full-width ones.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^\($)
  ]
</TARGET> :
(
  <TARGET1>
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            *StartsWith(P_))
    ]
  </TARGET1>
)+ :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^\)$)
  ]
</TARGET2>
WHERE:
  AND(
    *SubSRE(
      Before(Match)
    ,
      NOT(
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "P")
        ]) :
      #END#)
  ,
    NOT(
      *SubSRE(
        Match
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ^\|$)
        ]))
  ,
    NOT(
      *SubSRE(
        Match
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ^\($)
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ^\＼$)
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "html")
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ^\)$)
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  Get(TARGET1))
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
Assign(
  Get(Whiteboard).
  Attr(AnnotationScript.String)
,
  Value(
    String
  ,
    ""))
.
Enumerate(
TargetSpan
,
  Get(Target1).
  Attr(Capture.Matches)
,
  Modify(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Concat(
      Get(TargetSpan).
      Attr(Span.Text))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    Attr(Capture.Matches).
    Append(
      Get(Target2)).
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "（").
        Concat(
          Get(Whiteboard).
          Attr(AnnotationScript.String)).
        Concat(
          Value(
            String
          ,
            "）")))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

----------------------------------
[Chunk Grammar Rule]
error_punctuation_parenthesis_open
----------------------------------
== GUID ==
012ef5ff-9453-4caf-ac25-c477bd0951c2

== DESCRIPTION ==
This rule targets half-width opening parenthesis/guillemet, when it is used at the beginning or in the middle of a slice. The suggestion is to replace the half-width mark with corresponding full-width one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(\(|<)$)
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Tokenization.TokenName?=
        NOT(
          *StartsWith(P_))
  ]
</TARGET2>
WHERE:
  AND(
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [0-9]{1,8})
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "＼|\")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [0-9]{1,8})
        ]))
  ,
    NOT(
      *SubSRE(
        After(TARGET2)
      ,
        #START# :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ^\)$)
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Chinese_SimplifiedSyntax.LatinString=
              True
        ]))
  ,
    NOT(
      *SubSRE(
        Before(TARGET1)
      ,
        [@Annotations:
            Chinese_SimplifiedSyntax.LatinString=
              True
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target1).
      Attr(Span.Text).
      Matches(
        ^\($)
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "（").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target2))}))}
    ,
      If(
        Get(Target1).
        Attr(Span.Text).
        Matches(
          "<")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "《").
            Concat(
              %{SpanTextWithoutFinalWS(
                  Get(Target2))}))})))}

--------------------------------------
[Chunk Grammar Rule]
error_punctuation_question_exclamation
--------------------------------------
== GUID ==
1076cd1b-8bff-45be-af77-cf54d05873c2

== DESCRIPTION ==
This rule targets a sequence of question or exclamation marks  (more than one) mixed in half- or full- width when they are used at the end of a slice and the token before them is not latin string. The suggestion is to replace them with one single question or exclamation mark in full-width.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "?")
  ]
</TARGET2> :
(
  <TARGET3>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "!|！")
    ]
  </TARGET3>
)+

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target3
,
  Get(TARGET3))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target3).
      Attr(Capture.Matches))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "？!")))})}

----------------------------
[Chunk Grammar Rule]
error_punctuation_repetition
----------------------------
== GUID ==
7682e8e2-addb-4711-9f1c-fc0607b86abc

== DESCRIPTION ==
This rule targets a sequence of question or exclamation marks  (more than one) mixed in half- or full- width when they are used at the end of a slice and the token before them is not latin string. The suggestion is to replace them with one single question or exclamation mark in full-width.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
(
  (
    <TARGET2>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "？|?")
      ]
    </TARGET2>
  ){2,}
  |
  (
    <TARGET2>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "！|!")
      ]
    </TARGET2>
  ){2,}
)
WHERE:
  NOT(
    *SubSRE(
      TARGET1
    ,
      [@Annotations:
          Chinese_SimplifiedSyntax.LatinString=
            True
      ]))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  Get(TARGET2))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2).
      Attr(Capture.Matches))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    If(
      Get(Target2).
      Attr(Capture.Matches).
      LastItem().
      Attr(Span.Text).
      Matches(
        "？|?")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "？")))}
    ,
      If(
        Get(Target2).
        Attr(Capture.Matches).
        LastItem().
        Attr(Span.Text).
        Matches(
          "！|!")
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}.
            Concat(
              Value(
                String
              ,
                "！")))})))}

------------------------
[Chunk Grammar Rule]
error_punctuation_single
------------------------
== GUID ==
31527f58-f9f9-4c3e-9043-b11e1dc388b5

== DESCRIPTION ==
This rule targets a single half-width comma/dot/semi-colon/colon/question mark/exclamation mark, when it is used at the end or in the middle of a slice. The suggestion is to replace the half-width punctuation mark with the corresponding full-width one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_|ELL))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "!|,|.|:|;|?")
  ]
</TARGET2>
WHERE:
  AND(
    OR(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Tokenization.TokenName?=
              NOT(
                "NUMBER")
        ])
    ,
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "第一")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Chinese_SimplifiedSyntax.LatinString=
              True
        ]))
  ,
    NOT(
      *SubSRE(
        After(TARGET2)
      ,
        #START# :
        (
          [@Annotations:
              Chinese_SimplifiedSyntax.LatinString=
                True
          ]
          |
          (
            [@Annotations:
                Syntax.Analyses=
                  *Contains(
                    Normalization.Result=
                      NormalizedForm=
                        ".|?|!|！|？")
            ]
          ){2,}
          |
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "。")
          ]
          |
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "“|‘|"|'")
          ]
        )))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Tokenization.TokenName=
                "NUMBER"
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      ".")
          ]))))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Punctuation Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        If(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}.
          Matches(
            ".")
        ,
          Concat(
            Value(
              String
            ,
              "。"))
        ,
          If(
            %{SpanTextWithoutFinalWS(
                Get(Target2))}.
            Matches(
              \,)
          ,
            Concat(
              Value(
                String
              ,
                "，"))
          ,
            If(
              %{SpanTextWithoutFinalWS(
                  Get(Target2))}.
              Matches(
                "!")
            ,
              Concat(
                Value(
                  String
                ,
                  "！"))
            ,
              If(
                %{SpanTextWithoutFinalWS(
                    Get(Target2))}.
                Matches(
                  "?")
              ,
                Concat(
                  Value(
                    String
                  ,
                    "？"))
              ,
                If(
                  %{SpanTextWithoutFinalWS(
                      Get(Target2))}.
                  Matches(
                    ":")
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "："))
                ,
                  If(
                    Get(Target2).
                    Attr(Span.Text).
                    Matches(
                      ";")
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "；")))))))))})}

---------------------
[Chunk Grammar Rule]
error_reduplication_a
---------------------
== GUID ==
924225c2-2f42-4476-b786-322467a0f612

== DESCRIPTION ==
This rule targets a sequence of Chinese"啊"  (more than one) when they are used at the end of a slice. The suggestion is to replace them with one single "啊".

== PATTERN ==
(
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "啊")
    ]
  </TARGET2>
){2,}
WHERE:
  AND(
    NOT(
      *AnnotationQuery(
        Get(TARGET2).
        Attr(Capture.Matches).
        Item(
          Value(
            Integer
          ,
            0)).
        Matches(
          Chinese_SimplifiedSyntax.BOS=
            True)))
  ,
    NOT(
      *SubSRE(
        Before(Match)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "啊|"|“")
        ] :
        #END#)))

== ACTION ==
New(
  Target2
,
  Get(TARGET2))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target2).
    Attr(Capture.Matches)
  ,
    Value(
      String
    ,
      "Reduplication Error")
  ,
    If(
      Get(Target2).
      Attr(Capture.Matches).
      LastItem().
      Attr(Span.Text).
      Matches(
        "啊")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "啊"))}))}

----------------------
[Chunk Grammar Rule]
error_reduplication_de
----------------------
== GUID ==
84c52cbc-c009-4f27-ae3e-0bbcad68460b

== DESCRIPTION ==
This rule targets a sequence of Chinese"的"  (more than one) existing in a slice. The suggestion is to replace them with one single "的".

== PATTERN ==
(
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "的")
    ]
  </TARGET2>
){2,}

== ACTION ==
New(
  Target2
,
  Get(TARGET2))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target2).
    Attr(Capture.Matches)
  ,
    Value(
      String
    ,
      "Reduplication Error")
  ,
    If(
      Get(Target2).
      Attr(Capture.Matches).
      LastItem().
      Attr(Span.Text).
      Matches(
        "的")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "的"))}))}

-----------------------
[Chunk Grammar Rule]
error_reduplication_zai
-----------------------
== GUID ==
34746a49-78b1-46de-88eb-e4e1bfd327d2

== DESCRIPTION ==
This rule targets a sequence of Chinese"在"  (more than one) existing in a slice. The suggestion is to replace them with one single "在".

== PATTERN ==
(
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "在")
    ]
  </TARGET2>
){2,}
WHERE:
  AND(
    NOT(
      *SubSRE(
        Before(Match)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "老")
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "神")
        ]))
  ,
    NOT(
      *SubSRE(
        Before(Match)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "雅")
        ])))

== ACTION ==
New(
  Target2
,
  Get(TARGET2))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target2).
    Attr(Capture.Matches)
  ,
    Value(
      String
    ,
      "Reduplication Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "在"))})}

--------------------
[Chunk Grammar Rule]
error_roman_letters
--------------------
== GUID ==
671a5307-afb3-45eb-a1cf-ac8bd4940301

== DESCRIPTION ==
This rule targets full-width roman letters, when they are used in Chinese texts. The suggestion is to replace them with the corresponding half-width one, e.g., ＯＱＲ -> OQR.

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "WORD"
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      TARGET
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  *Contains(Ａ|Ｂ|Ｃ|Ｄ|Ｅ|Ｆ|Ｇ|Ｈ|Ｉ|Ｊ|Ｋ|Ｌ|Ｍ|Ｎ|Ｏ|Ｐ|Ｑ|Ｒ|Ｓ|Ｔ|Ｕ|Ｖ|Ｗ|Ｘ|Ｙ|Ｚ|ａ|ｂ|ｃ|ｄ|ｅ|ｆ|ｇ|ｈ|ｉ|ｊ|ｋ|ｌ|ｍ|ｎ|ｏ|ｐ|ｑ|ｒ|ｓ|ｔ|ｕ|ｖ|ｗ|ｘ|ｙ|ｚ))
      ])
  ,
    *SubSRE(
      TARGET
    ,
      [@Annotations:
          Syntax.Analyses=
            NOT(
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "ＯＯ"))
      ])
  ,
    NOT(
      AND(
        *SubSRE(
          Before(TARGET)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "至|一|二|三|四|五|六|七|八|九")
          ])
      ,
        *SubSRE(
          After(TARGET)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "一|二|三|四|五|六|七|八|九")
          ])))
  ,
    NOT(
      *SubSRE(
        Before(TARGET)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "至|一|二|三|四|五|六|七|八|九")
        ] :
        #END#)))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "Ａ")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "A")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "Ｂ")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "B")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "Ｃ")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "C")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "Ｄ")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "D")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "Ｅ")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "E")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "Ｆ")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "F")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "Ｇ")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "G")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "Ｈ")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "H")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "Ｉ")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "I")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "Ｊ")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "J")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "Ｋ")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "K")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "Ｌ")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "L")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "Ｍ")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "M")))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "Ｎ")
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "N")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "Ｏ")
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Concat(
                                      Value(
                                        String
                                      ,
                                        "O")))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "Ｐ")
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "P")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "Ｑ")
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Concat(
                                          Value(
                                            String
                                          ,
                                            "Q")))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "Ｒ")
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "R")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "Ｓ")
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Concat(
                                              Value(
                                                String
                                              ,
                                                "S")))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "Ｔ")
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "T")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "Ｕ")
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Concat(
                                                  Value(
                                                    String
                                                  ,
                                                    "U")))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "Ｖ")
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "V")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "Ｗ")
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Concat(
                                                      Value(
                                                        String
                                                      ,
                                                        "W")))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "Ｘ")
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "X")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "Ｚ")
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Concat(
                                                          Value(
                                                            String
                                                          ,
                                                            "Z")))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "Ｙ")
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "Y")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "ａ")
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Concat(
                                                              Value(
                                                                String
                                                              ,
                                                                "a")))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "ｂ")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "b")))
                                                          ,
                                                            If(
                                                              Get(Char).
                                                              Attr(AnnotationScript.String).
                                                              Matches(
                                                                "ｃ")
                                                            ,
                                                              Modify(
                                                                Get(Whiteboard).
                                                                Attr(AnnotationScript.String)
                                                              ,
                                                                Concat(
                                                                  Value(
                                                                    String
                                                                  ,
                                                                    "c")))
                                                            ,
                                                              If(
                                                                Get(Char).
                                                                Attr(AnnotationScript.String).
                                                                Matches(
                                                                  "ｄ")
                                                              ,
                                                                Modify(
                                                                  Get(Whiteboard).
                                                                  Attr(AnnotationScript.String)
                                                                ,
                                                                  Concat(
                                                                    Value(
                                                                      String
                                                                    ,
                                                                      "d")))
                                                              ,
                                                                If(
                                                                  Get(Char).
                                                                  Attr(AnnotationScript.String).
                                                                  Matches(
                                                                    "ｅ")
                                                                ,
                                                                  Modify(
                                                                    Get(Whiteboard).
                                                                    Attr(AnnotationScript.String)
                                                                  ,
                                                                    Concat(
                                                                      Value(
                                                                        String
                                                                      ,
                                                                        "e")))
                                                                ,
                                                                  If(
                                                                    Get(Char).
                                                                    Attr(AnnotationScript.String).
                                                                    Matches(
                                                                      "ｆ")
                                                                  ,
                                                                    Modify(
                                                                      Get(Whiteboard).
                                                                      Attr(AnnotationScript.String)
                                                                    ,
                                                                      Concat(
                                                                        Value(
                                                                          String
                                                                        ,
                                                                          "f")))
                                                                  ,
                                                                    If(
                                                                      Get(Char).
                                                                      Attr(AnnotationScript.String).
                                                                      Matches(
                                                                        "ｇ")
                                                                    ,
                                                                      Modify(
                                                                        Get(Whiteboard).
                                                                        Attr(AnnotationScript.String)
                                                                      ,
                                                                        Concat(
                                                                          Value(
                                                                            String
                                                                          ,
                                                                            "g")))
                                                                    ,
                                                                      If(
                                                                        Get(Char).
                                                                        Attr(AnnotationScript.String).
                                                                        Matches(
                                                                          "ｈ")
                                                                      ,
                                                                        Modify(
                                                                          Get(Whiteboard).
                                                                          Attr(AnnotationScript.String)
                                                                        ,
                                                                          Concat(
                                                                            Value(
                                                                              String
                                                                            ,
                                                                              "h")))
                                                                      ,
                                                                        If(
                                                                          Get(Char).
                                                                          Attr(AnnotationScript.String).
                                                                          Matches(
                                                                            "ｉ")
                                                                        ,
                                                                          Modify(
                                                                            Get(Whiteboard).
                                                                            Attr(AnnotationScript.String)
                                                                          ,
                                                                            Concat(
                                                                              Value(
                                                                                String
                                                                              ,
                                                                                "i")))
                                                                        ,
                                                                          If(
                                                                            Get(Char).
                                                                            Attr(AnnotationScript.String).
                                                                            Matches(
                                                                              "ｊ")
                                                                          ,
                                                                            Modify(
                                                                              Get(Whiteboard).
                                                                              Attr(AnnotationScript.String)
                                                                            ,
                                                                              Concat(
                                                                                Value(
                                                                                  String
                                                                                ,
                                                                                  "j")))
                                                                          ,
                                                                            If(
                                                                              Get(Char).
                                                                              Attr(AnnotationScript.String).
                                                                              Matches(
                                                                                "ｋ")
                                                                            ,
                                                                              Modify(
                                                                                Get(Whiteboard).
                                                                                Attr(AnnotationScript.String)
                                                                              ,
                                                                                Concat(
                                                                                  Value(
                                                                                    String
                                                                                  ,
                                                                                    "k")))
                                                                            ,
                                                                              If(
                                                                                Get(Char).
                                                                                Attr(AnnotationScript.String).
                                                                                Matches(
                                                                                  "ｌ")
                                                                              ,
                                                                                Modify(
                                                                                  Get(Whiteboard).
                                                                                  Attr(AnnotationScript.String)
                                                                                ,
                                                                                  Concat(
                                                                                    Value(
                                                                                      String
                                                                                    ,
                                                                                      "l")))
                                                                              ,
                                                                                If(
                                                                                  Get(Char).
                                                                                  Attr(AnnotationScript.String).
                                                                                  Matches(
                                                                                    "ｍ")
                                                                                ,
                                                                                  Modify(
                                                                                    Get(Whiteboard).
                                                                                    Attr(AnnotationScript.String)
                                                                                  ,
                                                                                    Concat(
                                                                                      Value(
                                                                                        String
                                                                                      ,
                                                                                        "m")))
                                                                                ,
                                                                                  If(
                                                                                    Get(Char).
                                                                                    Attr(AnnotationScript.String).
                                                                                    Matches(
                                                                                      "ｎ")
                                                                                  ,
                                                                                    Modify(
                                                                                      Get(Whiteboard).
                                                                                      Attr(AnnotationScript.String)
                                                                                    ,
                                                                                      Concat(
                                                                                        Value(
                                                                                          String
                                                                                        ,
                                                                                          "n")))
                                                                                  ,
                                                                                    If(
                                                                                      Get(Char).
                                                                                      Attr(AnnotationScript.String).
                                                                                      Matches(
                                                                                        "ｏ")
                                                                                    ,
                                                                                      Modify(
                                                                                        Get(Whiteboard).
                                                                                        Attr(AnnotationScript.String)
                                                                                      ,
                                                                                        Concat(
                                                                                          Value(
                                                                                            String
                                                                                          ,
                                                                                            "o")))
                                                                                    ,
                                                                                      If(
                                                                                        Get(Char).
                                                                                        Attr(AnnotationScript.String).
                                                                                        Matches(
                                                                                          "ｐ")
                                                                                      ,
                                                                                        Modify(
                                                                                          Get(Whiteboard).
                                                                                          Attr(AnnotationScript.String)
                                                                                        ,
                                                                                          Concat(
                                                                                            Value(
                                                                                              String
                                                                                            ,
                                                                                              "p")))
                                                                                      ,
                                                                                        If(
                                                                                          Get(Char).
                                                                                          Attr(AnnotationScript.String).
                                                                                          Matches(
                                                                                            "ｑ")
                                                                                        ,
                                                                                          Modify(
                                                                                            Get(Whiteboard).
                                                                                            Attr(AnnotationScript.String)
                                                                                          ,
                                                                                            Concat(
                                                                                              Value(
                                                                                                String
                                                                                              ,
                                                                                                "q")))
                                                                                        ,
                                                                                          If(
                                                                                            Get(Char).
                                                                                            Attr(AnnotationScript.String).
                                                                                            Matches(
                                                                                              "ｒ")
                                                                                          ,
                                                                                            Modify(
                                                                                              Get(Whiteboard).
                                                                                              Attr(AnnotationScript.String)
                                                                                            ,
                                                                                              Concat(
                                                                                                Value(
                                                                                                  String
                                                                                                ,
                                                                                                  "r")))
                                                                                          ,
                                                                                            If(
                                                                                              Get(Char).
                                                                                              Attr(AnnotationScript.String).
                                                                                              Matches(
                                                                                                "ｓ")
                                                                                            ,
                                                                                              Modify(
                                                                                                Get(Whiteboard).
                                                                                                Attr(AnnotationScript.String)
                                                                                              ,
                                                                                                Concat(
                                                                                                  Value(
                                                                                                    String
                                                                                                  ,
                                                                                                    "s")))
                                                                                            ,
                                                                                              If(
                                                                                                Get(Char).
                                                                                                Attr(AnnotationScript.String).
                                                                                                Matches(
                                                                                                  "ｔ")
                                                                                              ,
                                                                                                Modify(
                                                                                                  Get(Whiteboard).
                                                                                                  Attr(AnnotationScript.String)
                                                                                                ,
                                                                                                  Concat(
                                                                                                    Value(
                                                                                                      String
                                                                                                    ,
                                                                                                      "t")))
                                                                                              ,
                                                                                                If(
                                                                                                  Get(Char).
                                                                                                  Attr(AnnotationScript.String).
                                                                                                  Matches(
                                                                                                    "ｕ")
                                                                                                ,
                                                                                                  Modify(
                                                                                                    Get(Whiteboard).
                                                                                                    Attr(AnnotationScript.String)
                                                                                                  ,
                                                                                                    Concat(
                                                                                                      Value(
                                                                                                        String
                                                                                                      ,
                                                                                                        "u")))
                                                                                                ,
                                                                                                  If(
                                                                                                    Get(Char).
                                                                                                    Attr(AnnotationScript.String).
                                                                                                    Matches(
                                                                                                      "ｖ")
                                                                                                  ,
                                                                                                    Modify(
                                                                                                      Get(Whiteboard).
                                                                                                      Attr(AnnotationScript.String)
                                                                                                    ,
                                                                                                      Concat(
                                                                                                        Value(
                                                                                                          String
                                                                                                        ,
                                                                                                          "v")))
                                                                                                  ,
                                                                                                    If(
                                                                                                      Get(Char).
                                                                                                      Attr(AnnotationScript.String).
                                                                                                      Matches(
                                                                                                        "ｗ")
                                                                                                    ,
                                                                                                      Modify(
                                                                                                        Get(Whiteboard).
                                                                                                        Attr(AnnotationScript.String)
                                                                                                      ,
                                                                                                        Concat(
                                                                                                          Value(
                                                                                                            String
                                                                                                          ,
                                                                                                            "w")))
                                                                                                    ,
                                                                                                      If(
                                                                                                        Get(Char).
                                                                                                        Attr(AnnotationScript.String).
                                                                                                        Matches(
                                                                                                          "ｘ")
                                                                                                      ,
                                                                                                        Modify(
                                                                                                          Get(Whiteboard).
                                                                                                          Attr(AnnotationScript.String)
                                                                                                        ,
                                                                                                          Concat(
                                                                                                            Value(
                                                                                                              String
                                                                                                            ,
                                                                                                              "x")))
                                                                                                      ,
                                                                                                        If(
                                                                                                          Get(Char).
                                                                                                          Attr(AnnotationScript.String).
                                                                                                          Matches(
                                                                                                            "ｙ")
                                                                                                        ,
                                                                                                          Modify(
                                                                                                            Get(Whiteboard).
                                                                                                            Attr(AnnotationScript.String)
                                                                                                          ,
                                                                                                            Concat(
                                                                                                              Value(
                                                                                                                String
                                                                                                              ,
                                                                                                                "y")))
                                                                                                        ,
                                                                                                          If(
                                                                                                            Get(Char).
                                                                                                            Attr(AnnotationScript.String).
                                                                                                            Matches(
                                                                                                              "ｚ")
                                                                                                          ,
                                                                                                            Modify(
                                                                                                              Get(Whiteboard).
                                                                                                              Attr(AnnotationScript.String)
                                                                                                            ,
                                                                                                              Concat(
                                                                                                                Value(
                                                                                                                  String
                                                                                                                ,
                                                                                                                  "z")))
                                                                                                          ,
                                                                                                            Modify(
                                                                                                              Get(Whiteboard).
                                                                                                              Attr(AnnotationScript.String)
                                                                                                            ,
                                                                                                              Concat(
                                                                                                                Get(Char).
                                                                                                                Attr(AnnotationScript.String)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Roman Letter Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

------------------------
[Chunk Grammar Rule]
error_single_token_quote
------------------------
== GUID ==
b8a7e47d-8857-45da-937a-f19c9b5df739

== DESCRIPTION ==
This rule targets a pair of quotes in half-width and one word (not punctuation marks) between them. The suggestion is to replace the half-width quotes with corresponding full-width ones.

== PATTERN ==
<TARGET>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteOpening=
        True
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Tokenization.TokenName=
        NOT(
          *StartsWith(P_))
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Chinese_SimplifiedSyntax.QuoteClosing=
        True
  ]
</TARGET2>
WHERE:
  AND(
    NOT(
      *SubSRE(
        Before(TARGET)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    [a-zA-Z])
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    ^\($)
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Chinese_SimplifiedSyntax.LatinString=
              True
        ]))
  ,
    NOT(
      *SubSRE(
        Before(Match)
      ,
        #START# :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "VALUES|SetCourse")
        ]))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "“")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "”")
          ])))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "‘")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "’")
          ]))))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Quote Error")
  ,
    If(
      %{SpanTextWithoutFinalWS(
          Get(Target))}.
      Matches(
        "“|"")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "“").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target1))}).
          Concat(
            Value(
              String
            ,
              "”")))}
    ,
      If(
        %{SpanTextWithoutFinalWS(
            Get(Target))}.
        Matches(
          "'|‘")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "‘").
            Concat(
              %{SpanTextWithoutFinalWS(
                  Get(Target1))}).
            Concat(
              Value(
                String
              ,
                "’")))})))}

--------------------------
[Chunk Grammar Rule]
error_structure_de_adj_adv
--------------------------
== GUID ==
49194ab0-0ea8-458c-9aca-232795ff4536

== DESCRIPTION ==
This rule targets the incorrectly usage of  Chinese particles 地的 between adjectives and adverbs.  
The suggestion is to flag the whole phrase and replace the particle with correct one 得。

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        OR(
          *Contains(
            Morphology.POS=
              "Adj")
        ,
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "快|渣|厉害|滑头|彪悍|强"))
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "地|的")
  ]
</TARGET> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "很|有点|很快|最|更|更加|非常|特别|相当|这么|如此|没")
  ]
</TARGET2>
WHERE:
  AND(
    NOT(
      *SubSRE(
        After(TARGET2)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "为")
        ]))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "简单|难得")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "这么")
          ])))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "真|男|女|类|合格|胖胖")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        #START# :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "花花绿绿")
        ]))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "的")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "最|更|没")
          ])))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "过")
          ]))
    ,
      NOT(
        *SubSRE(
          Before(TARGET1)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "装修")
          ])))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "特别")
          ]))
    ,
      NOT(
        *SubSRE(
          After(TARGET2)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "规定")
          ])))
  ,
    NOT(
      *SubSRE(
        Before(Match)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "对")
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "画质")
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "要求")
        ])))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Structural Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "得")).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}))})}

---------------------------
[Chunk Grammar Rule]
error_structure_de_adv_verb
---------------------------
== GUID ==
adc84d6b-e4b4-4f17-b591-71b23b893a7d

== DESCRIPTION ==
This rule targets the incorrectly usage of Chinese particles 的 between adjectives and verbs.  
The suggestion is to flag the whole phrase and replace the particle with correct one 地。

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          OR(
            Morphology.POS=
              "Adj"
          ,
            Normalization.Result=
              NormalizedForm=
                "无耻|愣愣|得意|自觉|得意洋洋|情不自禁|呜呜|默默|伤心|悲伤|难过|迟缓|费力|故意|重|平静|小心翼翼|认真|急切|胆战心惊|投入|开心"))
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "的")
  ]
</TARGET> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "说|看|想")
  ]
</TARGET2>
WHERE:
  AND(
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "帅|所谓|特色|不|没|偶|数|拿|下|男|女|菜")
        ]))
  ,
    NOT(
      *SubSRE(
        TARGET2
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "帅|每|也|怨|抵|翻身|让|失策|转租|记住|请|除外|就|见|利|不成|自己|或|更|这么")
        ]))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "近|现在")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "推知")
          ])))
  ,
    NOT(
      *SubSRE(
        After(TARGET2)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "体验|性|衣|交易|的")
        ]))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "温柔")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "吻")
          ]))
    ,
      NOT(
        *SubSRE(
          After(TARGET2)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "。")
          ])))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "真")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "搞|这么")
          ])))
  ,
    NOT(
      *SubSRE(
        TARGET1
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "真")
        ]))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "黑")
          ]))
    ,
      NOT(
        *SubSRE(
          Before(TARGET1)
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "是")
          ]))))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Structural Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "地")).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}))})}

------------------------
[Chunk Grammar Rule]
error_structure_de_chang
------------------------
== GUID ==
b37343b0-7fcf-4cd5-bdc1-a53bf6eea6d6

== DESCRIPTION ==
This rule targets the incorrectly usage of  Chinese particles 地 within a cetain phrase.  
The suggestion is to flag the whole phrase and replace the particle with correct one 的。

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "唱|说|朗诵|讲|模仿")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "的")
  ]
</TARGET> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "很")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "好|动情|动听|带劲|悦耳")
  ]
</TARGET3>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2).
      ToList()).
    Append(
      Get(Target).
      ToList()).
    Append(
      Get(Target3).
      ToList())
  ,
    Value(
      String
    ,
      "Structural Error")
  ,
    If(
      Get(Target).
      Attr(Span.Text).
      Matches(
        "的")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "得")).
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target2))}).
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target3))}))}))}

----------------------
[Chunk Grammar Rule]
error_structure_de_fei
----------------------
== GUID ==
9a77aa6b-17af-401b-afe7-2920a219aaad

== DESCRIPTION ==
This rule targets the incorrectly usage of  Chinese particles 地 within a cetain phrase.  
The suggestion is to flag the whole phrase and replace the particle with correct one 的。

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "飞|开|运行|颠簸|下降|落地")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "地")
  ]
</TARGET> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "太")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "绕|高|快|慢|颠簸")
  ]
</TARGET3>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2).
      ToList()).
    Append(
      Get(Target).
      ToList()).
    Append(
      Get(Target3).
      ToList())
  ,
    Value(
      String
    ,
      "Structural Error")
  ,
    If(
      Get(Target).
      Attr(Span.Text).
      Matches(
        "地")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "得")).
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target2))}).
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target3))}))}))}

--------------------------
[Chunk Grammar Rule]
error_structure_de_renzhen
--------------------------
== GUID ==
8d7f2b1b-542e-4629-85bf-6710175dc6b9

== DESCRIPTION ==
This rule targets the incorrectly usage of  Chinese particles 得 within a certain phrase.  
The suggestion is to flag the whole phrase and replace the particle with correct one 地。

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "认真")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "的")
  ]
</TARGET> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "思考|阅读")
  ]
</TARGET3>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target).
      ToList()).
    Append(
      Get(Target3).
      ToList())
  ,
    Value(
      String
    ,
      "Structural Error")
  ,
    If(
      Get(Target).
      Attr(Span.Text).
      Matches(
        "的")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "地")).
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target3))}))}))}

-------------------------
[Chunk Grammar Rule]
error_structure_de_token1
-------------------------
== GUID ==
b249fb78-ddff-47e2-926e-e8d55ff0e1a3

== DESCRIPTION ==
This rule targets the incorrectly usage of  Chinese particles 地得 in two phrases.  
The suggestion is to flag the whole phrase and replace the particle with correct one。

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "白白得|飞地")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Structural Error")
  ,
    If(
      Get(Target).
      Attr(Span.Text).
      Matches(
        "白白得")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "白白的"))}
    ,
      If(
        Get(Target).
        Attr(Span.Text).
        Matches(
          "飞地")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              "飞得"))})))}

-------------------------
[Chunk Grammar Rule]
error_structure_de_token2
-------------------------
== GUID ==
fa9ac0e6-654b-48ed-800f-f5559a480318

== DESCRIPTION ==
This rule targets the incorrectly usage of  Chinese particles 得 within a certain phrase.  
The suggestion is to flag the whole phrase and replace the particle with correct one 地。

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "难")
  ]
</TARGET1> :
(
  <TARGET2>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "过")
    ]
  </TARGET2> :
  <TARGET>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "得")
    ]
  </TARGET>
) :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "哭泣")
  ]
</TARGET3>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2).
      ToList()).
    Append(
      Get(Target).
      ToList()).
    Append(
      Get(Target3).
      ToList())
  ,
    Value(
      String
    ,
      "Structural Error")
  ,
    If(
      Get(Target).
      Attr(Span.Text).
      Matches(
        "得")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target2))}).
          Concat(
            Value(
              String
            ,
              "地")).
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target3))}))}))}

-------------------------
[Chunk Grammar Rule]
error_structure_de_token3
-------------------------
== GUID ==
4077c8d0-ef1b-4a09-b492-0d759bf36412

== DESCRIPTION ==
This rule targets the incorrectly usage of  Chinese particles 地 within a cetain phrase.  
The suggestion is to flag the whole phrase and replace the particle with correct one 的。

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "黄色")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "地")
  ]
</TARGET> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "小")
  ]
</TARGET2> :
<TARGET3>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "动物")
  ]
</TARGET3>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target3
,
  %{GetSingleCapture(
      Get(TARGET3))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target2).
      ToList()).
    Append(
      Get(Target).
      ToList()).
    Append(
      Get(Target3).
      ToList())
  ,
    Value(
      String
    ,
      "Structural Error")
  ,
    If(
      Get(Target).
      Attr(Span.Text).
      Matches(
        "地")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}.
          Concat(
            Value(
              String
            ,
              "的")).
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target2))}).
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Target3))}))}))}

-----------------------
[Chunk Grammar Rule]
error_structure_de_verb
-----------------------
== GUID ==
1603dd29-0d05-4bb7-a61d-1e233a6ae390

== DESCRIPTION ==
This rule targets the incorrectly usage of  Chinese particles 的 within certain phrases in the combination of specific verbs.
The suggestion is to flag the whole phrase and replace the particle with correct one 得。

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "爬|拿|下|看|说|背")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "的")
  ]
</TARGET> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "出手|去|上去|下去|上|下来|上来")
  ]
</TARGET2>
WHERE:
  AND(
    NOT(
      *SubSRE(
        After(TARGET2)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "善|投入|成就|年|个|内存|样|问题|罗马|棵|原|效果")
        ]))
  ,
    OR(
      NOT(
        *SubSRE(
          TARGET1
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "说")
          ]))
    ,
      NOT(
        *SubSRE(
          TARGET2
        ,
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "上|去")
          ]))))

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target)).
    Append(
      Get(Target2))
  ,
    Value(
      String
    ,
      "Structural Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Target1))}.
        Concat(
          Value(
            String
          ,
            "得")).
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target2))}))})}

----------------------
[Chunk Grammar Rule]
error_symbol_ampersand
----------------------
== GUID ==
278e5f05-3e8e-4888-bfe3-92f5db87c3fe

== DESCRIPTION ==
This rule targets full-width ＆ and replaces it with half width &.

== PATTERN ==
(
  #START# :
  <TARGET>
    [@Text:
        "＆"
    ]
  </TARGET> :
  <WORD2>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD2>
)
|
(
  <WORD>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD> :
  <TARGET>
    [@Text:
        "＆"
    ]
  </TARGET>
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Word).
      ToList().
      Append(
        Get(Target))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "&")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word2))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "&").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

---------------------
[Chunk Grammar Rule]
error_symbol_asterisk
---------------------
== GUID ==
9622e985-1b0c-473a-a28c-752705ab1d10

== DESCRIPTION ==
This rule targets full-width ＊ and replaces it with half width *.

== PATTERN ==
(
  #START# :
  (
    [@Annotations:
        Tokenization.TokenName=
          "Whitespace"_i
    ]
  )* :
  <TAGET2>
    (
      [@Text:
          "＊"
      ]
    )+ :
    <WORD2>
      [@Annotations:
          +Tokenization.TokenName
      ]
    </WORD2>
  </TAGET2>
)
|
<TAGET2>
  <WORD>
    NOT(
      [@Text:
          "＊"
      ])
  </WORD> :
  (
    [@Text:
        "＊"
    ]
  )+
</TAGET2>

== ACTION ==
New(
  Taget2
,
  %{GetSingleCapture(
      Get(TAGET2))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverChunk(
      Get(Taget2)
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "*")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverChunk(
      Get(Taget2)
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "*").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

----------------------
[Chunk Grammar Rule]
error_symbol_backslash
----------------------
== GUID ==
183d2ff0-de19-4032-9d30-ce5efb237314

== DESCRIPTION ==
This rule targets full-width ＼ and replaces it with half width \.

== PATTERN ==
(
  #START# :
  (
    [@Annotations:
        Tokenization.TokenName=
          "Whitespace"_i
    ]
  )* :
  (
    (
      <TARGET>
        [@Text:
            "＼"
        ]
      </TARGET>
    )+ :
    <WORD2>
      [@Annotations:
          +Tokenization.TokenName
      ]
    </WORD2>
  )
)
|
(
  <WORD>
    NOT(
      [@Text:
          "＼"
      ])
  </WORD> :
  (
    <TARGET>
      [@Text:
          "＼"
      ]
    </TARGET>
  )+
)
WHERE:
  *SubSRE(
    WORD
  ,
    [@Annotations:
        +Tokenization.TokenName
    ])

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Word).
      ToList().
      Append(
        Get(Target))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "\\")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word2))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "\\").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

--------------------
[Chunk Grammar Rule]
error_symbol_caret
--------------------
== GUID ==
0c88825f-4fd0-4ac9-a58f-0e4f8b7aec46

== DESCRIPTION ==
This rule targets full-width ︿ and ＾ and replaces it with half width ^.

== PATTERN ==
(
  #START# :
  <TARGET>
    [@Text:
        "︿|＾"
    ]
  </TARGET> :
  <WORD2>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD2>
)
|
(
  <WORD>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD> :
  <TARGET>
    [@Text:
        "︿|＾"
    ]
  </TARGET>
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Word).
      ToList().
      Append(
        Get(Target))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "^")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word2))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "^").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

----------------------
[Chunk Grammar Rule]
error_symbol_close_tag
----------------------
== GUID ==
76d1667c-b1ff-410f-9308-df050f62ab76

== DESCRIPTION ==
This rule targets full-width ＞ as close-tag and replaces it with half width >.

== PATTERN ==
[@Text:
    "＜|<"
] :
(
  AND(
    [@Annotations:
        +Tokenization.TokenName
    ]
  ,
    [@Annotations:
        Chinese_SimplifiedSyntax.LatinString=
          True
    ])
)* :
<TOKEN>
  [@Annotations:
      Chinese_SimplifiedSyntax.LatinString=
        True
  ]
</TOKEN> :
<TARGET>
  [@Text:
      "＞"
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Token
,
  %{GetSingleCapture(
      Get(TOKEN))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Token).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Symbol Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Token))}.
        Concat(
          Value(
            String
          ,
            " >")))})}

--------------------
[Chunk Grammar Rule]
error_symbol_dollar
--------------------
== GUID ==
ef9fc53a-dc58-482f-99ac-8fe9164abd75

== DESCRIPTION ==
This rule targets full-width ＄ and replaces it with half width $.

== PATTERN ==
(
  #START# :
  <TARGET>
    [@Text:
        "＄"
    ]
  </TARGET> :
  <WORD2>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD2>
)
|
(
  <WORD>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD> :
  <TARGET>
    [@Text:
        "＄"
    ]
  </TARGET>
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Word).
      ToList().
      Append(
        Get(Target))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "$")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word2))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "$").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

--------------------
[Chunk Grammar Rule]
error_symbol_equal
--------------------
== GUID ==
2555b0a4-7679-4641-b807-0f6f95e4528c

== DESCRIPTION ==
This rule targets full-width ＝ and replaces it with half width =.

== PATTERN ==
(
  #START# :
  <TARGET>
    [@Text:
        "＝"
    ]
  </TARGET> :
  <WORD1>
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            "NUMBER")
    ]
  </WORD1>
)
|
(
  #START# :
  <TARGET>
    [@Text:
        "＝"
    ]
  </TARGET> :
  <WORD2>
    [@Annotations:
        Tokenization.TokenName=
          "NUMBER"
    ]
  </WORD2>
)
|
(
  <WORD3>
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            "NUMBER")
    ]
  </WORD3> :
  <TARGET>
    [@Text:
        "＝"
    ]
  </TARGET>
)
|
(
  <WORD4>
    [@Annotations:
        Tokenization.TokenName=
          "NUMBER"
    ]
  </WORD4> :
  <TARGET>
    [@Text:
        "＝"
    ]
  </TARGET>
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD1)
,
  New(
    Word1
  ,
    %{GetSingleCapture(
        Get(WORD1))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word1))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "=").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word1))}))})}
,
  If(
    IsDefined(WORD2)
  ,
    New(
      Word2
    ,
      %{GetSingleCapture(
          Get(WORD2))})
    .
    %{CreateCritiqueOverMultipleChunks(
        Get(Target).
        ToList().
        Append(
          Get(Word2))
      ,
        Value(
          String
        ,
          "Symbol Error")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              " = ").
            Concat(
              %{SpanTextWithoutFinalWS(
                  Get(Word2))}))})}
  ,
    If(
      IsDefined(WORD3)
    ,
      New(
        Word3
      ,
        %{GetSingleCapture(
            Get(WORD3))})
      .
      %{CreateCritiqueOverMultipleChunks(
          Get(Word3).
          ToList().
          Append(
            Get(Target))
        ,
          Value(
            String
          ,
            "Symbol Error")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Word3))}.
              Concat(
                Value(
                  String
                ,
                  "=")))})}
    ,
      If(
        IsDefined(WORD4)
      ,
        New(
          Word4
        ,
          %{GetSingleCapture(
              Get(WORD4))})
        .
        %{CreateCritiqueOverMultipleChunks(
            Get(Word4).
            ToList().
            Append(
              Get(Target))
          ,
            Value(
              String
            ,
              "Symbol Error")
          ,
            %{SuggestLiteral(
                %{SpanTextWithoutFinalWS(
                    Get(Word4))}.
                Concat(
                  Value(
                    String
                  ,
                    " = ")))})}))))

--------------------
[Chunk Grammar Rule]
error_symbol_hash
--------------------
== GUID ==
904ac711-8ebf-421d-b8ce-b6618353298a

== DESCRIPTION ==
This rule targets full-width ＃ and replaces it with half width #.

== PATTERN ==
(
  #START# :
  (
    [@Annotations:
        Tokenization.TokenName=
          "Whitespace"_i
    ]
  )* :
  <TAGET2>
    (
      <TARGET>
        [@Text:
            "＃"
        ]
      </TARGET>
    )+ :
    <WORD2>
      [@Annotations:
          +Tokenization.TokenName
      ]
    </WORD2>
  </TAGET2>
)
|
<TAGET2>
  <WORD>
    NOT(
      [@Text:
          "＃"
      ])
  </WORD> :
  (
    <TARGET>
      [@Text:
          "＃"
      ]
    </TARGET>
  )+
</TAGET2>
WHERE:
  OR(
    OR(
      *SubSRE(
        After(Match)
      ,
        #START# :
        #END#)
    ,
      *AnnotationQuery(
        Get(TARGET).
        Attr(Capture.Matches).
        MatchesAsList(
          *Contains(
            Chinese_SimplifiedSyntax.LatinString=
              True))))
  ,
    NOT(
      AND(
        *SubSRE(
          WORD
        ,
          [@Annotations:
              Chinese_SimplifiedSyntax.LatinString=
                True
          ])
      ,
        *SubSRE(
          After(Match)
        ,
          #START# :
          [@Annotations:
              Chinese_SimplifiedSyntax.LatinString=
                True
          ]))))

== ACTION ==
New(
  Taget2
,
  %{GetSingleCapture(
      Get(TAGET2))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverChunk(
      Get(Taget2)
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "#")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverChunk(
      Get(Taget2)
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "#").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

-------------------------------
[Chunk Grammar Rule]
error_symbol_left_curly_bracket
-------------------------------
== GUID ==
7efa8b38-7b2f-4edf-b71e-937f24c03915

== DESCRIPTION ==
This rule targets full-width ｛ and replaces it with half width {.

== PATTERN ==
(
  #START# :
  <TARGET>
    [@Text:
        "｛"
    ]
  </TARGET> :
  <WORD2>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD2>
)
|
(
  <WORD>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD> :
  <TARGET>
    [@Text:
        "｛"
    ]
  </TARGET>
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Word).
      ToList().
      Append(
        Get(Target))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "\{")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word2))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "\{").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

---------------------
[Chunk Grammar Rule]
error_symbol_negative
---------------------
== GUID ==
b66f87f0-3572-4e45-b0e0-756272e2ac20

== DESCRIPTION ==
This rule targets full-width － and — as a negative sign, and replaces it with half width -.

== PATTERN ==
NOT(
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]) :
<TARGET>
  [@Text:
      NOT(
        \s$),
   @Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      TARGET
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  *Contains(－|—))
      ])
  ,
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "年|日|月|:|岁|倍|支|转|：|∶|°")
        ]))
  ,
    NOT(
      *SubSRE(
        Before(TARGET)
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "RS")
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Symbol Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "-").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}.
          Substring(
            Value(
              Integer
            ,
              1)
          ,
            Get(Target).
            Attr(Span.Length).
            Subtract(
              Value(
                Integer
              ,
                1)))))})}

---------------------
[Chunk Grammar Rule]
error_symbol_open_tag
---------------------
== GUID ==
e1bf419c-37c1-4b99-aa9d-66f9c92c08eb

== DESCRIPTION ==
This rule targets full-width ＜ as an opening tag, and replaces it with half width <.

== PATTERN ==
<TARGET>
  [@Text:
      "＜"
  ]
</TARGET> :
<TOKEN2>
  (
    [@Text:
        "\|＼"
    ]
  )? :
  [@Annotations:
      Chinese_SimplifiedSyntax.LatinString=
        True
  ]
</TOKEN2> :
(
  [@Annotations:
      Chinese_SimplifiedSyntax.LatinString=
        True
  ]
)* :
[@Text:
    ">|＞"
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Token2
,
  %{GetSingleCapture(
      Get(TOKEN2))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Token2))
  ,
    Value(
      String
    ,
      "Symbol Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "<").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Token2))}))})}

--------------------
[Chunk Grammar Rule]
error_symbol_percent
--------------------
== GUID ==
0d69da46-cce5-410a-a19c-f211be5b1171

== DESCRIPTION ==
This rule targets full-width ％ and replaces it with half width %.

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET>
WHERE:
  *SubSRE(
    TARGET
  ,
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                *Contains(％))
    ])

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target1))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "％")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "%")))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Get(Char).
          Attr(AnnotationScript.String))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList()
  ,
    Value(
      String
    ,
      "Symbol Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

--------------------
[Chunk Grammar Rule]
error_symbol_plus
--------------------
== GUID ==
304a41ed-8b9d-4d17-8e90-16d5cfe39c7d

== DESCRIPTION ==
This rule targets full-width ＋ and replaces it with half width +.

== PATTERN ==
(
  #START# :
  <TARGET>
    [@Text:
        "＋"
    ]
  </TARGET> :
  <WORD1>
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            "NUMBER")
    ]
  </WORD1>
)
|
(
  #START# :
  <TARGET>
    [@Text:
        "＋"
    ]
  </TARGET> :
  <WORD2>
    [@Annotations:
        Tokenization.TokenName=
          "NUMBER"
    ]
  </WORD2>
)
|
(
  <WORD3>
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            "NUMBER")
    ]
  </WORD3> :
  <TARGET>
    [@Text:
        "＋"
    ]
  </TARGET>
)
|
(
  <WORD4>
    [@Annotations:
        Tokenization.TokenName=
          "NUMBER"
    ]
  </WORD4> :
  <TARGET>
    [@Text:
        "＋"
    ]
  </TARGET>
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD1)
,
  New(
    Word1
  ,
    %{GetSingleCapture(
        Get(WORD1))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word1))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "+").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word1))}))})}
,
  If(
    IsDefined(WORD2)
  ,
    New(
      Word2
    ,
      %{GetSingleCapture(
          Get(WORD2))})
    .
    %{CreateCritiqueOverMultipleChunks(
        Get(Target).
        ToList().
        Append(
          Get(Word2))
      ,
        Value(
          String
        ,
          "Symbol Error")
      ,
        %{SuggestLiteral(
            Value(
              String
            ,
              " + ").
            Concat(
              %{SpanTextWithoutFinalWS(
                  Get(Word2))}))})}
  ,
    If(
      IsDefined(WORD3)
    ,
      New(
        Word3
      ,
        %{GetSingleCapture(
            Get(WORD3))})
      .
      %{CreateCritiqueOverMultipleChunks(
          Get(Word3).
          ToList().
          Append(
            Get(Target))
        ,
          Value(
            String
          ,
            "Symbol Error")
        ,
          %{SuggestLiteral(
              %{SpanTextWithoutFinalWS(
                  Get(Word3))}.
              Concat(
                Value(
                  String
                ,
                  "+")))})}
    ,
      If(
        IsDefined(WORD4)
      ,
        New(
          Word4
        ,
          %{GetSingleCapture(
              Get(WORD4))})
        .
        %{CreateCritiqueOverMultipleChunks(
            Get(Word4).
            ToList().
            Append(
              Get(Target))
          ,
            Value(
              String
            ,
              "Symbol Error")
          ,
            %{SuggestLiteral(
                %{SpanTextWithoutFinalWS(
                    Get(Word4))}.
                Concat(
                  Value(
                    String
                  ,
                    " + ")))})}))))

--------------------------------
[Chunk Grammar Rule]
error_symbol_right_curly_bracket
--------------------------------
== GUID ==
e1304bb4-7a12-4ecc-a540-a8e46bb7c5b8

== DESCRIPTION ==
This rule targets full-width ｝ and replaces it with half width }.

== PATTERN ==
(
  #START# :
  <TARGET>
    [@Text:
        "｝"
    ]
  </TARGET> :
  <WORD2>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD2>
)
|
(
  <WORD>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD> :
  <TARGET>
    [@Text:
        "｝"
    ]
  </TARGET>
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Word).
      ToList().
      Append(
        Get(Target))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "\}")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word2))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "\}").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

--------------------
[Chunk Grammar Rule]
error_symbol_slash
--------------------
== GUID ==
673c6f8c-7a86-47b1-bbae-696c0ed4abef

== DESCRIPTION ==
This rule targets full-width ／ and replaces it with half width /.

== PATTERN ==
(
  #START# :
  <TARGET>
    [@Text:
        "／"
    ]
  </TARGET> :
  <WORD2>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD2>
)
|
(
  <WORD>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD> :
  <TARGET>
    [@Text:
        "／"
    ]
  </TARGET>
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Word).
      ToList().
      Append(
        Get(Target))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "/")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word2))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "/").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

------------------------
[Chunk Grammar Rule]
error_symbol_tilde_range
------------------------
== GUID ==
5095d00f-753a-4bff-afdc-5695297573b9

== DESCRIPTION ==
This rule targets half-width ~ in the context of different ranges, e.g. time, date, and number, and replaces it with full width ～.

== PATTERN ==
<NUMBER>
  [@Annotations:
      Tokenization.TokenName=
        "DATE|TIME|NUMBER"
  ]
</NUMBER> :
<TARGET>
  [@Text:
      "~"
  ]
</TARGET> :
[@Annotations:
    Tokenization.TokenName=
      "DATE|TIME|NUMBER"
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Number
,
  %{GetSingleCapture(
      Get(NUMBER))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Number).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Symbol Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Number))}.
        Concat(
          Value(
            String
          ,
            "～")))})}

-------------------------
[Chunk Grammar Rule]
error_symbol_vertical_bar
-------------------------
== GUID ==
dc4160be-e28b-4d7b-93c9-d9e73ea8777f

== DESCRIPTION ==
This rule targets full-width ｜ and replaces it with half width |.

== PATTERN ==
(
  #START# :
  <TARGET>
    [@Text:
        "｜"
    ]
  </TARGET> :
  <WORD2>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD2>
)
|
(
  <WORD>
    [@Annotations:
        +Tokenization.TokenName
    ]
  </WORD> :
  <TARGET>
    [@Text:
        "｜"
    ]
  </TARGET>
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
If(
  IsDefined(WORD)
,
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Word).
      ToList().
      Append(
        Get(Target))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word))}.
          Concat(
            Value(
              String
            ,
              "|")))})}
,
  New(
    Word2
  ,
    %{GetSingleCapture(
        Get(WORD2))})
  .
  %{CreateCritiqueOverMultipleChunks(
      Get(Target).
      ToList().
      Append(
        Get(Word2))
    ,
      Value(
        String
      ,
        "Symbol Error")
    ,
      %{SuggestLiteral(
          Value(
            String
          ,
            "|").
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Word2))}))})})

--------------------------
[Chunk Grammar Rule]
frequent_confusabke_自[抱]自弃
--------------------------
== GUID ==
f9b19aee-172c-4f19-8df4-b60efe69b49c

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "自")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "抱")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "自弃")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "暴"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[亲]睐
------------------------
== GUID ==
ad2d631e-c17c-48a5-8b94-446cc486ccbb

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "亲")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "睐")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "青"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[份]X
------------------------
== GUID ==
0c59b299-adfc-4349-923e-7c64bc805894

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "份")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "内|量")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "分"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[侯车]
------------------------
== GUID ==
b7ef1a9f-5721-47ba-8c1a-116e94d77250

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "侯车")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "候车"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[做]为
------------------------
== GUID ==
f8bfcef5-26ae-4285-a110-1349814c462c

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "做")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "为")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "作"))})}

-------------------------
[Chunk Grammar Rule]
frequent_confusable_[做月子]
-------------------------
== GUID ==
e9c18d84-639b-4ec6-8ce3-6eefe39e7144

== DESCRIPTION ==
This rule targets CHS character 做  (zuo) incorrectly used in the word 坐月子 (zuoyuezi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "做")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "月子")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            NOT(
              "餐|中心|生意"))
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "坐").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[凭]添
------------------------
== GUID ==
f58825dd-8535-460d-9f71-a33feb22bba5

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "凭")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "添")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "平"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[分]丝
------------------------
== GUID ==
8cfedf3f-86ee-4f09-a659-01ba39f00ea5

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "份|分")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "丝")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "粉"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[分]额
------------------------
== GUID ==
4c9096fb-45ab-4da0-bff8-bbc4c3d750ab

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "分")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "额")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "份"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[到是]
------------------------
== GUID ==
fd9b92fc-a253-4b4b-9d3d-d1f350367db5

== DESCRIPTION ==
This rule targets CHS character 做  (zuo) incorrectly used in the word 坐月子 (zuoyuezi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            NOT(
              "不|考虑|认识|抓|说|想|找|猜|见|看|了解|意识|联想|问|查|是|闻|察觉|注意"))
] :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "到")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "是")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "倒").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

---------------------------
[Chunk Grammar Rule]
frequent_confusable_[到是]BOS
---------------------------
== GUID ==
64712b75-f722-4ca5-9afa-5c19315f61ea

== DESCRIPTION ==
This rule targets CHS character 做  (zuo) incorrectly used in the word 坐月子 (zuoyuezi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  AND(
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "到")
    ]
  ,
    [@StartIndex:
        =0
    ])
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "是")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "倒").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target))}))})}

-------------------------
[Chunk Grammar Rule]
frequent_confusable_[名]信片
-------------------------
== GUID ==
cbddd9cd-62ee-4a15-96a5-4b6a85d68620

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "名")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "信")
] :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "片")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "明"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[帐号]
------------------------
== GUID ==
e1ca7683-0486-4532-bc2e-d70d979f7667

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "帐号")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "账号"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[幅]射
------------------------
== GUID ==
a81ef1cd-0450-4ff4-b1ed-3c661440e495

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "幅")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "射")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "辐"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[当做]
------------------------
== GUID ==
8c56cda1-f281-4194-8e61-bfbe5d91ca30

== DESCRIPTION ==
This rule targets CHS character 做  (zuo) incorrectly used in the word 坐月子 (zuoyuezi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "当")
  ]
</TARGET1> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "做")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            NOT(
              "作业|事|爱|东西|工作|运动|事情|考研|试题"))
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "作").
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Target1))}))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[按]装
------------------------
== GUID ==
7480ccb8-989d-4964-b780-b232ed4ca849

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "按")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "装")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "安"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[既]使
------------------------
== GUID ==
35ec781d-4715-4480-b3cd-bcdecd785290

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "既")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "使")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "即"))})}

--------------------------
[Chunk Grammar Rule]
frequent_confusable_[穿]流不息
--------------------------
== GUID ==
903d901c-53cb-44cc-9de5-ab44e40fdcbc

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "穿")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "流")
] :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "不息")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "川"))})}

--------------------------
[Chunk Grammar Rule]
frequent_confusable_[美仑]美奂
--------------------------
== GUID ==
3399d2b3-8a4f-4c6c-96d1-f177b9c014ea

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "美仑")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "美")
] :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "奂")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "美轮"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[贴]子
------------------------
== GUID ==
21095f79-0cbb-4b2e-b6d4-950d05f0e3f1

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "贴")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "子")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "帖"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[跟帖]
------------------------
== GUID ==
6e86ea25-82d0-4601-8a17-25e712c14f56

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "跟贴")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "跟帖"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[转贴]
------------------------
== GUID ==
49d9fb59-427f-4d9e-ae24-046d2a04ecd1

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "转贴")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "转帖"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_[防]碍
------------------------
== GUID ==
09e972d0-3bb5-40f0-b165-20d467d9c937

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "防")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "碍")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "妨"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_X[份]
------------------------
== GUID ==
d52333e4-b7c5-44ba-a51b-e98287e8066e

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "充|辈|成|养|情|部|天|糖|非|本|安|过|恰如其|名")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "份")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "分"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_X[帐]
------------------------
== GUID ==
422c097b-9055-4d99-a2e4-671aad9e34f5

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "算|结|记")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "帐")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "账"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_X[贴]
------------------------
== GUID ==
d7c95f74-5881-4fa3-8978-e4e7501fd98c

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "删|发|回")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "贴")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "帖"))})}

--------------------------
[Chunk Grammar Rule]
frequent_confusable_一[幅]对联
--------------------------
== GUID ==
12048c26-b33c-421d-9b66-13536fc367c7

== PATTERN ==
(
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "一")
  ]
)? :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "幅")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "对联|对子|春联")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "副"))})}

-----------------------------
[Chunk Grammar Rule]
frequent_confusable_不能|无法[自己]
-----------------------------
== GUID ==
3bc0d596-5b1c-4cb6-88a7-4ac9041eca46

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "不能|无法|能够")
] :
(
  <TARGET>
    [@Annotations:
        AND(
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "自己")
        ,
          Syntax.FinalWSCount=
            >0)
    ]
  </TARGET>
  |
  (
    <TARGET>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "自己")
      ]
    </TARGET> :
    (
      [@Annotations:
          Tokenization.TokenName=
            *StartsWith(P_)
      ]
      |
      #END#
    )
  )
)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "自已"))})}

--------------------------------
[Chunk Grammar Rule]
frequent_confusable_不能|无法[自己]BOS
--------------------------------
== GUID ==
b9b8f1ac-3f50-45da-bfe4-d9cf43b29d19

== PATTERN ==
AND(
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "不能")
  ]
,
  [@StartIndex:
      =0
  ]) :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "自己")
  ]
</TARGET> :
[@Text:
    "你|你们|我们|我|不是|是|他|他们|她|她们|大家"
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "自已"))})}

--------------------------------
[Chunk Grammar Rule]
frequent_confusable_不能|无法[自己]MOS
--------------------------------
== GUID ==
949f91b2-8edd-4787-9528-5aafd1b68b25

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "不能")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "自己")
  ]
</TARGET> :
[@Text:
    "就|那么|可是|但是|虽然|然而|即使|而且"
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "自已"))})}

--------------------------
[Chunk Grammar Rule]
frequent_confusable_再接再[励]
--------------------------
== GUID ==
fe6b5626-d1b9-4394-9607-b91e4debde4a

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "再")
] :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "接")
] :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "再")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "励")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "厉"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_凑[和]
------------------------
== GUID ==
df22c71b-4ea8-42c1-9584-ee51b878cf3e

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "凑")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "和")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "合"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_坐[阵]
------------------------
== GUID ==
c84e7e6f-1d2f-45ee-8f6c-312021e82a43

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "坐")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "阵")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "镇"))})}

-------------------------
[Chunk Grammar Rule]
frequent_confusable_大[姆]指
-------------------------
== GUID ==
b0ca5764-8b11-4169-8970-4ac5c9c3e536

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "大|小")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "姆")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "指")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "拇"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_当[做]
------------------------
== GUID ==
fbafce35-9906-431d-b6c8-d681b0e8f274

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "当做")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "当作"))})}

-------------------------
[Chunk Grammar Rule]
frequent_confusable_挖[墙角]
-------------------------
== GUID ==
38f5a47c-0ddd-4ece-9c71-e4237c04a766

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "挖")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "墙角")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "墙脚"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_粗[旷]
------------------------
== GUID ==
bf89723d-bdd1-4e64-8e95-cdcfadf8110f

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "粗")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "旷")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "犷"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_编[缉]
------------------------
== GUID ==
9853ec4b-8a24-4395-8aa2-16e4f35e1689

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "编")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "缉")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "辑"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusable_脉[博]
------------------------
== GUID ==
0ee94592-3e09-42a1-a8de-edf86770dff4

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "脉")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "博")
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "搏"))})}

--------------------------
[Chunk Grammar Rule]
frequent_confusable_走[头]无路
--------------------------
== GUID ==
4cb81c08-2f78-4863-81d6-68e364ab0fef

== PATTERN ==
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "走")
] :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "头")
  ]
</TARGET> :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "无")
] :
[@Annotations:
    Syntax.Analyses=
      *Contains(
        Normalization.Result=
          NormalizedForm=
            "路")
]

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "投"))})}

------------------------
[Chunk Grammar Rule]
frequent_confusbale_[帐]X
------------------------
== GUID ==
aa3e93d8-2f78-438c-968f-58e59a6b2518

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "帐")
  ]
</TARGET> :
OR(
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "务|单|号|本|目")
  ]
,
  [@Text:
      "单里|单上"
  ])

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Frequent confusable homonyms")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "账"))})}

--------------------
[Chunk Grammar Rule]
LexLookup
--------------------
== GUID ==
e65ab775-0cab-49bf-adf8-8395633f2c97

== TAGS ==
VacuousOK

== PATTERN ==
<WORD>
  [@Annotations:
      -Syntax.Analyses
  ]
</WORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
%{LexLookupAction(
    Get(Word)
  ,
    Analyze(Chinese_Simplified))}
	
--------------------
[Chunk Grammar Rule]
LexLookup-Affixes1
--------------------
== GUID ==
c95312d0-217d-436c-b4de-7ace4a1197a8

== TAGS ==
VacuousOK

== PATTERN ==
<WORD>
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "老")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            +Chinese_SimplifiedMorph.Noun)
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            +Chinese_SimplifiedMorph.Noun)
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "某")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "某")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            +Chinese_SimplifiedMorph.Noun)
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "儿")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "们")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            +Chinese_SimplifiedMorph.Noun)
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "儿|们|某")
    ]
  )
</WORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
Assign(
  Get(Word).
  Attr(Tokenization.TokenName)
,
  Value(
    String
  ,
    "None"))
.
%{LexLookupAction(
    Get(Word)
  ,
    Analyze(Chinese_Simplified))}

--------------------
[Chunk Grammar Rule]
LexLookup-Affixes2
--------------------
== GUID ==
7c71f874-89f0-46d7-87da-1ac43fe18696

== TAGS ==
VacuousOK

== PATTERN ==
<WORD>
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "小|大|副|前|轻|重")
    ] :
    [@Annotations:
        Syntax.Analyses=
          AND(
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
          ,
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  NOT(
                    "苹果")))
    ]
  )
  |
  (
    (
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "小")
        ] :
        (
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "白")
          ]
        )?
      )
      |
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "短|长")
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "毛")
        ]
      )
    ) :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "猫|狗")
    ]
  )
</WORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
Assign(
  Get(Word).
  Attr(Tokenization.TokenName)
,
  Value(
    String
  ,
    "None"))
.
%{LexLookupAction(
    Get(Word)
  ,
    Analyze(Chinese_Simplified))}

--------------------
[Chunk Grammar Rule]
LexLookup-Affixes3
--------------------
== GUID ==
e40e991c-6937-4dd9-b359-da41d087995d

== TAGS ==
VacuousOK

== PATTERN ==
<WORD>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ] :
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "姑娘|小姐|夫人|文鱼|流|级")
  ]
</WORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
Assign(
  Get(Word).
  Attr(Tokenization.TokenName)
,
  Value(
    String
  ,
    "None"))
.
%{LexLookupAction(
    Get(Word)
  ,
    Analyze(Chinese_Simplified))}

--------------------
[Chunk Grammar Rule]
LexLookup-Suffixes1
--------------------
== GUID ==
b7f6cb43-6fa3-4f9d-a904-07cd352cabd1

== TAGS ==
VacuousOK

== PATTERN ==
<WORD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          OR(
            +Chinese_SimplifiedMorph.Noun
          ,
            +Chinese_SimplifiedMorph.Verb))
  ] :
  OR(
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "家|员|者|学|树|队|人|商")
    ]
  ,
    [@Text:
        "家|员|者|学|树|队|人|商"
    ])
</WORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
Assign(
  Get(Word).
  Attr(Tokenization.TokenName)
,
  Value(
    String
  ,
    "None"))
.
%{LexLookupAction(
    Get(Word)
  ,
    Analyze(Chinese_Simplified))}

--------------------
[Chunk Grammar Rule]
LexLookup-Suffixes2
--------------------
== GUID ==
628baf0c-b977-4c08-9b83-30e580ae8b7b

== TAGS ==
VacuousOK

== PATTERN ==
<WORD>
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            OR(
              +Chinese_SimplifiedMorph.Adj
            ,
              +Chinese_SimplifiedMorph.Noun
            ,
              +Chinese_SimplifiedMorph.Verb))
    ]
    |
    (
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "百")
      ] :
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "香")
      ]
    )
  ) :
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "果|级|化|度")
  ]
</WORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
Assign(
  Get(Word).
  Attr(Tokenization.TokenName)
,
  Value(
    String
  ,
    "None"))
.
%{LexLookupAction(
    Get(Word)
  ,
    Analyze(Chinese_Simplified))}

--------------------
[Chunk Grammar Rule]
LexLookup-Suffixes3
--------------------
== GUID ==
7eadbe88-acf1-45dc-a4be-6f91a6e6754b

== TAGS ==
VacuousOK

== PATTERN ==
<WORD>
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            +Chinese_SimplifiedMorph.Noun)
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "号|情|汤|汁|色|味|画|线|莓|库|队|烟|百合|钢笔")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "羊")
    ] :
    (
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "脂玉")
      ]
      |
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "脂")
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    "玉")
        ]
      )
    )
  )
</WORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
Assign(
  Get(Word).
  Attr(Tokenization.TokenName)
,
  Value(
    String
  ,
    "None"))
.
%{LexLookupAction(
    Get(Word)
  ,
    Analyze(Chinese_Simplified))}

--------------------
[Chunk Grammar Rule]
LexLookup-Suffixes4
--------------------
== GUID ==
a9e3d19e-112d-4813-9bfd-4bb4ebd6d95a

== TAGS ==
VacuousOK

== PATTERN ==
<WORD>
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            OR(
              +Chinese_SimplifiedMorph.Adj
            ,
              +Chinese_SimplifiedMorph.Noun
            ,
              Normalization.Result=
                NormalizedForm=
                  "裸"))
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "绵绵|片|糖|图")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "百合|玫瑰")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "蛋|花")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "牛仔")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "裙")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "肩")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "带")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "河")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "粉")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "肉|玻璃")
    ] :
    OR(
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "翅|蟹|串|棒")
      ]
    ,
      [@Text:
          "翅|蟹|串|棒"
      ])
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "葡萄")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "藤")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "火柴")
    ] :
    OR(
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "梗")
      ]
    ,
      [@Text:
          "梗"
      ])
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "雪|市")
    ] :
    OR(
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "域|貂")
      ]
    ,
      [@Text:
          "域|貂"
      ])
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "贴")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "纸")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "狗")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "粮")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "床")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "品")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "啤酒")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "瓶")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "鱼")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "鳍")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "步")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "摇")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "白")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "墙")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "眼|眼镜")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "镜头|头")
    ]
  )
  |
  (
    (
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "黑")
      ]
    )? :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "血")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "怪|鸭|鸡")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "草")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "泥")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "马")
    ]
  )
  |
  (
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "市")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "建")
    ] :
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "局")
    ]
  )
</WORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
Assign(
  Get(Word).
  Attr(Tokenization.TokenName)
,
  Value(
    String
  ,
    "None"))
.
%{LexLookupAction(
    Get(Word)
  ,
    Analyze(Chinese_Simplified))}

--------------------
[Chunk Grammar Rule]
ListReplacement
--------------------
== GUID ==
686fefd1-2cd6-4d64-99bb-64b28d816302

== PATTERN ==
<SENTENCE>
  #START# :
  (
    .
  )+ :
  #END#
</SENTENCE>

== ACTION ==
%{ListBasedCritiqueAction_updated(
    Normalizer
  ,
    Get(SENTENCE))}

---------------------------------
[Chunk Grammar Rule]
MD_MeasureAfterPron/NumBeforeNoun
---------------------------------
== GUID ==
ff0dd963-9755-4f29-982e-9bbd33b6b91e

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        AND(
          *Contains(
            +Chinese_SimplifiedMorph.Measure)
        ,
          *Contains(
            -Chinese_SimplifiedMorph.Measure))
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      Before(TARGET)
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              OR(
                Normalization.Result=
                  NormalizedForm=
                    "这|那"
              ,
                +Chinese_SimplifiedMorph.Num))
      ] :
      #END#)
  ,
    *SubSRE(
      After(TARGET)
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              +Chinese_SimplifiedMorph.Noun)
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{ModifySpan(
    Get(Target)
  ,
    Modify(
      Get(Output).
      Attr(Syntax.Analyses)
    ,
      ItemsMatching(
        +Chinese_SimplifiedMorph.Measure)))}

--------------------
[Chunk Grammar Rule]
MD_NounAfterDE/Adj
--------------------
== GUID ==
b844e591-6d22-4011-bae2-e89e3a1ca50a

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        AND(
          *Contains(
            +Chinese_SimplifiedMorph.Noun)
        ,
          *Contains(
            +Chinese_SimplifiedMorph.Verb))
  ]
</TARGET>
WHERE:
*SubSRE(
  Before(TARGET)
,
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          OR(
            Normalization.Result=
              NormalizedForm=
                "的"
          ,
            +Chinese_SimplifiedMorph.Adj))
  ] :
  #END#)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{ModifySpan(
    Get(Target)
  ,
    Modify(
      Get(Output).
      Attr(Syntax.Analyses)
    ,
      ItemsMatching(
        +Chinese_SimplifiedMorph.Noun)))}

---------------------------------------------------------
[Chunk Grammar Rule]
number_approximate_1,2 or 2,3 +  CHS bai-qian-wan-yi/TIME
---------------------------------------------------------
== GUID ==
9fc5e199-41be-4633-a7ec-3d991858cbe4

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  OR(
    [@Annotations:
        OR(
          Tokenization.TokenName=
            "NUMBER"
        ,
          OR(
            Syntax.Analyses=
              *Contains(
                Morphology.POS=
                  "Num")
          ,
            OR(
              Tokenization.TokenName=
                "TIME"
            ,
              Tokenization.TokenName=
                "CURRENCY")))
    ]
  ,
    [@Text:
        "3千米|3公斤|3米|3公里|3千克|3小时|3厘米|3毫米|3秒|2千米|2公斤|2米|2公里|2小时|2千克|2厘米|2毫米|2秒|2吨|3吨|2万吨|3万吨|2斤|3斤|2千斤|3千斤"
    ])
</NUM2>
WHERE:
  AND(
    *SubSRE(
      NUM1
    ,
      [@Text:
          "1|2",
       @Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  AND(
                    *Contains(1|2)
                  ,
                    NOT(
                      *Contains(一|二))))
      ])
  ,
    *SubSRE(
      NUM2
    ,
      OR(
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      *Contains(2|3)
                    ,
                      *EndsWith(百|千|万|亿|点钟|千亿元|千元|万元|亿元|百元)
                    ,
                      NOT(
                        *Contains(二|三))))
        ]
      ,
        [@Text:
            "3千米|3公斤|3米|3公里|3千克|3小时|3厘米|3毫米|3秒|2千米|2公斤|2米|2公里|2小时|2千克|2厘米|2毫米|2秒|2吨|3吨|2万吨|3万吨|2斤|3斤|2千斤|3千斤"
        ])))

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0")
                        ,
                          DoNothing()
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Get(Char).
                              Attr(AnnotationScript.String)))))))))))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0").
                          And(
                            Get(Num2).
                            Attr(Span.Length).
                            Matches(
                              =2)).
                          And(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(0)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "十")))
                        ,
                          If(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(00))
                          ,
                            Modify(
                              Get(Num2).
                              Attr(Span.Text)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "百")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "0").
                              And(
                                Get(Num2).
                                Attr(Span.Length).
                                Matches(
                                  =3)).
                              And(
                                Get(Num2).
                                Attr(Span.Text).
                                Matches(
                                  *EndsWith(0万)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "十")))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Get(Char).
                                  Attr(AnnotationScript.String))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------------------------------------
[Chunk Grammar Rule]
number_approximate_1,2 or 2,3 + time-quantifier-measure
-------------------------------------------------------
== GUID ==
7b23c629-aec3-4260-a75c-1eadad22ea94

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM2> :
<Time-Quantifier-Measure>
  OR(
    AND(
      [@Annotations:
          OR(
            Tokenization.TokenName=
              "QUANTIFIER|TIME|MEASURE"
          ,
            Syntax.Analyses=
              *Contains(
                Morphology.POS=
                  "Measure|Time|Quantifier"))
      ]
    ,
      NOT(
        [@Text:
            "类|级|年代|等|层|届|号|班|月|栏|名"
        ]))
  ,
    [@Text:
        "成新|点钟|分钟|分|点|公|折|道"
    ])
</Time-Quantifier-Measure>
WHERE:
  AND(
    *SubSRE(
      NUM1
    ,
      [@Text:
          "1|2"
      ])
  ,
    *SubSRE(
      NUM2
    ,
      [@Text:
          "2|3"
      ]))

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
New(
  Time-Quantifier-Measure
,
  %{GetSingleCapture(
      Get(Time-Quantifier-Measure))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0")
                        ,
                          DoNothing()
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Get(Char).
                              Attr(AnnotationScript.String)))))))))))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0").
                          And(
                            Get(Num2).
                            Attr(Span.Length).
                            Matches(
                              =2)).
                          And(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(0)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "十")))
                        ,
                          If(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(00))
                          ,
                            Modify(
                              Get(Num2).
                              Attr(Span.Text)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "百")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "0").
                              And(
                                Get(Num2).
                                Attr(Span.Length).
                                Matches(
                                  =3)).
                              And(
                                Get(Num2).
                                Attr(Span.Text).
                                Matches(
                                  *EndsWith(0万)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "十")))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Get(Char).
                                  Attr(AnnotationScript.String))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------------------
[Chunk Grammar Rule]
number_approximate_1,2 or 2,3 + 十/线城市
-------------------------------------
== GUID ==
0f964cb4-16f9-42e2-a3c2-c8e9dac2f020

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM2> :
<Time-Quantifier-Measure>
  [@Text:
      "十|线|十万|十分钟"
  ]
</Time-Quantifier-Measure>
WHERE:
  AND(
    *SubSRE(
      NUM1
    ,
      [@Text:
          "1|2"
      ])
  ,
    *SubSRE(
      NUM2
    ,
      [@Text:
          "2|3"
      ]))

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
New(
  Time-Quantifier-Measure
,
  %{GetSingleCapture(
      Get(Time-Quantifier-Measure))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "二")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0")
                        ,
                          DoNothing()
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Get(Char).
                              Attr(AnnotationScript.String)))))))))))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "二")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0").
                          And(
                            Get(Num2).
                            Attr(Span.Length).
                            Matches(
                              =2)).
                          And(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(0)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "十")))
                        ,
                          If(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(00))
                          ,
                            Modify(
                              Get(Num2).
                              Attr(Span.Text)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "百")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "0").
                              And(
                                Get(Num2).
                                Attr(Span.Length).
                                Matches(
                                  =3)).
                              And(
                                Get(Num2).
                                Attr(Span.Text).
                                Matches(
                                  *EndsWith(0万)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "十")))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Get(Char).
                                  Attr(AnnotationScript.String))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

----------------------------------
[Chunk Grammar Rule]
number_approximate_1,2 or 2.3 + 分钟
----------------------------------
== GUID ==
59fbccc4-3cc6-4b96-a65f-be92c046a179

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                *Contains(2|3)
              ,
                *EndsWith(分钟)
              ,
                NOT(
                  *Contains(二|三))))
  ]
</NUM2>
WHERE:
  *SubSRE(
    NUM1
  ,
    [@Text:
        "1|2",
     @Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                AND(
                  *Contains(1|2)
                ,
                  NOT(
                    *Contains(一|二))))
    ])

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0")
                        ,
                          DoNothing()
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Get(Char).
                              Attr(AnnotationScript.String)))))))))))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0").
                          And(
                            Get(Num2).
                            Attr(Span.Length).
                            Matches(
                              =2)).
                          And(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(0)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "十")))
                        ,
                          If(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(00))
                          ,
                            Modify(
                              Get(Num2).
                              Attr(Span.Text)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "百")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "0").
                              And(
                                Get(Num2).
                                Attr(Span.Length).
                                Matches(
                                  =3)).
                              And(
                                Get(Num2).
                                Attr(Span.Text).
                                Matches(
                                  *EndsWith(0万)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "十")))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Get(Char).
                                  Attr(AnnotationScript.String)))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

------------------------
[Chunk Grammar Rule]
number_approximate_10余/多
------------------------
== GUID ==
fdf0ec03-59c8-45f5-8ffd-30d6a5a511df

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET> :
[@Text:
    "余|多"
]
WHERE:
  *SubSRE(
    TARGET
  ,
    AND(
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]_@n)
      ]
    ,
      [@Text:
          "10|20|30|40|50|60|70|80|90"
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            " 十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九")))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

----------------------------------------------------
[Chunk Grammar Rule]
number_approximate_3 to 9 + CHS bai-qian-wan-yi/TIME
----------------------------------------------------
== GUID ==
60b7eff6-2a61-41d5-a9a0-c7c41a121fc6

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  OR(
    [@Annotations:
        OR(
          Tokenization.TokenName=
            "NUMBER"
        ,
          OR(
            Syntax.Analyses=
              *Contains(
                Morphology.POS=
                  "Num")
          ,
            OR(
              Tokenization.TokenName=
                "TIME"
            ,
              Tokenization.TokenName=
                "CURRENCY")))
    ]
  ,
    [@Text:
        "4千米|4公斤|4米|4公里|4千克|4小时|4厘米|4毫米|4秒|5千米|5公斤|5米|5公里|5小时|5千克|5厘米|5毫米|5秒|6千米|6公斤|6米|6公里|6千克|6小时|6厘米|6毫米|6秒|7千米|7公斤|7米|7公里|7小时|7千克|7厘米|7毫米|7秒|8千米|8公斤|8米|8公里|8千克|8小时|8厘米|8毫米|8秒|9千米|9公斤|9米|9公里|9小时|9千克|9厘米|9毫米|9秒|4斤|5斤|6斤|7斤|8斤|9斤|4万吨|5万吨|6万吨|7万吨|8万吨|9万吨|4吨|5吨|6吨|7吨|8吨|9吨|4千斤|5千斤|6千斤|7千斤|8千斤|9千斤"
    ])
</NUM2>
WHERE:
  AND(
    *SubSRE(
      NUM1
    ,
      [@Text:
          "3|4|5|6|7|8",
       @Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  AND(
                    *Contains(3|4|5|6|7|8)
                  ,
                    NOT(
                      *Contains(三|四|五|六|七|八|九))))
      ])
  ,
    *SubSRE(
      NUM2
    ,
      OR(
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    AND(
                      *Contains(4|5|6|7|8|9)
                    ,
                      *EndsWith(百|千|万|亿|点钟|千亿元|千元|万元|亿元|百元)
                    ,
                      NOT(
                        *Contains(四|五|六|七|八|九))))
        ]
      ,
        [@Text:
            "4千米|4公斤|4米|4公里|4千克|4小时|4厘米|4毫米|4秒|5千米|5公斤|5米|5公里|5小时|5千克|5厘米|5毫米|5秒|6千米|6公斤|6米|6公里|6千克|6小时|6厘米|6毫米|6秒|7千米|7公斤|7米|7公里|7小时|7千克|7厘米|7毫米|7秒|8千米|8公斤|8米|8公里|8千克|8小时|8厘米|8毫米|8秒|9千米|9公斤|9米|9公里|9小时|9千克|9厘米|9毫米|9秒|4斤|5斤|6斤|7斤|8斤|9斤|4万吨|5万吨|6万吨|7万吨|8万吨|9万吨|4吨|5吨|6吨|7吨|8吨|9吨|4千斤|5千斤|6千斤|7千斤|8千斤|9千斤"
        ])))

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0")
                        ,
                          DoNothing()
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Get(Char).
                              Attr(AnnotationScript.String)))))))))))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0").
                          And(
                            Get(Num2).
                            Attr(Span.Length).
                            Matches(
                              =2)).
                          And(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(0)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "十")))
                        ,
                          If(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(00))
                          ,
                            Modify(
                              Get(Num2).
                              Attr(Span.Text)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "百")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "0").
                              And(
                                Get(Num2).
                                Attr(Span.Length).
                                Matches(
                                  =3)).
                              And(
                                Get(Num2).
                                Attr(Span.Text).
                                Matches(
                                  *EndsWith(0万)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "十")))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Get(Char).
                                  Attr(AnnotationScript.String))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------------
[Chunk Grammar Rule]
number_approximate_3 to 9 + CHS shi
-----------------------------------
== GUID ==
f8cfdefd-1ca7-4d50-a8cc-4fe0312b0f93

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM2> :
<shi-bai-qian-wan-yi>
  [@Text:
      "十|十万"
  ]
</shi-bai-qian-wan-yi>
WHERE:
  AND(
    *SubSRE(
      NUM1
    ,
      [@Text:
          "3|4|5|6|7|8",
       @Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  AND(
                    *Contains(3|4|5|6|7|8|9)
                  ,
                    NOT(
                      *Contains(三|四|五|六|七|八|九))))
      ])
  ,
    *SubSRE(
      NUM2
    ,
      [@Text:
          "4|5|6|7|8|9",
       @Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  AND(
                    *Contains(4|5|6|7|8|9)
                  ,
                    NOT(
                      *Contains(四|五|六|七|八|九))))
      ]))

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
New(
  shi-bai-qian-wan-yi
,
  %{GetSingleCapture(
      Get(shi-bai-qian-wan-yi))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "二")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0")
                        ,
                          DoNothing()
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Get(Char).
                              Attr(AnnotationScript.String)))))))))))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "二")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0").
                          And(
                            Get(Num2).
                            Attr(Span.Length).
                            Matches(
                              =2)).
                          And(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(0)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "十")))
                        ,
                          If(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(00))
                          ,
                            Modify(
                              Get(Num2).
                              Attr(Span.Text)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "百")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "0").
                              And(
                                Get(Num2).
                                Attr(Span.Length).
                                Matches(
                                  =3)).
                              And(
                                Get(Num2).
                                Attr(Span.Text).
                                Matches(
                                  *EndsWith(0万)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "十")))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Get(Char).
                                  Attr(AnnotationScript.String))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

------------------------------
[Chunk Grammar Rule]
number_approximate_3 to 9 + 分钟
------------------------------
== GUID ==
1b770a19-6ce3-442d-b568-e981057b4275

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  [@Text:
      "4分钟|5分钟|6分钟|7分钟|8分钟|9分钟",
   @Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                *Contains(4|5|6|7|8|9)
              ,
                *EndsWith(分钟)
              ,
                NOT(
                  "四|五|六|七|八|九")))
  ]
</NUM2>
WHERE:
  *SubSRE(
    NUM1
  ,
    [@Text:
        "3|4|5|6|7|8|9",
     @Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                AND(
                  "3|4|5|6|7|8|9"
                ,
                  NOT(
                    "三|四|五|六|七|八|九")))
    ])

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0")
                        ,
                          DoNothing()
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Get(Char).
                              Attr(AnnotationScript.String)))))))))))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0").
                          And(
                            Get(Num2).
                            Attr(Span.Length).
                            Matches(
                              =2)).
                          And(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(0)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "十")))
                        ,
                          If(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(00))
                          ,
                            Modify(
                              Get(Num2).
                              Attr(Span.Text)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "百")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "0").
                              And(
                                Get(Num2).
                                Attr(Span.Length).
                                Matches(
                                  =3)).
                              And(
                                Get(Num2).
                                Attr(Span.Text).
                                Matches(
                                  *EndsWith(0万)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "十")))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Get(Char).
                                  Attr(AnnotationScript.String))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------------------------------
[Chunk Grammar Rule]
number_approximate_3 to 9+time-quantifier-measure
-------------------------------------------------
== GUID ==
95a714f7-6c32-43a9-87e4-0312fd492844

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM2> :
<Time-Quantifier-Measure>
  OR(
    AND(
      [@Annotations:
          OR(
            Tokenization.TokenName=
              "QUANTIFIER|TIME|MEASURE"
          ,
            Syntax.Analyses=
              *Contains(
                Morphology.POS=
                  "Measure|Time|Quantifier"))
      ]
    ,
      NOT(
        [@Text:
            "类|项|组|日|级|年代|等|层|届|号|班|月"
        ]))
  ,
    [@Text:
        "成新|点钟|分|点|公|折|道|线"
    ])
</Time-Quantifier-Measure>
WHERE:
  AND(
    *SubSRE(
      NUM1
    ,
      [@Text:
          "3|4|5|6|7|8|9",
       @Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  AND(
                    *Contains(3|4|5|6|7|8)
                  ,
                    NOT(
                      *Contains(三|四|五|六|七|八))))
      ])
  ,
    *SubSRE(
      NUM2
    ,
      [@Text:
          "4|5|6|7|8|9",
       @Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  AND(
                    *Contains(4|5|6|7|8|9)
                  ,
                    NOT(
                      *Contains(四|五|六|七|八|九))))
      ]))

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
New(
  Time-Quantifier-Measure
,
  %{GetSingleCapture(
      Get(Time-Quantifier-Measure))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0")
                        ,
                          DoNothing()
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Get(Char).
                              Attr(AnnotationScript.String)))))))))))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "2")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "3")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0").
                          And(
                            Get(Num2).
                            Attr(Span.Length).
                            Matches(
                              =2)).
                          And(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(0)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "十")))
                        ,
                          If(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(00))
                          ,
                            Modify(
                              Get(Num2).
                              Attr(Span.Text)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "百")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "0").
                              And(
                                Get(Num2).
                                Attr(Span.Length).
                                Matches(
                                  =3)).
                              And(
                                Get(Num2).
                                Attr(Span.Text).
                                Matches(
                                  *EndsWith(0万)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "十")))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Get(Char).
                                  Attr(AnnotationScript.String))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------------------------------
[Chunk Grammar Rule]
number_approximate_9,10 + time-quantifier-measure
-------------------------------------------------
== GUID ==
43725c57-6cd4-4a2c-84b9-0bbc924ee340

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM2> :
<Time-Quantifier-Measure>
  OR(
    AND(
      [@Annotations:
          OR(
            Tokenization.TokenName=
              "QUANTIFIER|TIME|MEASURE"
          ,
            Syntax.Analyses=
              *Contains(
                Morphology.POS=
                  "Measure|Time|Quantifier"))
      ]
    ,
      NOT(
        [@Text:
            "类|级|年代|等|层|届|号|班|月"
        ]))
  ,
    [@Text:
        "成新|点钟|分钟|分|点|公|折|道"
    ])
</Time-Quantifier-Measure>
WHERE:
  AND(
    *SubSRE(
      NUM1
    ,
      [@Text:
          "9"
      ])
  ,
    *SubSRE(
      NUM2
    ,
      [@Text:
          "10"
      ]))

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
New(
  Time-Quantifier-Measure
,
  %{GetSingleCapture(
      Get(Time-Quantifier-Measure))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "9")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "九十"))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "10")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "十")))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------
[Chunk Grammar Rule]
number_approximate_9,10公里
-------------------------
== GUID ==
a20f78de-af5f-41a3-9cf6-ada788920e61

== DESCRIPTION ==
This rule targets CHS character 采 (cai) incorrectly used in the word 风彩 (fengcai). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "9")
  ]
</TARGET> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "10公里")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  PUNC
,
  %{GetSingleCapture(
      Get(PUNC))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1)).
    Append(
      Get(PUNC))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "九十公里"))})}

-------------------------
[Chunk Grammar Rule]
number_approximate_9,10毫米
-------------------------
== GUID ==
af029206-63fc-4b89-8c0f-469a90d8b5d5

== DESCRIPTION ==
This rule targets CHS character 采 (cai) incorrectly used in the word 风彩 (fengcai). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "9")
  ]
</TARGET> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "10毫米")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  PUNC
,
  %{GetSingleCapture(
      Get(PUNC))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1)).
    Append(
      Get(PUNC))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "九十毫米"))})}

------------------------
[Chunk Grammar Rule]
number_approximate_9,10秒
------------------------
== GUID ==
23829186-a0f5-4137-8f63-9aaaa5d14782

== DESCRIPTION ==
This rule targets CHS character 采 (cai) incorrectly used in the word 风彩 (fengcai). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "9")
  ]
</TARGET> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "10秒")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  PUNC
,
  %{GetSingleCapture(
      Get(PUNC))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target1)).
    Append(
      Get(PUNC))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "九十秒"))})}

----------------------------------------------------
[Chunk Grammar Rule]
number_approximate_CHS 1,2 + time-quantifier-measure
----------------------------------------------------
== GUID ==
6b1ccfa7-9d6e-4bca-95fe-d2c286ed9e76

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<Time-Quantifier-Measure>
  OR(
    AND(
      [@Annotations:
          OR(
            Tokenization.TokenName=
              "QUANTIFIER|TIME|MEASURE"
          ,
            Syntax.Analyses=
              *Contains(
                Morphology.POS=
                  "Measure|Time|Quantifier"))
      ]
    ,
      NOT(
        [@Text:
            "年|层|线|号|楼|届|级|类|年代|等|月|班"
        ]))
  ,
    AND(
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Morphology.POS=
                "Noun")
      ]
    ,
      [@Text:
          "周"
      ]))
</Time-Quantifier-Measure>
WHERE:
  *SubSRE(
    NUM1
  ,
    [@Text:
        "一二",
     @Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                AND(
                  *Contains(一二)
                ,
                  NOT(
                    "十一|一二十|十一二")))
    ])

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Time-Quantifier-Measure
,
  %{GetSingleCapture(
      Get(Time-Quantifier-Measure))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "一二")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一两")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "二")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "0")
          ,
            DoNothing()
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Get(Char).
                Attr(AnnotationScript.String)))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList()
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------------------------------------------------
[Chunk Grammar Rule]
number_approximate_CHS 1,2 or 2,3 + punc +  time-quantifier-measure
-------------------------------------------------------------------
== GUID ==
b5c5882d-4ffa-4ee6-a95c-15551129a6a7

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<PUNC>
  [@Text:
      "、|，|\,"
  ]
</PUNC> :
<NUM2>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM2> :
<Time-Quantifier-Measure>
  AND(
    [@Annotations:
        OR(
          Tokenization.TokenName=
            "QUANTIFIER|TIME|MEASURE"
        ,
          Syntax.Analyses=
            *Contains(
              Morphology.POS=
                "Measure|Time|Quantifier"))
    ]
  ,
    NOT(
      [@Text:
          "句|层|届|号|类|级|年代|等|月|班"
      ]))
</Time-Quantifier-Measure>
WHERE:
  AND(
    *SubSRE(
      NUM1
    ,
      [@Text:
          "一|二",
       @Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  AND(
                    *Contains(一|二)
                  ,
                    NOT(
                      *Contains(1|2|十))))
      ])
  ,
    *SubSRE(
      NUM2
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  AND(
                    *Contains(二|三)
                  ,
                    NOT(
                      *Contains(2|3|十))))
      ]))

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Num2
,
  %{GetSingleCapture(
      Get(NUM2))})
.
New(
  Punc
,
  %{GetSingleCapture(
      Get(PUNC))})
.
New(
  Time-Quantifier-Measure
,
  %{GetSingleCapture(
      Get(Time-Quantifier-Measure))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "一")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "二")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0")
                        ,
                          DoNothing()
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Get(Char).
                              Attr(AnnotationScript.String))))))))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num2))}.
    ToCharList()
  ,
    Region(
      Num2 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "1")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "一")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "二")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "三")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "三")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "4")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "四")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "5")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "五")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "6")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "六")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "7")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "七")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "8")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "八")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "9")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "九")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "0").
                          And(
                            Get(Num2).
                            Attr(Span.Length).
                            Matches(
                              =2)).
                          And(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(0)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "十")))
                        ,
                          If(
                            Get(Num2).
                            Attr(Span.Text).
                            Matches(
                              *EndsWith(00))
                          ,
                            Modify(
                              Get(Num2).
                              Attr(Span.Text)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "百")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "0").
                              And(
                                Get(Num2).
                                Attr(Span.Length).
                                Matches(
                                  =3)).
                              And(
                                Get(Num2).
                                Attr(Span.Text).
                                Matches(
                                  *EndsWith(0万)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "十")))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Get(Char).
                                  Attr(AnnotationScript.String))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList().
    Append(
      Get(Punc)).
    Append(
      Get(Num2))
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

----------------------------------------------------
[Chunk Grammar Rule]
number_approximate_CHS 2,3 + time-quantifier-measure
----------------------------------------------------
== GUID ==
fbe234a8-dad0-492c-8c96-bc7c7f1a5573

== PATTERN ==
<NUM1>
  [@Annotations:
      OR(
        Tokenization.TokenName=
          "NUMBER"
      ,
        Syntax.Analyses=
          *Contains(
            Morphology.POS=
              "Num"))
  ]
</NUM1> :
<Time-Quantifier-Measure>
  AND(
    [@Annotations:
        OR(
          Tokenization.TokenName=
            "QUANTIFIER|TIME|MEASURE"
        ,
          OR(
            Syntax.Analyses=
              *Contains(
                Morphology.POS=
                  "Measure|Time|Quantifier")
          ,
            AND(
              Syntax.Analyses=
                *Contains(
                  Morphology.POS=
                    "Ptcl")
            ,
              Syntax.Analyses=
                *Contains(
                  Normalization.Result=
                    NormalizedForm=
                      "把"))))
    ]
  ,
    NOT(
      [@Text:
          "层|届|号|项|类|级|年代|等|班|月"
      ]))
</Time-Quantifier-Measure>
WHERE:
  *SubSRE(
    NUM1
  ,
    [@Text:
        "二三",
     @Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                AND(
                  *Contains(二三)
                ,
                  NOT(
                    "十二|二三十")))
    ])

== ACTION ==
New(
  Num1
,
  %{GetSingleCapture(
      Get(NUM1))})
.
New(
  Time-Quantifier-Measure
,
  %{GetSingleCapture(
      Get(Time-Quantifier-Measure))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Num1))}.
    ToCharList()
  ,
    Region(
      Num1 Body
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "二三")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "两三")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "二")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "两")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "0")
          ,
            DoNothing()
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Get(Char).
                Attr(AnnotationScript.String)))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Num1).
    ToList()
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

------------------------------------
[Chunk Grammar Rule]
number_approximate_CHS ersanfenzhong
------------------------------------
== GUID ==
0637f9fa-be7a-4b69-946c-5f4a70c13a15

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三分钟"
              ,
                NOT(
                  "十二三分钟")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三分钟"))})}

-------------------------------
[Chunk Grammar Rule]
number_approximate_CHS ersanwan
-------------------------------
== GUID ==
b13e257a-e2aa-4faa-8e5b-84a02acf1744

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三万"
              ,
                NOT(
                  "十二三万")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三万"))})}

------------------------------
[Chunk Grammar Rule]
number_approximate_CHS ersanyi
------------------------------
== GUID ==
95e997c5-5c5b-4fc0-af9c-b5532f2172a3

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三亿"
              ,
                NOT(
                  "十二三亿")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三亿"))})}

-----------------------------------
[Chunk Grammar Rule]
number_approximate_CHS yierfenzhong
-----------------------------------
== GUID ==
5b85b200-0c39-4630-88fe-9409fec287a4

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二分钟"
              ,
                NOT(
                  "十一二分钟")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两分钟"))})}

-------------------------------
[Chunk Grammar Rule]
number_approximate_CHS yierqian
-------------------------------
== GUID ==
48f3d8aa-346f-49e8-bb9b-d40149fadaea

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二千"
              ,
                NOT(
                  "十一二千")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两千"))})}

------------------------------
[Chunk Grammar Rule]
number_approximate_CHS yierwan
------------------------------
== GUID ==
1e560fbc-6c0e-4af1-b8a0-1d89a00afcb3

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二万"
              ,
                NOT(
                  "十一二万")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两万"))})}

-----------------------------
[Chunk Grammar Rule]
number_approximate_CHS yieryi
-----------------------------
== GUID ==
b3c575e3-ca43-486f-ac8e-4dc0935cf987

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二亿"
              ,
                NOT(
                  "十一二亿")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两亿"))})}

----------------------------
[Chunk Grammar Rule]
number_approximate_CHS 一二万公斤
----------------------------
== GUID ==
d890f346-5884-4dfe-b3db-aefbab264d0c

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二万公斤"
              ,
                NOT(
                  "十一二万公斤")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两万公斤"))})}

---------------------------
[Chunk Grammar Rule]
number_approximate_CHS 一二千万
---------------------------
== GUID ==
ceb96808-a9db-44b4-9c3f-29a0d9afaf15

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二千万"
              ,
                NOT(
                  "十一二千万")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两千万"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS一二公斤
--------------------------
== GUID ==
e12af2ed-8437-4071-a1ca-24670794a4f2

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二公斤"
              ,
                NOT(
                  "十一二公斤")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两公斤"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS一二公里
--------------------------
== GUID ==
ebe95dbf-694c-4a5c-ae90-2a230d71ef38

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二公里"
              ,
                NOT(
                  "十一二公里")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两公里"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS一二千斤
--------------------------
== GUID ==
ab8f4c05-e213-4584-9588-eff7985765d4

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二千斤"
              ,
                NOT(
                  "十一二千斤")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两千斤"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS一二千米
--------------------------
== GUID ==
a3e9fffa-e83b-4e8d-b8aa-e4b37afcbf15

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二千米"
              ,
                NOT(
                  "十一二千米")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两千米"))})}

-------------------------
[Chunk Grammar Rule]
number_approximate_CHS一二吨
-------------------------
== GUID ==
9f6ddb21-e089-43c7-b94b-7923e70cd4c9

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二吨"
              ,
                NOT(
                  "十一二吨")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两吨"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS一二小时
--------------------------
== GUID ==
bf15e430-a792-44a9-8dcd-1b0789b2dc19

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二小时"
              ,
                NOT(
                  "十一二小时")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两小时"))})}

-------------------------
[Chunk Grammar Rule]
number_approximate_CHS一二年
-------------------------
== GUID ==
6e27ca97-27dc-41d7-aa43-35429af9de69

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二"
              ,
                NOT(
                  "十一二")))
  ]
</TARGET1> :
[@Text:
    "年"
]

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS一二毫米
--------------------------
== GUID ==
f7348ef0-3989-4333-9999-f48807f7cb1d

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二毫米"
              ,
                NOT(
                  "十一二毫米")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两毫米"))})}

-------------------------
[Chunk Grammar Rule]
number_approximate_CHS一二秒
-------------------------
== GUID ==
570dfeae-de56-4b72-ba8c-9dc6cf82aa8a

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "一二秒"
              ,
                NOT(
                  "十一二秒")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "一两秒"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS二三公斤
--------------------------
== GUID ==
3a4d4835-5cd3-4128-a7c9-9893ac2f31b6

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三公斤"
              ,
                NOT(
                  "十二三公斤")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三公斤"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS二三公里
--------------------------
== GUID ==
eb6cacfa-58d6-42bf-bbd1-8234010c971f

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三公里"
              ,
                NOT(
                  "十二三公里")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三公里"))})}

-------------------------
[Chunk Grammar Rule]
number_approximate_CHS二三千
-------------------------
== GUID ==
60bccc24-c342-4e4f-b5ad-635066a8b4f3

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三千"
              ,
                NOT(
                  "十二三千")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三千"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS二三千一
--------------------------
== GUID ==
9072bd19-0e5e-4302-af1f-dd093d56f3d0

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三千一"
              ,
                NOT(
                  "十二三千一")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三千一"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS二三千万
--------------------------
== GUID ==
8ce71775-c5b3-49b4-8e41-f068bb67e7ed

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三千万"
              ,
                NOT(
                  "十二三千万")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三千万"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS二三千元
--------------------------
== GUID ==
d9137295-90e9-4aed-8507-d13edb4adfd7

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三千元"
              ,
                NOT(
                  "十二三千元")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三千元"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS二三千斤
--------------------------
== GUID ==
12a06abc-da6c-41ad-8815-7ff7618146cb

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三千斤"
              ,
                NOT(
                  "十二三千斤")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三千斤"))})}

--------------------------
[Chunk Grammar Rule]
number_approximate_CHS二三点钟
--------------------------
== GUID ==
4464285c-e678-4e05-8998-768dea5c9e0f

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              AND(
                "二三点钟"
              ,
                NOT(
                  "十二三点钟")))
  ]
</TARGET1>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverChunk(
    Get(Target1)
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "两三点钟"))})}

---------------------
[Chunk Grammar Rule]
number_approximate_ji
---------------------
== GUID ==
6064b21e-5073-4b50-9e69-f41600580d77

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET> :
[@Text:
    "几|几个"
]
WHERE:
  *SubSRE(
    TARGET
  ,
    AND(
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]_@n)
      ]
    ,
      [@Text:
          "10|20|30|40|50|60|70|80|90"
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            " 十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九")))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------------
[Chunk Grammar Rule]
number_approximate_ji_1000-9000
-------------------------------
== GUID ==
50dbb244-1cde-4bd8-9862-92a0e48b5e2d

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET> :
[@Text:
    "几|几个"
]
WHERE:
  *SubSRE(
    TARGET
  ,
    AND(
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]_@n)
      ]
    ,
      [@Text:
          "1000|2000|3000|4000|5000|6000|7000|8000|9000"
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            " 一千")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "两千")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三千")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四千")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五千")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六千")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七千")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八千")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九千")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九")))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------
[Chunk Grammar Rule]
number_approximate_ji_100-900
-----------------------------
== GUID ==
e95dc4ed-6d8c-4f35-8a0c-1ac02df413a0

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET> :
[@Text:
    "几|几个"
]
WHERE:
  *SubSRE(
    TARGET
  ,
    AND(
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]_@n)
      ]
    ,
      [@Text:
          "100|200|300|400|500|600|700|800|900"
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            " 一百")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "两百")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三百")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四百")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五百")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六百")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七百")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八百")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九百")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九")))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

----------------------
[Chunk Grammar Rule]
number_approximate_数10
----------------------
== GUID ==
dfcb1ffc-429a-420c-a129-bd297231b146

== PATTERN ==
[@Text:
    "数"
] :
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET>
WHERE:
  *SubSRE(
    TARGET
  ,
    AND(
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]_@n)
      ]
    ,
      [@Text:
          "10|20|30|40|50|60|70|80|90"
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            " 十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九")))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Approximate Number Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------
[Chunk Grammar Rule]
number_arabic_after_cun
-----------------------
== GUID ==
5d30ec46-022a-4917-bb95-de0a05e4a210

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese 尺寸(chi cun) one digit-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters ,e.g., 五十尺3寸 -> 五十尺三寸.

== PATTERN ==
<TARGET>
  [@Text:
      ^[0,零,０]?[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９]寸?$
  ]
</TARGET>
WHERE:
  *SubSRE(
    Before(TARGET)
  ,
    (
      AND(
        [@Text:
            *EndsWith(尺)
        ]
      ,
        [@Text:
            NOT(
              *Contains(1|2|3|4|5|6|7|8|9|２|３|４|５|６|７|８|９|１))
        ])
      |
      (
        [@Text:
            NOT(
              *Contains(1|2|3|4|5|6|7|8|9|２|３|４|５|６|７|８|９|１))
        ] :
        [@Text:
            *EndsWith(尺)
        ]
      )
    ) :
    #END#)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "十")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "十")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "百")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "百")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "千")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "千")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "万")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "万")))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "十万")
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "十万")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "百万")
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Concat(
                                      Value(
                                        String
                                      ,
                                        "百万")))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "千万")
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "千万")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "亿")
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Concat(
                                          Value(
                                            String
                                          ,
                                            "亿")))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "十亿")
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "十亿")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "百亿")
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Concat(
                                              Value(
                                                String
                                              ,
                                                "百亿")))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "千亿")
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "千亿")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "万亿")
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Concat(
                                                  Value(
                                                    String
                                                  ,
                                                    "万亿")))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "元")
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "元")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "0|零|０")
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Concat(
                                                      Value(
                                                        String
                                                      ,
                                                        "零")))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "秒")
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "秒")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "寸")
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Concat(
                                                          Value(
                                                            String
                                                          ,
                                                            "寸"))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

--------------------------
[Chunk Grammar Rule]
number_arabic_after_double
--------------------------
== GUID ==
87f165e9-020a-40e2-becd-a439b44ad726

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese two-digit-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０][元]?$
  ]
</TARGET>
WHERE:
  AND(
    OR(
      *SubSRE(
        Before(TARGET)
      ,
        (
          (
            NOT(
              [@Text:
                  *Contains(A|双)
              ])
            |
            #START#
          ) :
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *Contains(－|-|.))))
          ] :
          #END#
        )
        |
        (
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *Contains(－|-|.|第|％))))
          ] :
          NOT(
            [@Text:
                *Contains(/|巷|村|点|攻击|路|,|，|为|.|种|血|攻|到|代|－|-|与|的|年|室|厅|栋|楼|叫|房|现在|和|岁|·|月|周|是|至|班|*|节|淘气|区|天|级|支|个|孔|款|快门|诺|次|胜|平|负|打折|筒|下|片|组|国|制|中文|位|多|世纪|年代|男|女|男女|踩|军|师|团|连|单元|企业|或者|或|＊|不是|座|选|比|份|幢|列|辆|套|枚|类|条|行|我|张|只|届|克|家|春|夏|秋|冬|层|′|送|预测|：|:|度|战|败|倍|死|伤|客机|街|卡|中学|部|早|早餐|段|领先|加|等于|日|号|金|门|打|按|期|自|及|项中有|美元|排|分|说|台|市|县|︰|•|х|版|手|大洲|地区|环|间|开|名|乳|英尺|英寸|赠|颗|又|付共|土|～||件|不锈钢|大奖|注|属|直选|中奖|运动|弄|共计|罚|中|合|热线|投|章|等|道|信箱|跨|共|出|恐怕|&|º|闲|赔|页|报|刊|首|以上|系|对|缺|卷|品|股|进|乘|棵|课|艘|篇|在|毛钱|●|快|慢|过|给|主|备|有|差|芯|瓦|超过|把|图像|上|成|项|新界|纲领|看|欧|界|聚苯乙烯|双|菌株|表|瓶|表示|封信成|表格|本|题|小|嫂|字|奈|用|敏|转|变|左右|篮板|讲|姚明|辽宁|重庆|折叠|缸)
            ]) :
          #END#
        ))
    ,
      *SubSRE(
        Before(TARGET)
      ,
        NOT(
          [@Text:
              "每|东|访问"
          ]) :
        [@Text:
            "斤|两|尺|寸|块|元|毛|角|亩"
        ] :
        #END#))
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      NOT(
        [@Text:
            "岁|℃"
        ]))
  ,
    *SubSRE(
      Before(TARGET)
    ,
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_|Z_))
      ] :
      #END#)
  ,
    *SubSRE(
      Before(TARGET)
    ,
      NOT(
        [@Text:
            [\\,一,\／,二,%\(,\s]
        ]) :
      #END#))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "百")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "百")))
                                                          ,
                                                            If(
                                                              Get(Char).
                                                              Attr(AnnotationScript.String).
                                                              Matches(
                                                                "千")
                                                            ,
                                                              Modify(
                                                                Get(Whiteboard).
                                                                Attr(AnnotationScript.String)
                                                              ,
                                                                Concat(
                                                                  Value(
                                                                    String
                                                                  ,
                                                                    "千")))
                                                            ,
                                                              If(
                                                                Get(Char).
                                                                Attr(AnnotationScript.String).
                                                                Matches(
                                                                  "万")
                                                              ,
                                                                Modify(
                                                                  Get(Whiteboard).
                                                                  Attr(AnnotationScript.String)
                                                                ,
                                                                  Concat(
                                                                    Value(
                                                                      String
                                                                    ,
                                                                      "万")))
                                                              ,
                                                                If(
                                                                  Get(Char).
                                                                  Attr(AnnotationScript.String).
                                                                  Matches(
                                                                    "十万")
                                                                ,
                                                                  Modify(
                                                                    Get(Whiteboard).
                                                                    Attr(AnnotationScript.String)
                                                                  ,
                                                                    Concat(
                                                                      Value(
                                                                        String
                                                                      ,
                                                                        "十万")))
                                                                ,
                                                                  If(
                                                                    Get(Char).
                                                                    Attr(AnnotationScript.String).
                                                                    Matches(
                                                                      "百万")
                                                                  ,
                                                                    Modify(
                                                                      Get(Whiteboard).
                                                                      Attr(AnnotationScript.String)
                                                                    ,
                                                                      Concat(
                                                                        Value(
                                                                          String
                                                                        ,
                                                                          "百万")))
                                                                  ,
                                                                    If(
                                                                      Get(Char).
                                                                      Attr(AnnotationScript.String).
                                                                      Matches(
                                                                        "千万")
                                                                    ,
                                                                      Modify(
                                                                        Get(Whiteboard).
                                                                        Attr(AnnotationScript.String)
                                                                      ,
                                                                        Concat(
                                                                          Value(
                                                                            String
                                                                          ,
                                                                            "千万")))
                                                                    ,
                                                                      If(
                                                                        Get(Char).
                                                                        Attr(AnnotationScript.String).
                                                                        Matches(
                                                                          "亿")
                                                                      ,
                                                                        Modify(
                                                                          Get(Whiteboard).
                                                                          Attr(AnnotationScript.String)
                                                                        ,
                                                                          Concat(
                                                                            Value(
                                                                              String
                                                                            ,
                                                                              "亿")))
                                                                      ,
                                                                        If(
                                                                          Get(Char).
                                                                          Attr(AnnotationScript.String).
                                                                          Matches(
                                                                            "十亿")
                                                                        ,
                                                                          Modify(
                                                                            Get(Whiteboard).
                                                                            Attr(AnnotationScript.String)
                                                                          ,
                                                                            Concat(
                                                                              Value(
                                                                                String
                                                                              ,
                                                                                "十亿")))
                                                                        ,
                                                                          If(
                                                                            Get(Char).
                                                                            Attr(AnnotationScript.String).
                                                                            Matches(
                                                                              "百亿")
                                                                          ,
                                                                            Modify(
                                                                              Get(Whiteboard).
                                                                              Attr(AnnotationScript.String)
                                                                            ,
                                                                              Concat(
                                                                                Value(
                                                                                  String
                                                                                ,
                                                                                  "百亿")))
                                                                          ,
                                                                            If(
                                                                              Get(Char).
                                                                              Attr(AnnotationScript.String).
                                                                              Matches(
                                                                                "千亿")
                                                                            ,
                                                                              Modify(
                                                                                Get(Whiteboard).
                                                                                Attr(AnnotationScript.String)
                                                                              ,
                                                                                Concat(
                                                                                  Value(
                                                                                    String
                                                                                  ,
                                                                                    "千亿")))
                                                                            ,
                                                                              If(
                                                                                Get(Char).
                                                                                Attr(AnnotationScript.String).
                                                                                Matches(
                                                                                  "万亿")
                                                                              ,
                                                                                Modify(
                                                                                  Get(Whiteboard).
                                                                                  Attr(AnnotationScript.String)
                                                                                ,
                                                                                  Concat(
                                                                                    Value(
                                                                                      String
                                                                                    ,
                                                                                      "万亿")))
                                                                              ,
                                                                                If(
                                                                                  Get(Char).
                                                                                  Attr(AnnotationScript.String).
                                                                                  Matches(
                                                                                    "元")
                                                                                ,
                                                                                  Modify(
                                                                                    Get(Whiteboard).
                                                                                    Attr(AnnotationScript.String)
                                                                                  ,
                                                                                    Concat(
                                                                                      Value(
                                                                                        String
                                                                                      ,
                                                                                        "元"))))))))))))))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------------
[Chunk Grammar Rule]
number_arabic_after_double_ling
-------------------------------
== GUID ==
0be86b6b-3963-4bc5-a3b8-8ee88c0b3cf8

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese two-digit-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 一千零20-> 一千零二十.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]$
  ]
</TARGET>
WHERE:
  *SubSRE(
    Before(TARGET)
  ,
    AND(
      [@Text:
          *Contains(千零|亿零)
      ]
    ,
      [@Text:
          *Contains(一|二|三|四|五|六|七|八|九)
      ]) :
    #END#)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "百")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "百")))
                                                          ,
                                                            If(
                                                              Get(Char).
                                                              Attr(AnnotationScript.String).
                                                              Matches(
                                                                "千")
                                                            ,
                                                              Modify(
                                                                Get(Whiteboard).
                                                                Attr(AnnotationScript.String)
                                                              ,
                                                                Concat(
                                                                  Value(
                                                                    String
                                                                  ,
                                                                    "千")))
                                                            ,
                                                              If(
                                                                Get(Char).
                                                                Attr(AnnotationScript.String).
                                                                Matches(
                                                                  "万")
                                                              ,
                                                                Modify(
                                                                  Get(Whiteboard).
                                                                  Attr(AnnotationScript.String)
                                                                ,
                                                                  Concat(
                                                                    Value(
                                                                      String
                                                                    ,
                                                                      "万")))
                                                              ,
                                                                If(
                                                                  Get(Char).
                                                                  Attr(AnnotationScript.String).
                                                                  Matches(
                                                                    "十万")
                                                                ,
                                                                  Modify(
                                                                    Get(Whiteboard).
                                                                    Attr(AnnotationScript.String)
                                                                  ,
                                                                    Concat(
                                                                      Value(
                                                                        String
                                                                      ,
                                                                        "十万")))
                                                                ,
                                                                  If(
                                                                    Get(Char).
                                                                    Attr(AnnotationScript.String).
                                                                    Matches(
                                                                      "百万")
                                                                  ,
                                                                    Modify(
                                                                      Get(Whiteboard).
                                                                      Attr(AnnotationScript.String)
                                                                    ,
                                                                      Concat(
                                                                        Value(
                                                                          String
                                                                        ,
                                                                          "百万")))
                                                                  ,
                                                                    If(
                                                                      Get(Char).
                                                                      Attr(AnnotationScript.String).
                                                                      Matches(
                                                                        "千万")
                                                                    ,
                                                                      Modify(
                                                                        Get(Whiteboard).
                                                                        Attr(AnnotationScript.String)
                                                                      ,
                                                                        Concat(
                                                                          Value(
                                                                            String
                                                                          ,
                                                                            "千万")))
                                                                    ,
                                                                      If(
                                                                        Get(Char).
                                                                        Attr(AnnotationScript.String).
                                                                        Matches(
                                                                          "亿")
                                                                      ,
                                                                        Modify(
                                                                          Get(Whiteboard).
                                                                          Attr(AnnotationScript.String)
                                                                        ,
                                                                          Concat(
                                                                            Value(
                                                                              String
                                                                            ,
                                                                              "亿")))
                                                                      ,
                                                                        If(
                                                                          Get(Char).
                                                                          Attr(AnnotationScript.String).
                                                                          Matches(
                                                                            "十亿")
                                                                        ,
                                                                          Modify(
                                                                            Get(Whiteboard).
                                                                            Attr(AnnotationScript.String)
                                                                          ,
                                                                            Concat(
                                                                              Value(
                                                                                String
                                                                              ,
                                                                                "十亿")))
                                                                        ,
                                                                          If(
                                                                            Get(Char).
                                                                            Attr(AnnotationScript.String).
                                                                            Matches(
                                                                              "百亿")
                                                                          ,
                                                                            Modify(
                                                                              Get(Whiteboard).
                                                                              Attr(AnnotationScript.String)
                                                                            ,
                                                                              Concat(
                                                                                Value(
                                                                                  String
                                                                                ,
                                                                                  "百亿")))
                                                                          ,
                                                                            If(
                                                                              Get(Char).
                                                                              Attr(AnnotationScript.String).
                                                                              Matches(
                                                                                "千亿")
                                                                            ,
                                                                              Modify(
                                                                                Get(Whiteboard).
                                                                                Attr(AnnotationScript.String)
                                                                              ,
                                                                                Concat(
                                                                                  Value(
                                                                                    String
                                                                                  ,
                                                                                    "千亿")))
                                                                            ,
                                                                              If(
                                                                                Get(Char).
                                                                                Attr(AnnotationScript.String).
                                                                                Matches(
                                                                                  "万亿")
                                                                              ,
                                                                                Modify(
                                                                                  Get(Whiteboard).
                                                                                  Attr(AnnotationScript.String)
                                                                                ,
                                                                                  Concat(
                                                                                    Value(
                                                                                      String
                                                                                    ,
                                                                                      "万亿")))
                                                                              ,
                                                                                If(
                                                                                  Get(Char).
                                                                                  Attr(AnnotationScript.String).
                                                                                  Matches(
                                                                                    "元")
                                                                                ,
                                                                                  Modify(
                                                                                    Get(Whiteboard).
                                                                                    Attr(AnnotationScript.String)
                                                                                  ,
                                                                                    Concat(
                                                                                      Value(
                                                                                        String
                                                                                      ,
                                                                                        "元"))))))))))))))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

---------------------------------
[Chunk Grammar Rule]
number_arabic_after_hundred_round
---------------------------------
== GUID ==
0b2bab13-2641-4509-a711-bcac487ecce9

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese number-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][0,０]{2}元?$
  ]
</TARGET>
WHERE:
  AND(
    OR(
      *SubSRE(
        Before(TARGET)
      ,
        (
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *Contains(－|-|.|1|2|3|4|5|6|7|8|9|２|３|４|５|６|７|８|９|１))))
          ] :
          #END#
        )
        |
        (
          [@Annotations:
              Tokenization.TokenName=
                "NUMBER"
          ] :
          NOT(
            [@Text:
                *Contains(点|-|左右|项|*|/|年|次|胜|平|负|副|部分|到|至|大洲|文|个|按|张|营|团|军|篇|或|连|居|是|级|变成|月份|＊|和|艘|份|的|滤|门|台|比|差|及|岁|字)
            ]) :
          #END#
        ))
    ,
      *SubSRE(
        Before(TARGET)
      ,
        [@Text:
            "斤|两|尺|寸|块|元|毛|角|亩"
        ] :
        #END#))
  ,
    *SubSRE(
      Before(TARGET)
    ,
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_|Punc))
      ] :
      #END#)
  ,
    *SubSRE(
      Before(TARGET)
    ,
      NOT(
        [@Text:
            [\\,一,%\(,\／,\s]
        ]) :
      #END#))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一百")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二百")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三百")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四百")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五百")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六百")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七百")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八百")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九百")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "元")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "元")))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

--------------------------
[Chunk Grammar Rule]
number_arabic_after_single
--------------------------
== GUID ==
2d53d603-1152-4489-ad23-54e866ab618f

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese one-digit-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters.

== PATTERN ==
<TARGET>
  AND(
    [@Text:
        ^[0,零,０]?[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９]$
    ]
  ,
    [@Annotations:
        Tokenization.TokenName=
          "NUMBER"
    ])
</TARGET>
WHERE:
  AND(
    OR(
      *SubSRE(
        Before(TARGET)
      ,
        (
          (
            NOT(
              [@Text:
                  *Contains(.|A|双)
              ])
            |
            #START#
          ) :
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *Contains(－|.|-|％|一))))
          ] :
          #END#
        )
        |
        (
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *Contains(－|-|.|第))))
          ] :
          NOT(
            [@Text:
                *Contains(/|巷|村|点|攻击|路|,|，|为|.|种|血|攻|到|代|－|-|与|的|年|室|厅|栋|楼|叫|房|现在|和|岁|·|月|周|是|至|班|*|节|淘气|区|天|级|支|个|孔|款|快门|诺|次|胜|平|负|打折|筒|下|片|组|国|制|中文|位|多|世纪|年代|男|女|男女|踩|军|师|团|连|单元|企业|或者|或|＊|不是|座|选|比|份|幢|列|辆|套|枚|类|条|行|张|只|届|克|家|春|夏|秋|冬|层|′|送|预测|：|:|度|战|败|倍|死|伤|客机|街|卡|中学|部|早|早餐|段|领先|加|等于|日|号|金|门|打|按|期|自|及|项中有|美元|排|分|说|台|市|县|︰|•|搂|х|版|手|大洲|地区|环|间|开|名|乳|英尺|英寸|赠|颗|又|～||件|不锈钢|大奖|注|属|直选|中奖|运动|弄|共计|罚|中|合|热线|投|章|等|道|信箱|跨|共|出|恐怕|&|º|闲|赔|页|报|刊|首|以上|系|对|缺|卷|品|股|进|乘|棵|课|艘|篇|在|毛钱|●|快|慢|过|给|主|备|有|差|芯|瓦|超过|把|图像|上|成|项|新界|纲领|看|欧|界|聚苯乙烯|双|菌株|表|瓶|表示|封信成|表格|角|参数|历时|如果|蓝|绿|洞|果子|题|速|转|已经|脏|紫|防|里|屁|篮板|缸|磁头)
            ]) :
          #END#
        ))
    ,
      *SubSRE(
        Before(TARGET)
      ,
        NOT(
          [@Text:
              "每"
          ]) :
        [@Text:
            "斤|两|尺|寸|元|毛|角|亩|块"
        ] :
        AND(
          NOT(
            [@Text:
                *Contains(1|2|3|4|5|6|7|8|9|２|３|４|５|６|７|８|９|１)
            ])
        ,
          [@Annotations:
              Tokenization.TokenName=
                "NUMBER"
          ]) :
        #END#))
  ,
    NOT(
      *SubSRE(
        Before(TARGET)
      ,
        (
          AND(
            [@Annotations:
                Tokenization.TokenName=
                  "TIME"
            ]
          ,
            [@Text:
                [上午][1|2|3|4|5|6|7|8|9][0|1|2]点
            ])
          |
          (
            [@Text:
                *Contains(1|2|3|4|5|6|7|8|9)
            ] :
            [@Text:
                "年"
            ]
          )
        ) :
        [@Text:
            "零"
        ] :
        #END#))
  ,
    *SubSRE(
      Before(TARGET)
    ,
      NOT(
        [@Text:
            [\\,\／,晨,\s]
        ]) :
      #END#)
  ,
    *SubSRE(
      Before(TARGET)
    ,
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_))
      ] :
      #END#)
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_))
      ])
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      NOT(
        [@Text:
            "岁|一"
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "十")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "十")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "百")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "百")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "千")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "千")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "万")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "万")))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "十万")
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "十万")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "百万")
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Concat(
                                      Value(
                                        String
                                      ,
                                        "百万")))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "千万")
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "千万")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "亿")
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Concat(
                                          Value(
                                            String
                                          ,
                                            "亿")))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "十亿")
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "十亿")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "百亿")
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Concat(
                                              Value(
                                                String
                                              ,
                                                "百亿")))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "千亿")
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "千亿")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "万亿")
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Concat(
                                                  Value(
                                                    String
                                                  ,
                                                    "万亿")))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "元")
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "元")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "0|零|０")
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Concat(
                                                      Value(
                                                        String
                                                      ,
                                                        "零")))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "秒")
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "秒")))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------------
[Chunk Grammar Rule]
number_arabic_after_single_ling
-------------------------------
== GUID ==
608ebcba-59ea-4e19-9249-ff9c33564123

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese one-digit-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 一千零1 ->  一千零一.

== PATTERN ==
<TARGET>
  AND(
    [@Text:
        ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９]$
    ]
  ,
    [@Annotations:
        Tokenization.TokenName=
          "NUMBER"
    ])
</TARGET>
WHERE:
  *SubSRE(
    Before(TARGET)
  ,
    AND(
      [@Text:
          *Contains(千零|百零)
      ]
    ,
      [@Text:
          *Contains(一|二|三|四|五|六|七|八|九)
      ]) :
    #END#)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "十")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "十")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "百")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "百")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "千")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "千")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "万")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "万")))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "十万")
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "十万")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "百万")
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Concat(
                                      Value(
                                        String
                                      ,
                                        "百万")))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "千万")
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "千万")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "亿")
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Concat(
                                          Value(
                                            String
                                          ,
                                            "亿")))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "十亿")
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "十亿")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "百亿")
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Concat(
                                              Value(
                                                String
                                              ,
                                                "百亿")))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "千亿")
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "千亿")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "万亿")
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Concat(
                                                  Value(
                                                    String
                                                  ,
                                                    "万亿")))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "元")
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "元")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "0|零|０")
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Concat(
                                                      Value(
                                                        String
                                                      ,
                                                        "零")))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "秒")
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "秒")))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

----------------------------------
[Chunk Grammar Rule]
number_arabic_after_thousand_round
----------------------------------
== GUID ==
7dda19bd-b990-43cd-a9a8-0f89b4f3dde9

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese number-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][0,０]{3}元?$
  ]
</TARGET>
WHERE:
  AND(
    OR(
      *SubSRE(
        Before(TARGET)
      ,
        (
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *Contains(－|-|.|1|2|3|4|5|6|7|8|9|２|３|４|５|６|７|８|９|１))))
          ] :
          #END#
        )
        |
        (
          [@Annotations:
              Tokenization.TokenName=
                "NUMBER"
          ] :
          NOT(
            [@Text:
                *Contains(点|-|左右|项|*|/|年|次|胜|平|负|副|部分|到|至|大洲|文|个|按|张|营|团|军|篇|或|连|居|是|级|变成|月份|＊|和|艘|份|的|滤|门|台|比|差|及)
            ]) :
          #END#
        ))
    ,
      *SubSRE(
        Before(TARGET)
      ,
        [@Text:
            "斤|两|尺|寸|块|元|毛|角|亩"
        ] :
        #END#))
  ,
    *SubSRE(
      Before(TARGET)
    ,
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_))
      ] :
      #END#)
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_))
      ])
  ,
    *SubSRE(
      Before(TARGET)
    ,
      NOT(
        [@Text:
            [\\,\／,%\(,一,\s]
        ]) :
      #END#))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一千")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二千")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三千")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四千")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五千")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六千")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七千")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八千")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九千")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "元")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "元")))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

---------------------------
[Chunk Grammar Rule]
number_arabic_before_double
---------------------------
== GUID ==
e347cf5e-d3f2-4540-bdd2-2eafd1f56c3d

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese two-digit-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]$
  ]
</TARGET>
WHERE:
  AND(
    OR(
      *SubSRE(
        After(TARGET)
      ,
        (
          #START# :
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *StartsWith(－|-|第|两|％))))
          ] :
          [@Text:
              NOT(
                "紫|男|女|个|人|大关")
          ]
        )
        |
        (
          #START# :
          NOT(
            [@Text:
                *Contains(点|/|为|血|攻击|攻|到|－|-|这|年|栋|村|室|厅|楼|叫|房|岁|和|·|月|周|至|人|班|从|操盘手|*|节|淘气|区|天|级|绝|支|个|孔|款|快门|次|胜|平|负|打折|下|片|组|国|制|中文|位|多|世纪|年代|与|男女|踩|军|师|团|连|单元|或者|或|刀|＊|不是|折|选|比|幢|列|辆|那|亩|套|枚|增产|类|条|男|女|张|的|群|只|届|晋|克|家|夏及|春|夏|秋|冬|层|分|送|预测|：|:|度|战|败|倍|死|伤|客机|街|卡|中学|部|早|早餐|段|领先|加|等于|日|号|金|门|打|按|期|种|自|及|项中有|美元|排|说|台|市|县|︰|•|х|版|手|大洲|地区|环|间|开|名|乳|英尺|英寸|赠|颗|是|又|～||路|件|不锈钢|大奖|注|属|直选|中奖|运动|弄|共计|罚|中|合|热线|投|章|等|道|信箱|跨|共|出|座|恐怕|&|º|闲|赔|页|报|刊|首|以上|系|对|缺|卷|品|股|进|乘|课|艘|篇|在|●|棵|快|慢|过|给|主|备|有|差|行|芯|瓦|超过|把|图像|上|成|项|新界|纲领|看|欧|界|聚苯乙烯|双|菌株|表|瓶|表示|封信成|表格|块|本|字|转|场|改|用|力|变|左右|篮板|讲|险|缸|波)
            ]) :
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *StartsWith(第))))
          ]
        ))
    ,
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Text:
            "斤|尺|寸|元|毛|角|亩|筒|块"
        ] :
        AND(
          NOT(
            [@Text:
                *Contains(1|2|3|4|5|6|7|8|9|２|３|４|５|６|７|８|９|１)
            ])
        ,
          [@Annotations:
              Tokenization.TokenName=
                "NUMBER"
          ])))
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_))
      ])
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      NOT(
        [@Text:
            [\\,亩,一,\′,%\(,\／,\s]
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "百")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "百")))
                                                          ,
                                                            If(
                                                              Get(Char).
                                                              Attr(AnnotationScript.String).
                                                              Matches(
                                                                "千")
                                                            ,
                                                              Modify(
                                                                Get(Whiteboard).
                                                                Attr(AnnotationScript.String)
                                                              ,
                                                                Concat(
                                                                  Value(
                                                                    String
                                                                  ,
                                                                    "千")))
                                                            ,
                                                              If(
                                                                Get(Char).
                                                                Attr(AnnotationScript.String).
                                                                Matches(
                                                                  "万")
                                                              ,
                                                                Modify(
                                                                  Get(Whiteboard).
                                                                  Attr(AnnotationScript.String)
                                                                ,
                                                                  Concat(
                                                                    Value(
                                                                      String
                                                                    ,
                                                                      "万")))
                                                              ,
                                                                If(
                                                                  Get(Char).
                                                                  Attr(AnnotationScript.String).
                                                                  Matches(
                                                                    "十万")
                                                                ,
                                                                  Modify(
                                                                    Get(Whiteboard).
                                                                    Attr(AnnotationScript.String)
                                                                  ,
                                                                    Concat(
                                                                      Value(
                                                                        String
                                                                      ,
                                                                        "十万")))
                                                                ,
                                                                  If(
                                                                    Get(Char).
                                                                    Attr(AnnotationScript.String).
                                                                    Matches(
                                                                      "百万")
                                                                  ,
                                                                    Modify(
                                                                      Get(Whiteboard).
                                                                      Attr(AnnotationScript.String)
                                                                    ,
                                                                      Concat(
                                                                        Value(
                                                                          String
                                                                        ,
                                                                          "百万")))
                                                                  ,
                                                                    If(
                                                                      Get(Char).
                                                                      Attr(AnnotationScript.String).
                                                                      Matches(
                                                                        "千万")
                                                                    ,
                                                                      Modify(
                                                                        Get(Whiteboard).
                                                                        Attr(AnnotationScript.String)
                                                                      ,
                                                                        Concat(
                                                                          Value(
                                                                            String
                                                                          ,
                                                                            "千万")))
                                                                    ,
                                                                      If(
                                                                        Get(Char).
                                                                        Attr(AnnotationScript.String).
                                                                        Matches(
                                                                          "亿")
                                                                      ,
                                                                        Modify(
                                                                          Get(Whiteboard).
                                                                          Attr(AnnotationScript.String)
                                                                        ,
                                                                          Concat(
                                                                            Value(
                                                                              String
                                                                            ,
                                                                              "亿")))
                                                                      ,
                                                                        If(
                                                                          Get(Char).
                                                                          Attr(AnnotationScript.String).
                                                                          Matches(
                                                                            "十亿")
                                                                        ,
                                                                          Modify(
                                                                            Get(Whiteboard).
                                                                            Attr(AnnotationScript.String)
                                                                          ,
                                                                            Concat(
                                                                              Value(
                                                                                String
                                                                              ,
                                                                                "十亿")))
                                                                        ,
                                                                          If(
                                                                            Get(Char).
                                                                            Attr(AnnotationScript.String).
                                                                            Matches(
                                                                              "百亿")
                                                                          ,
                                                                            Modify(
                                                                              Get(Whiteboard).
                                                                              Attr(AnnotationScript.String)
                                                                            ,
                                                                              Concat(
                                                                                Value(
                                                                                  String
                                                                                ,
                                                                                  "百亿")))
                                                                          ,
                                                                            If(
                                                                              Get(Char).
                                                                              Attr(AnnotationScript.String).
                                                                              Matches(
                                                                                "千亿")
                                                                            ,
                                                                              Modify(
                                                                                Get(Whiteboard).
                                                                                Attr(AnnotationScript.String)
                                                                              ,
                                                                                Concat(
                                                                                  Value(
                                                                                    String
                                                                                  ,
                                                                                    "千亿")))
                                                                            ,
                                                                              If(
                                                                                Get(Char).
                                                                                Attr(AnnotationScript.String).
                                                                                Matches(
                                                                                  "万亿")
                                                                              ,
                                                                                Modify(
                                                                                  Get(Whiteboard).
                                                                                  Attr(AnnotationScript.String)
                                                                                ,
                                                                                  Concat(
                                                                                    Value(
                                                                                      String
                                                                                    ,
                                                                                      "万亿")))
                                                                              ,
                                                                                If(
                                                                                  Get(Char).
                                                                                  Attr(AnnotationScript.String).
                                                                                  Matches(
                                                                                    "元")
                                                                                ,
                                                                                  Modify(
                                                                                    Get(Whiteboard).
                                                                                    Attr(AnnotationScript.String)
                                                                                  ,
                                                                                    Concat(
                                                                                      Value(
                                                                                        String
                                                                                      ,
                                                                                        "元")))
                                                                                ,
                                                                                  If(
                                                                                    Get(Char).
                                                                                    Attr(AnnotationScript.String).
                                                                                    Matches(
                                                                                      "秒")
                                                                                  ,
                                                                                    Modify(
                                                                                      Get(Whiteboard).
                                                                                      Attr(AnnotationScript.String)
                                                                                    ,
                                                                                      Concat(
                                                                                        Value(
                                                                                          String
                                                                                        ,
                                                                                          "秒")))))))))))))))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

--------------------------------
[Chunk Grammar Rule]
number_arabic_before_double_year
--------------------------------
== GUID ==
90460281-2e2b-44f2-834e-a84faaf42b07

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese two-digit-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g.,12年零三个月  -> 十二年零三个月.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]$
  ]
</TARGET>
WHERE:
  *SubSRE(
    After(TARGET)
  ,
    #START# :
    [@Text:
        "年|岁|天"
    ] :
    [@Text:
        *StartsWith(零)
    ])

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "百")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "百")))
                                                          ,
                                                            If(
                                                              Get(Char).
                                                              Attr(AnnotationScript.String).
                                                              Matches(
                                                                "千")
                                                            ,
                                                              Modify(
                                                                Get(Whiteboard).
                                                                Attr(AnnotationScript.String)
                                                              ,
                                                                Concat(
                                                                  Value(
                                                                    String
                                                                  ,
                                                                    "千")))
                                                            ,
                                                              If(
                                                                Get(Char).
                                                                Attr(AnnotationScript.String).
                                                                Matches(
                                                                  "万")
                                                              ,
                                                                Modify(
                                                                  Get(Whiteboard).
                                                                  Attr(AnnotationScript.String)
                                                                ,
                                                                  Concat(
                                                                    Value(
                                                                      String
                                                                    ,
                                                                      "万")))
                                                              ,
                                                                If(
                                                                  Get(Char).
                                                                  Attr(AnnotationScript.String).
                                                                  Matches(
                                                                    "十万")
                                                                ,
                                                                  Modify(
                                                                    Get(Whiteboard).
                                                                    Attr(AnnotationScript.String)
                                                                  ,
                                                                    Concat(
                                                                      Value(
                                                                        String
                                                                      ,
                                                                        "十万")))
                                                                ,
                                                                  If(
                                                                    Get(Char).
                                                                    Attr(AnnotationScript.String).
                                                                    Matches(
                                                                      "百万")
                                                                  ,
                                                                    Modify(
                                                                      Get(Whiteboard).
                                                                      Attr(AnnotationScript.String)
                                                                    ,
                                                                      Concat(
                                                                        Value(
                                                                          String
                                                                        ,
                                                                          "百万")))
                                                                  ,
                                                                    If(
                                                                      Get(Char).
                                                                      Attr(AnnotationScript.String).
                                                                      Matches(
                                                                        "千万")
                                                                    ,
                                                                      Modify(
                                                                        Get(Whiteboard).
                                                                        Attr(AnnotationScript.String)
                                                                      ,
                                                                        Concat(
                                                                          Value(
                                                                            String
                                                                          ,
                                                                            "千万")))
                                                                    ,
                                                                      If(
                                                                        Get(Char).
                                                                        Attr(AnnotationScript.String).
                                                                        Matches(
                                                                          "亿")
                                                                      ,
                                                                        Modify(
                                                                          Get(Whiteboard).
                                                                          Attr(AnnotationScript.String)
                                                                        ,
                                                                          Concat(
                                                                            Value(
                                                                              String
                                                                            ,
                                                                              "亿")))
                                                                      ,
                                                                        If(
                                                                          Get(Char).
                                                                          Attr(AnnotationScript.String).
                                                                          Matches(
                                                                            "十亿")
                                                                        ,
                                                                          Modify(
                                                                            Get(Whiteboard).
                                                                            Attr(AnnotationScript.String)
                                                                          ,
                                                                            Concat(
                                                                              Value(
                                                                                String
                                                                              ,
                                                                                "十亿")))
                                                                        ,
                                                                          If(
                                                                            Get(Char).
                                                                            Attr(AnnotationScript.String).
                                                                            Matches(
                                                                              "百亿")
                                                                          ,
                                                                            Modify(
                                                                              Get(Whiteboard).
                                                                              Attr(AnnotationScript.String)
                                                                            ,
                                                                              Concat(
                                                                                Value(
                                                                                  String
                                                                                ,
                                                                                  "百亿")))
                                                                          ,
                                                                            If(
                                                                              Get(Char).
                                                                              Attr(AnnotationScript.String).
                                                                              Matches(
                                                                                "千亿")
                                                                            ,
                                                                              Modify(
                                                                                Get(Whiteboard).
                                                                                Attr(AnnotationScript.String)
                                                                              ,
                                                                                Concat(
                                                                                  Value(
                                                                                    String
                                                                                  ,
                                                                                    "千亿")))
                                                                            ,
                                                                              If(
                                                                                Get(Char).
                                                                                Attr(AnnotationScript.String).
                                                                                Matches(
                                                                                  "万亿")
                                                                              ,
                                                                                Modify(
                                                                                  Get(Whiteboard).
                                                                                  Attr(AnnotationScript.String)
                                                                                ,
                                                                                  Concat(
                                                                                    Value(
                                                                                      String
                                                                                    ,
                                                                                      "万亿")))
                                                                              ,
                                                                                If(
                                                                                  Get(Char).
                                                                                  Attr(AnnotationScript.String).
                                                                                  Matches(
                                                                                    "元")
                                                                                ,
                                                                                  Modify(
                                                                                    Get(Whiteboard).
                                                                                    Attr(AnnotationScript.String)
                                                                                  ,
                                                                                    Concat(
                                                                                      Value(
                                                                                        String
                                                                                      ,
                                                                                        "元")))
                                                                                ,
                                                                                  If(
                                                                                    Get(Char).
                                                                                    Attr(AnnotationScript.String).
                                                                                    Matches(
                                                                                      "秒")
                                                                                  ,
                                                                                    Modify(
                                                                                      Get(Whiteboard).
                                                                                      Attr(AnnotationScript.String)
                                                                                    ,
                                                                                      Concat(
                                                                                        Value(
                                                                                          String
                                                                                        ,
                                                                                          "秒")))))))))))))))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

------------------------
[Chunk Grammar Rule]
number_arabic_before_jin
------------------------
== GUID ==
976f1098-6951-4fab-a0b7-82d6764b2c76

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese 斤(jin)-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 3斤二两 -> 三斤二两.

== PATTERN ==
<TARGET>
  [@Text:
      ^[0,零,０]?[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][斤,尺]$
  ]
</TARGET>
WHERE:
  AND(
    OR(
      *SubSRE(
        After(TARGET)
      ,
        (
          #START# :
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *StartsWith(－|-|十|第|1|2|3|4|5|6|7|8|9|２|３|４|５|６|７|８|９|１))))
          ] :
          [@Text:
              NOT(
                "男|女")
          ]
        )
        |
        (
          #START# :
          NOT(
            [@Text:
                *Contains(点|/|为|血|攻击|攻|到|－|-|这|年|栋|村|室|厅|楼|房|岁|和|·|月|周|至|人|班|从|操盘手|*|节|淘气|区|天|级|绝|支|个|孔|款|快门|次|胜|平|负|打折|筒|下|片|组|国|制|中文|位|多|世纪|年代|与|男女|踩|军|师|团|连|单元|或者|或|刀|＊|不是)
            ]) :
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *StartsWith(第))))
          ]
        ))
    ,
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Text:
            "斤|两|尺|寸|元|毛|角|亩"
        ] :
        [@Annotations:
            Tokenization.TokenName=
              "NUMBER"
        ])
    ,
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Text:
            [一|二|三|四|五|六|七|八|九]寸
        ]))
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_))
      ])
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      NOT(
        [@Text:
            [\\,\／,\s]
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "十")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "十")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "百")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "百")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "千")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "千")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "万")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "万")))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "十万")
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "十万")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "百万")
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Concat(
                                      Value(
                                        String
                                      ,
                                        "百万")))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "千万")
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "千万")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "亿")
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Concat(
                                          Value(
                                            String
                                          ,
                                            "亿")))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "十亿")
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "十亿")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "百亿")
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Concat(
                                              Value(
                                                String
                                              ,
                                                "百亿")))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "千亿")
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "千亿")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "万亿")
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Concat(
                                                  Value(
                                                    String
                                                  ,
                                                    "万亿")))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "元")
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "元")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "0|零|０")
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Concat(
                                                      Value(
                                                        String
                                                      ,
                                                        "零")))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "秒")
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "秒")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "斤")
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Concat(
                                                          Value(
                                                            String
                                                          ,
                                                            "斤"))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-------------------------
[Chunk Grammar Rule]
number_arabic_before_kuai
-------------------------
== GUID ==
8f4f94a2-e1f3-4922-819a-eb7f6dedbc49

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese 块(kuai)-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 三十块5 -> 三十块五.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９]$
  ]
</TARGET>
WHERE:
  *SubSRE(
    Before(TARGET)
  ,
    AND(
      NOT(
        [@Text:
            *Contains(1|2|3|4|5|6|7|8|9|２|３|４|５|６|７|８|９|１)
        ])
    ,
      [@Annotations:
          Tokenization.TokenName=
            "NUMBER"
      ]) :
    [@Text:
        "块"
    ] :
    #END#)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "元")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "元")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "块")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "块")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "万")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "万")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "千")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "千"))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

---------------------------
[Chunk Grammar Rule]
number_arabic_before_single
---------------------------
== GUID ==
9576addd-7b03-4691-a4c1-4d0714c4e157

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese one-digit-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters.

== PATTERN ==
<TARGET>
  AND(
    [@Text:
        ^[0,零,０]?[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][秒]?$
    ]
  ,
    [@Annotations:
        Tokenization.TokenName=
          "NUMBER"
    ])
</TARGET>
WHERE:
  AND(
    OR(
      *SubSRE(
        After(TARGET)
      ,
        (
          #START# :
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *StartsWith(－|-|十|第|两|％))))
          ] :
          [@Text:
              NOT(
                "男|女|个|人|次|核")
          ]
        )
        |
        (
          #START# :
          NOT(
            [@Text:
                *Contains(点|/|为|血|攻击|攻|到|－|-|这|年|栋|村|室|厅|楼|房|岁|和|·|月|周|至|人|班|从|操盘手|*|节|淘气|区|天|级|绝|支|个|孔|款|快门|次|胜|平|负|打折|筒|下|片|组|国|制|中文|位|多|世纪|年代|与|男女|踩|军|师|团|连|单元|或者|或|刀|＊|不是|折|比|幢|列|辆|那|亩|套|枚|增产|类|条|男|女|张|的|群|只|届|晋|克|家|夏及|春|夏|秋|冬|层|送|预测|：|:|度|战|败|倍|死|伤|客机|街|卡|中学|部|早|早餐|段|领先|加|等于|日|号|金|门|打|按|期|种|自|及|项中有|美元|排|分|说|台|市|县|搂|︰|•|х|版|手|大洲|地区|环|间|开|名|乳|英尺|英寸|赠|颗|是|又|在|～||路|件|不锈钢|大奖|注|属|直选|中奖|运动|弄|共计|罚|中|合|热线|选|投|章|等|道|信箱|跨|共|出|座|恐怕|好运|&|º|闲|赔|页|报|刊|首|以上|系|对|缺|卷|品|股|进|乘|棵|课|艘|篇|毛钱|●|快|慢|过|给|主|备|有|差|行|芯|瓦|超过|把|图像|上|成|项|新界|纲领|看|欧|界|聚苯乙烯|双|菌株|表|瓶|表示|封信成|表格|角|小米|历时|如果|蓝|绿|洞|果子|题|速|黑|白|免|脏|紫|防|精华|转|赢|屁|大|篮板|险|姚明|缸|磁头)
            ]) :
          [@Annotations:
              AND(
                Tokenization.TokenName=
                  "NUMBER"
              ,
                NOT(
                  Syntax.Analyses=
                    *Contains(
                      Normalization.Result=
                        NormalizedForm=
                          *StartsWith(第))))
          ] :
          [@Text:
              NOT(
                "双")
          ]
        ))
    ,
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Text:
            "斤|尺|寸|元|毛|亩|角"
        ] :
        AND(
          NOT(
            [@Text:
                *Contains(1|2|3|4|5|6|7|8|9|２|３|４|５|６|７|８|９|１)
            ])
        ,
          [@Annotations:
              Tokenization.TokenName=
                "NUMBER"
          ])))
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_))
      ])
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      NOT(
        [@Text:
            [\\,亩,一,\′,%\(,\／,\s]
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "十")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "十")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "百")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "百")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "千")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "千")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "万")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "万")))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "十万")
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "十万")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "百万")
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Concat(
                                      Value(
                                        String
                                      ,
                                        "百万")))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "千万")
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "千万")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "亿")
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Concat(
                                          Value(
                                            String
                                          ,
                                            "亿")))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "十亿")
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "十亿")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "百亿")
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Concat(
                                              Value(
                                                String
                                              ,
                                                "百亿")))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "千亿")
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "千亿")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "万亿")
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Concat(
                                                  Value(
                                                    String
                                                  ,
                                                    "万亿")))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "元")
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "元")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "0|零|０")
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Concat(
                                                      Value(
                                                        String
                                                      ,
                                                        "零")))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "秒")
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "秒")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "斤")
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Concat(
                                                          Value(
                                                            String
                                                          ,
                                                            "斤"))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

---------------------------
[Chunk Grammar Rule]
number_arabic_single_square
---------------------------
== GUID ==
7294b79d-7121-47b5-9461-fa2ee2b025b0

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese square-meter-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 9千平方米 -> 九千平方米.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][千|万]万?[平|立]方米$
  ]
</TARGET>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "十")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "十")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "百")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "百")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "千")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "千")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "万")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "万")))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "十万")
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "十万")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "百万")
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Concat(
                                      Value(
                                        String
                                      ,
                                        "百万")))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "千万")
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(Span.Text)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "千万")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "亿")
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Concat(
                                          Value(
                                            String
                                          ,
                                            "亿")))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "十亿")
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "十亿")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "百亿")
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Concat(
                                              Value(
                                                String
                                              ,
                                                "百亿")))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "千亿")
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "千亿")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "万亿")
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Concat(
                                                  Value(
                                                    String
                                                  ,
                                                    "万亿")))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "立")
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "立")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "方")
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Concat(
                                                      Value(
                                                        String
                                                      ,
                                                        "方")))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "米")
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "米")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "平")
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Concat(
                                                          Value(
                                                            String
                                                          ,
                                                            "平"))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

---------------------------------------
[Chunk Grammar Rule]
number_clock_minute_after_arabic_double
---------------------------------------
== GUID ==
954f5d91-c7d1-468d-8295-cb6ee725b0dd

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese week-related expressions. The suggestion is to replace them with the corresponding 
arabic characters, e.g., 12点二十三分 -> 12点23分.

== PATTERN ==
<TARGET>
  [@Text:
      ^[二|三|四|五|六|七|八|九|十]十?[ 一|二|三|四|五|六|七|八|九]?分?钟?$
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      Before(TARGET)
    ,
      (
        [@Text:
            [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]?[时|小时|点]$
        ] :
        #END#
      )
      |
      (
        [@Text:
            [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]?$_@t
        ] :
        [@Text:
            "点"
        ] :
        #END#
      ))
  ,
    *SubSRE(
      TARGET
    ,
      [@Text:
          NOT(
            "十分")
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "十").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          NOT(
            [十][一,二,三,四,五,六,七,八,九])))
    ,
      DoNothing()
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "二").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            ^二十分?钟?$))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "20")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "三").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              ^三十分?钟?$))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Value(
              String
            ,
              "30"))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "四").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                ^四十分?钟?$))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "40")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "五").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  ^五十分?钟?$))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "50")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "六").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    ^六十分?钟?$))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "60")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "七").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      ^七十分?钟?$))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "70")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "八").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        ^八十分?钟?$))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "80")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "九").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          ^九十分?钟?$))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "90")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "十").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            ^[十][一,二,三,四,五,六,七,八,九]))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "1")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "一").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              一分?))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "1")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "二").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                [十][一,二,三,四,五,六,七,八,九]))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "2")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "二").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  分?))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "2"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "三").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    [十][一,二,三,四,五,六,七,八,九]秒?))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "3")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "三").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      分?))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "3"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "四").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        [十][一,二,三,四,五,六,七,八,九]))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "4")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "四").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          分?))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "4"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "五").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            [十][一,二,三,四,五,六,七,八,九]))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "5")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "五").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              分?))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "5"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "六").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                [十][一,二,三,四,五,六,七,八,九]))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "6")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "六").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  分?))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "6"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "七").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    [十][一,二,三,四,五,六,七,八,九]))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "7")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "七").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      分?))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "7"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "八").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        [十][一,二,三,四,五,六,七,八,九]))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "8")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "八").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          分?))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "8"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "九").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            [十][一,二,三,四,五,六,七,八,九]))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "9")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "九").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              分?))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "9"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "分")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "分")))
                                                          ,
                                                            If(
                                                              Get(Char).
                                                              Attr(AnnotationScript.String).
                                                              Matches(
                                                                "钟")
                                                            ,
                                                              Modify(
                                                                Get(Whiteboard).
                                                                Attr(AnnotationScript.String)
                                                              ,
                                                                Concat(
                                                                  Value(
                                                                    String
                                                                  ,
                                                                    "钟"))))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

---------------------------------------
[Chunk Grammar Rule]
number_clock_minute_after_arabic_single
---------------------------------------
== GUID ==
2b0fb006-774c-4ff9-bdf2-4405bea08585

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese minute-related expressions. The suggestion is to replace them with the corresponding 
arabic characters, e.g., 12点零一分 -> 12点01分.

== PATTERN ==
<TARGET>
  [@Text:
      ^零?[ 一|二|三|四|五|六|七|八|九|十]分?钟?$
  ]
</TARGET>
WHERE:
  *SubSRE(
    Before(TARGET)
  ,
    (
      [@Text:
          [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]?[时|小时|点]$
      ] :
      #END#
    )
    |
    (
      [@Text:
          [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]?$
      ] :
      [@Text:
          "点"
      ] :
      #END#
    ))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "一")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "1")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "二")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "2")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "三")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "3")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "四")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "4")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "五")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "5")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "六")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "6")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "七")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "7")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "八")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "8")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "九")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "9")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "零")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "0")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "分")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "分")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "十")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "10")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "钟")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "钟"))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------
[Chunk Grammar Rule]
number_clock_minute_cn_double
-----------------------------
== GUID ==
a74f151c-66d9-4aac-9fed-6aef2cc31182

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese minute-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 十二点12分 -> 十二点十二分.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,１,２,３,４,５,６][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]分?钟?$
  ]
</TARGET>
WHERE:
  *SubSRE(
    Before(TARGET)
  ,
    (
      [@Text:
          [一|二|三|四|五|六|七|八|九|十]{1,2}[时|小时]
      ] :
      #END#
    )
    |
    (
      [@Text:
          [一|二|三|四|五|六|七|八|九|十]{1,2}
      ] :
      [@Text:
          "点"
      ] :
      #END#
    )
    |
    (
      [@Text:
          "个"
      ] :
      [@Text:
          "小时"
      ] :
      #END#
    ))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              *Contains(11|１１|１1|1１)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  *Contains(22|２２|２2|2２)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      *Contains(３３|33|３3|3３)))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          *Contains(４４|44|４4|4４)))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              *Contains(５５|55|5５|５5)))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  *Contains(６６|66|６6|6６)))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      *Contains(７７|77|７7|7７)))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          *Contains(８８|88|８8|8８)))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              *Contains(９９|99|９9|9９)))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "分")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "分")))
                                                          ,
                                                            If(
                                                              Get(Char).
                                                              Attr(AnnotationScript.String).
                                                              Matches(
                                                                "钟")
                                                            ,
                                                              Modify(
                                                                Get(Whiteboard).
                                                                Attr(AnnotationScript.String)
                                                              ,
                                                                Concat(
                                                                  Value(
                                                                    String
                                                                  ,
                                                                    "钟"))))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------
[Chunk Grammar Rule]
number_clock_minute_cn_single
-----------------------------
== GUID ==
bdcef912-c47e-4683-a99a-00a7b16fe588

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese minute-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 十二点03分 -> 十二点零三分.

== PATTERN ==
<TARGET>
  [@Text:
      ^[0,０]?[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９]分?钟?$
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      Before(TARGET)
    ,
      (
        [@Text:
            [一|二|三|四|五|六|七|八|九|十]{1,2}[时|小时]
        ] :
        #END#
      )
      |
      (
        [@Text:
            [一|二|三|四|五|六|七|八|九|十]{1,2}
        ] :
        [@Text:
            "点"
        ] :
        #END#
      )
      |
      (
        AND(
          [@Annotations:
              Tokenization.TokenName=
                "TIME"
          ]
        ,
          [@Text:
              *Contains(点)
          ]) :
        #END#
      )
      |
      (
        AND(
          NOT(
            [@Text:
                "一时刻"
            ])
        ,
          [@Annotations:
              Tokenization.TokenName=
                "TIME"
          ]) :
        #END#
      )
      |
      (
        [@Text:
            "个"
        ] :
        [@Text:
            "小时"
        ] :
        #END#
      ))
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      NOT(
        [@Text:
            "个"
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "0|０")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "零")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "分")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "分")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "钟")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "钟")))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

---------------------------------------
[Chunk Grammar Rule]
number_clock_second_after_arabic_double
---------------------------------------
== GUID ==
03913b7e-4c6a-4855-bc5b-c32d30087ae5

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese second-related expressions. The suggestion is to replace them with the corresponding 
arabic characters, e.g., 13分二十五秒 -> 13分25秒.

== PATTERN ==
<TARGET>
  [@Text:
      ^[二|三|四|五|六|七|八|九|十]十?[ 一|二|三|四|五|六|七|八|九]?秒?$
  ]
</TARGET>
WHERE:
  *SubSRE(
    Before(TARGET)
  ,
    [@Text:
        [1,2,3,4,5,6,１,２,３,４,５,６][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]?
    ] :
    [@Text:
        "分"
    ] :
    #END#)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "十").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          NOT(
            [十][一,二,三,四,五,六,七,八,九])))
    ,
      DoNothing()
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "二").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            ^二十秒?$))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "20")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "三").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              ^三十秒?$))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Value(
              String
            ,
              "30"))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "四").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                ^四十秒?$))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "40")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "五").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  ^五十秒?$))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "50")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "六").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    ^六十秒?$))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "60")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "七").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      ^七十秒?$))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "70")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "八").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        ^八十秒?$))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "80")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "九").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          ^九十秒?$))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "90")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "十").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            ^[十][一,二,三,四,五,六,七,八,九]))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "1")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "一").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              一秒?))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "1")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "二").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                [十][一,二,三,四,五,六,七,八,九]))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "2")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "二").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  秒?))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "2"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "三").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    [十][一,二,三,四,五,六,七,八,九]秒?))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "3")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "三").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      秒?))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "3"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "四").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        [十][一,二,三,四,五,六,七,八,九]))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "4")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "四").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          秒?))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "4"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "五").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            [十][一,二,三,四,五,六,七,八,九]))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "5")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "五").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              秒?))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "5"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "六").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                [十][一,二,三,四,五,六,七,八,九]))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "6")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "六").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  秒?))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "6"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "七").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    [十][一,二,三,四,五,六,七,八,九]))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "7")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "七").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      秒?))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "7"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "八").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        [十][一,二,三,四,五,六,七,八,九]))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "8")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "八").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          秒?))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "8"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "九").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            [十][一,二,三,四,五,六,七,八,九]))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "9")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "九").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              秒?))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "9"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "秒")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "秒")))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

---------------------------------------
[Chunk Grammar Rule]
number_clock_second_after_arabic_single
---------------------------------------
== GUID ==
8b2adc7f-7092-42ea-8124-478077db8d20

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese second-related expressions. The suggestion is to replace them with the corresponding 
arabic characters, e.g., 13分零二秒。 ->13分02秒。.

== PATTERN ==
<TARGET>
  [@Text:
      ^零?[ 一|二|三|四|五|六|七|八|九|十]秒?$
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      Before(TARGET)
    ,
      [@Text:
          [1,2,3,4,5,6,１,２,３,４,５,６][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]?
      ] :
      [@Text:
          "分"
      ] :
      #END#)
  ,
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      [@Text:
          NOT(
            "下")
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "一")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "1")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "二")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "2")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "三")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "3")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "四")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "4")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "五")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "5")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "六")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "6")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "七")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "7")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "八")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "8")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "九")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "9")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "零")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "0")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "秒")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "秒")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "十")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "10")))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------
[Chunk Grammar Rule]
number_clock_second_cn_double
-----------------------------
== GUID ==
6464a5b5-5c61-4067-a8b8-13998549f2b5

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese second-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 十三分13秒 -> 十三分十三秒.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,１,２,３,４,５,６][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]秒?$
  ]
</TARGET>
WHERE:
  *SubSRE(
    Before(TARGET)
  ,
    [@Text:
        [一|二|三|四|五|六|七|八|九|十]{1,2}
    ] :
    [@Text:
        "分"
    ] :
    #END#)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              *Contains(11|１１|１1|1１)))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  *Contains(22|２２|２2|2２)))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      *Contains(３３|33|３3|3３)))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          *Contains(４４|44|４4|4４)))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              *Contains(５５|55|5５|５5)))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  *Contains(６６|66|６6|6６)))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      *Contains(７７|77|７7|7７)))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          *Contains(８８|88|８8|8８)))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              *Contains(９９|99|９9|9９)))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "秒")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "秒")))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------
[Chunk Grammar Rule]
number_clock_second_cn_single
-----------------------------
== GUID ==
5c95ce0f-e696-4d90-b67d-8ec12c3331d7

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese second-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 十三分04秒 ->十三分零四秒.

== PATTERN ==
<TARGET>
  [@Text:
      ^[0,０]?[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９]秒?$
  ]
</TARGET>
WHERE:
  *SubSRE(
    Before(TARGET)
  ,
    [@Text:
        [一,二,三,四,五,六,七,八,九,十]{1,2}
    ] :
    [@Text:
        "分"
    ] :
    #END#)

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "0|０")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "零")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "秒")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "秒"))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

----------------------------
[Chunk Grammar Rule]
number_fraction_after_double
----------------------------
== GUID ==
ae21c8cd-5ff4-4485-aafc-28ef0e911d4d

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese fraction-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 百万分之12 -> 百万分之十二.

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      Before(TARGET)
    ,
      (
        (
          [@Text:
              "分"
          ] :
          [@Text:
              "之"
          ]
        )
        |
        (
          [@Text:
              "万分"
          ] :
          [@Text:
              "之"
          ]
        )
        |
        [@Text:
            "百分之"
        ]
      ) :
      #END#)
  ,
    *SubSRE(
      TARGET
    ,
      [@Text:
          ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]$_@n
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九")))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

----------------------------
[Chunk Grammar Rule]
number_fraction_after_single
----------------------------
== GUID ==
30c300ce-cbc0-454e-a195-2cc06d27ad84

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese fraction-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 百万分之2 -> 百万分之二.

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      Before(TARGET)
    ,
      (
        (
          [@Text:
              "分"
          ] :
          [@Text:
              "之"
          ]
        )
        |
        (
          [@Text:
              "万分"
          ] :
          [@Text:
              "之"
          ]
        )
        |
        [@Text:
            "百分之"
        ]
      ) :
      #END#)
  ,
    *SubSRE(
      TARGET
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "1|2|3|4|5|6|7|8|9|１|２|３|４|５|６|７|８|９"_@n)
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九"))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

--------------------------------
[Chunk Grammar Rule]
number_fraction_before_cn_single
--------------------------------
== GUID ==
687da1f0-8bf8-4d95-bff7-8803c5d07e85

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese fraction-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 5千分之二  -> 五千分之二 .

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      [@Text:
          "分"
      ] :
      (
        [@Text:
            "之"
        ]
        |
        [@Text:
            "之一"
        ]
      ))
  ,
    *SubSRE(
      TARGET
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][千|万]_@n)
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "千")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "千")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "万")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "万"))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------
[Chunk Grammar Rule]
number_fraction_before_double
-----------------------------
== GUID ==
b8b058de-9c93-4cb8-bbf4-b1330c51257b

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese fraction-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 13分之二  -> 十三分之二 .

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      [@Text:
          "分"
      ] :
      (
        (
          [@Text:
              "之"
          ] :
          [@Text:
              NOT(
                "内|多")
          ]
        )
        |
        [@Text:
            "之一"
        ]
      ))
  ,
    *SubSRE(
      TARGET
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  [1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０]_@n)
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "万")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "万")))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------
[Chunk Grammar Rule]
number_fraction_before_single
-----------------------------
== GUID ==
6362ba76-9505-4360-9e42-56c2a931784b

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese fraction-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 3分之二  -> 三分之二.

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      After(TARGET)
    ,
      #START# :
      [@Text:
          "分"
      ] :
      (
        (
          [@Text:
              "之"
          ] :
          [@Text:
              NOT(
                "多")
          ]
        )
        |
        [@Text:
            "之一"
        ]
      ))
  ,
    *SubSRE(
      TARGET
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "1|2|3|4|5|6|7|8|9|１|２|３|４|５|６|７|８|９"_@n)
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九"))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------
[Chunk Grammar Rule]
number_round_arabic_cn_double
-----------------------------
== GUID ==
6fe119ee-b9e8-4b12-8739-a279801cc53b

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese week-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 星期1 -> 星期一.

== PATTERN ==
<TARGET>
  [@Text:
      ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０][万,亿]元?$,
   @Annotations:
      Tokenization.TokenName=
        "Number"
  ]
</TARGET>
WHERE:
  AND(
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        [@Annotations:
            Tokenization.TokenName=
              "NUMBER"
        ]))
  ,
    NOT(
      *SubSRE(
        Before(TARGET)
      ,
        [@Text:
            "，|\,|、||～"
        ] :
        #END#)))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１").
      And(
        Get(Target).
        Attr(Span.Text).
        Matches(
          [1,１][2,3,4,5,6,7,8,9,２,３,４,５,６,７,８,９,0,０]))
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            " 十")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２").
        And(
          Get(Target).
          Attr(Span.Text).
          Matches(
            [2,２][1,１,3,4,5,6,7,8,9,３,４,５,６,７,８,９,0,０]))
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二十")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３").
          And(
            Get(Target).
            Attr(Span.Text).
            Matches(
              [3,３][1,１,2,２,4,5,6,7,8,9,４,５,６,７,８,９,0,０]))
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三十")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４").
            And(
              Get(Target).
              Attr(Span.Text).
              Matches(
                [４,4][1,１,2,２,3,３,5,6,7,8,9,５,６,７,８,９,0,０]))
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四十")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５").
              And(
                Get(Target).
                Attr(Span.Text).
                Matches(
                  [5,５][1,１,2,２,3,３,４,4,6,7,8,9,６,７,８,９,0,０]))
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五十")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６").
                And(
                  Get(Target).
                  Attr(Span.Text).
                  Matches(
                    [６,6][1,１,2,２,3,３,４,4,5,５,7,8,9,７,８,９,0,０]))
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六十")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７").
                  And(
                    Get(Target).
                    Attr(Span.Text).
                    Matches(
                      [７,7][1,１,2,２,3,３,４,4,5,５,６,6,8,9,８,９,0,０]))
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七十")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８").
                    And(
                      Get(Target).
                      Attr(Span.Text).
                      Matches(
                        [８,8][1,１,2,２,3,３,４,4,5,５,６,6,７,7,9,９,0,０]))
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八十")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９").
                      And(
                        Get(Target).
                        Attr(Span.Text).
                        Matches(
                          [9,９][1,１,2,２,3,３,４,4,5,５,６,6,７,7,８,8,0,０]))
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九十")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "1|１").
                        And(
                          Get(Target).
                          Attr(Span.Text).
                          Matches(
                            NOT(
                              [1,１][1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９,0,０])))
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "一")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "1|１").
                          And(
                            Get(Target).
                            Attr(Span.Text).
                            Matches(
                              "11|１１|１1|1１"))
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Value(
                              String
                            ,
                              "十一"))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "2|２").
                            And(
                              Get(Target).
                              Attr(Span.Text).
                              Matches(
                                NOT(
                                  [2,２][1,2,２,3,4,5,6,7,8,9,１,３,４,５,６,７,８,９,0,０])))
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "二")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "2|２").
                              And(
                                Get(Target).
                                Attr(Span.Text).
                                Matches(
                                  "22|２２|２2|2２"))
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Value(
                                  String
                                ,
                                  "二十二"))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "3|３").
                                And(
                                  Get(Target).
                                  Attr(Span.Text).
                                  Matches(
                                    NOT(
                                      [３,3][1,2,２,３,3,4,5,6,7,8,9,１,４,５,６,７,８,９,0,０])))
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "三")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "３|3").
                                  And(
                                    Get(Target).
                                    Attr(Span.Text).
                                    Matches(
                                      "３３|33|３3|3３"))
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "三十三"))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "４|4").
                                    And(
                                      Get(Target).
                                      Attr(Span.Text).
                                      Matches(
                                        NOT(
                                          [４,4][1,2,２,３,3,４,4,5,6,7,8,9,１,５,６,７,８,９,0,０])))
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "四")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "４|4").
                                      And(
                                        Get(Target).
                                        Attr(Span.Text).
                                        Matches(
                                          "４４|44|４4|4４"))
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "四十四"))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "５|5").
                                        And(
                                          Get(Target).
                                          Attr(Span.Text).
                                          Matches(
                                            NOT(
                                              [５,5][1,2,２,３,3,４,4,５,5,6,7,8,9,１,６,７,８,９,0,０])))
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "五")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "５|5").
                                          And(
                                            Get(Target).
                                            Attr(Span.Text).
                                            Matches(
                                              "５５|55|5５|５5"))
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "五十五"))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "６|6").
                                            And(
                                              Get(Target).
                                              Attr(Span.Text).
                                              Matches(
                                                NOT(
                                                  [６,6][1,2,２,３,3,４,4,５,5,６,6,7,8,9,１,７,８,９,0,０])))
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "六")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "６|6").
                                              And(
                                                Get(Target).
                                                Attr(Span.Text).
                                                Matches(
                                                  "６６|66|６6|6６"))
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "六十六"))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "７|7").
                                                And(
                                                  Get(Target).
                                                  Attr(Span.Text).
                                                  Matches(
                                                    NOT(
                                                      [７,7][1,2,２,３,3,４,4,５,5,６,6,７,7,8,9,１,８,９,0,０])))
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "七")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "７|7").
                                                  And(
                                                    Get(Target).
                                                    Attr(Span.Text).
                                                    Matches(
                                                      "７７|77|７7|7７"))
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "七十七"))
                                                ,
                                                  If(
                                                    Get(Char).
                                                    Attr(AnnotationScript.String).
                                                    Matches(
                                                      "８|8").
                                                    And(
                                                      Get(Target).
                                                      Attr(Span.Text).
                                                      Matches(
                                                        NOT(
                                                          [８,8][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,9,１,９,0,０])))
                                                  ,
                                                    Modify(
                                                      Get(Whiteboard).
                                                      Attr(AnnotationScript.String)
                                                    ,
                                                      Concat(
                                                        Value(
                                                          String
                                                        ,
                                                          "八")))
                                                  ,
                                                    If(
                                                      Get(Char).
                                                      Attr(AnnotationScript.String).
                                                      Matches(
                                                        "８|8").
                                                      And(
                                                        Get(Target).
                                                        Attr(Span.Text).
                                                        Matches(
                                                          "８８|88|８8|8８"))
                                                    ,
                                                      Modify(
                                                        Get(Whiteboard).
                                                        Attr(AnnotationScript.String)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "八十八"))
                                                    ,
                                                      If(
                                                        Get(Char).
                                                        Attr(AnnotationScript.String).
                                                        Matches(
                                                          "９|9").
                                                        And(
                                                          Get(Target).
                                                          Attr(Span.Text).
                                                          Matches(
                                                            NOT(
                                                              [９,9][1,2,２,３,3,４,4,５,5,６,6,７,7,８,8,９,9,１,0,０])))
                                                      ,
                                                        Modify(
                                                          Get(Whiteboard).
                                                          Attr(AnnotationScript.String)
                                                        ,
                                                          Concat(
                                                            Value(
                                                              String
                                                            ,
                                                              "九")))
                                                      ,
                                                        If(
                                                          Get(Char).
                                                          Attr(AnnotationScript.String).
                                                          Matches(
                                                            "９|9").
                                                          And(
                                                            Get(Target).
                                                            Attr(Span.Text).
                                                            Matches(
                                                              "９９|99|９9|9９"))
                                                        ,
                                                          Modify(
                                                            Get(Whiteboard).
                                                            Attr(AnnotationScript.String)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "九十九"))
                                                        ,
                                                          If(
                                                            Get(Char).
                                                            Attr(AnnotationScript.String).
                                                            Matches(
                                                              "百")
                                                          ,
                                                            Modify(
                                                              Get(Whiteboard).
                                                              Attr(AnnotationScript.String)
                                                            ,
                                                              Concat(
                                                                Value(
                                                                  String
                                                                ,
                                                                  "百")))
                                                          ,
                                                            If(
                                                              Get(Char).
                                                              Attr(AnnotationScript.String).
                                                              Matches(
                                                                "千")
                                                            ,
                                                              Modify(
                                                                Get(Whiteboard).
                                                                Attr(AnnotationScript.String)
                                                              ,
                                                                Concat(
                                                                  Value(
                                                                    String
                                                                  ,
                                                                    "千")))
                                                            ,
                                                              If(
                                                                Get(Char).
                                                                Attr(AnnotationScript.String).
                                                                Matches(
                                                                  "万")
                                                              ,
                                                                Modify(
                                                                  Get(Whiteboard).
                                                                  Attr(AnnotationScript.String)
                                                                ,
                                                                  Concat(
                                                                    Value(
                                                                      String
                                                                    ,
                                                                      "万")))
                                                              ,
                                                                If(
                                                                  Get(Char).
                                                                  Attr(AnnotationScript.String).
                                                                  Matches(
                                                                    "十万")
                                                                ,
                                                                  Modify(
                                                                    Get(Whiteboard).
                                                                    Attr(AnnotationScript.String)
                                                                  ,
                                                                    Concat(
                                                                      Value(
                                                                        String
                                                                      ,
                                                                        "十万")))
                                                                ,
                                                                  If(
                                                                    Get(Char).
                                                                    Attr(AnnotationScript.String).
                                                                    Matches(
                                                                      "百万")
                                                                  ,
                                                                    Modify(
                                                                      Get(Whiteboard).
                                                                      Attr(AnnotationScript.String)
                                                                    ,
                                                                      Concat(
                                                                        Value(
                                                                          String
                                                                        ,
                                                                          "百万")))
                                                                  ,
                                                                    If(
                                                                      Get(Char).
                                                                      Attr(AnnotationScript.String).
                                                                      Matches(
                                                                        "千万")
                                                                    ,
                                                                      Modify(
                                                                        Get(Whiteboard).
                                                                        Attr(AnnotationScript.String)
                                                                      ,
                                                                        Concat(
                                                                          Value(
                                                                            String
                                                                          ,
                                                                            "千万")))
                                                                    ,
                                                                      If(
                                                                        Get(Char).
                                                                        Attr(AnnotationScript.String).
                                                                        Matches(
                                                                          "亿")
                                                                      ,
                                                                        Modify(
                                                                          Get(Whiteboard).
                                                                          Attr(AnnotationScript.String)
                                                                        ,
                                                                          Concat(
                                                                            Value(
                                                                              String
                                                                            ,
                                                                              "亿")))
                                                                      ,
                                                                        If(
                                                                          Get(Char).
                                                                          Attr(AnnotationScript.String).
                                                                          Matches(
                                                                            "十亿")
                                                                        ,
                                                                          Modify(
                                                                            Get(Whiteboard).
                                                                            Attr(AnnotationScript.String)
                                                                          ,
                                                                            Concat(
                                                                              Value(
                                                                                String
                                                                              ,
                                                                                "十亿")))
                                                                        ,
                                                                          If(
                                                                            Get(Char).
                                                                            Attr(AnnotationScript.String).
                                                                            Matches(
                                                                              "百亿")
                                                                          ,
                                                                            Modify(
                                                                              Get(Whiteboard).
                                                                              Attr(AnnotationScript.String)
                                                                            ,
                                                                              Concat(
                                                                                Value(
                                                                                  String
                                                                                ,
                                                                                  "百亿")))
                                                                          ,
                                                                            If(
                                                                              Get(Char).
                                                                              Attr(AnnotationScript.String).
                                                                              Matches(
                                                                                "千亿")
                                                                            ,
                                                                              Modify(
                                                                                Get(Whiteboard).
                                                                                Attr(AnnotationScript.String)
                                                                              ,
                                                                                Concat(
                                                                                  Value(
                                                                                    String
                                                                                  ,
                                                                                    "千亿")))
                                                                            ,
                                                                              If(
                                                                                Get(Char).
                                                                                Attr(AnnotationScript.String).
                                                                                Matches(
                                                                                  "万亿")
                                                                              ,
                                                                                Modify(
                                                                                  Get(Whiteboard).
                                                                                  Attr(AnnotationScript.String)
                                                                                ,
                                                                                  Concat(
                                                                                    Value(
                                                                                      String
                                                                                    ,
                                                                                      "万亿")))
                                                                              ,
                                                                                If(
                                                                                  Get(Char).
                                                                                  Attr(AnnotationScript.String).
                                                                                  Matches(
                                                                                    "元")
                                                                                ,
                                                                                  Modify(
                                                                                    Get(Whiteboard).
                                                                                    Attr(AnnotationScript.String)
                                                                                  ,
                                                                                    Concat(
                                                                                      Value(
                                                                                        String
                                                                                      ,
                                                                                        "元"))))))))))))))))))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------
[Chunk Grammar Rule]
number_round_arabic_cn_single
-----------------------------
== GUID ==
6c82d52c-7e5f-49cb-b32d-5652d23ac13f

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese number-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters，e.g., 2千 -> 两千.

== PATTERN ==
<TARGET>
  AND(
    [@Text:
        ^[1,2,3,4,5,6,7,8,9,１,２,３,４,５,６,７,８,９][十|百|千|万]?[百|千|万|亿][元|斤]?$
    ]
  ,
    [@Annotations:
        Tokenization.TokenName=
          "NUMBER"
    ])
</TARGET>
WHERE:
  AND(
    NOT(
      *SubSRE(
        Before(TARGET)
      ,
        [@Text:
            "、||～|，|\,"
        ] :
        #END#))
  ,
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Annotations:
            Tokenization.TokenName=
              "CURRENCY"
        ]))
  ,
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Text:
            "次|杯|Kgs|g|Kg|版|余次|行|余人|名|棵"
        ]))
  ,
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Text:
            "小时"
        ] :
        [@Text:
            "前"
        ]))
  ,
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Annotations:
            Tokenization.TokenName=
              *StartsWith(S_|Z_)
        ]))
  ,
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Text:
            [\ ]
        ]))
  ,
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Text:
            ^[1,2,3,4,5,6,7,8,9][0,1,2,3,4,5,6,7,8,9]{3}
        ]))
  ,
    NOT(
      *SubSRE(
        After(TARGET)
      ,
        #START# :
        [@Text:
            ^[1,2,3,4,5,6,7,8,9]$
        ])))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "两")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七")))
                ,
                  If(
                    Get(Char).
                    Attr(AnnotationScript.String).
                    Matches(
                      "8|８")
                  ,
                    Modify(
                      Get(Whiteboard).
                      Attr(AnnotationScript.String)
                    ,
                      Concat(
                        Value(
                          String
                        ,
                          "八")))
                  ,
                    If(
                      Get(Char).
                      Attr(AnnotationScript.String).
                      Matches(
                        "9|９")
                    ,
                      Modify(
                        Get(Whiteboard).
                        Attr(AnnotationScript.String)
                      ,
                        Concat(
                          Value(
                            String
                          ,
                            "九")))
                    ,
                      If(
                        Get(Char).
                        Attr(AnnotationScript.String).
                        Matches(
                          "十")
                      ,
                        Modify(
                          Get(Whiteboard).
                          Attr(AnnotationScript.String)
                        ,
                          Concat(
                            Value(
                              String
                            ,
                              "十")))
                      ,
                        If(
                          Get(Char).
                          Attr(AnnotationScript.String).
                          Matches(
                            "百")
                        ,
                          Modify(
                            Get(Whiteboard).
                            Attr(AnnotationScript.String)
                          ,
                            Concat(
                              Value(
                                String
                              ,
                                "百")))
                        ,
                          If(
                            Get(Char).
                            Attr(AnnotationScript.String).
                            Matches(
                              "千")
                          ,
                            Modify(
                              Get(Whiteboard).
                              Attr(AnnotationScript.String)
                            ,
                              Concat(
                                Value(
                                  String
                                ,
                                  "千")))
                          ,
                            If(
                              Get(Char).
                              Attr(AnnotationScript.String).
                              Matches(
                                "万")
                            ,
                              Modify(
                                Get(Whiteboard).
                                Attr(AnnotationScript.String)
                              ,
                                Concat(
                                  Value(
                                    String
                                  ,
                                    "万")))
                            ,
                              If(
                                Get(Char).
                                Attr(AnnotationScript.String).
                                Matches(
                                  "十万")
                              ,
                                Modify(
                                  Get(Whiteboard).
                                  Attr(AnnotationScript.String)
                                ,
                                  Concat(
                                    Value(
                                      String
                                    ,
                                      "十万")))
                              ,
                                If(
                                  Get(Char).
                                  Attr(AnnotationScript.String).
                                  Matches(
                                    "百万")
                                ,
                                  Modify(
                                    Get(Whiteboard).
                                    Attr(AnnotationScript.String)
                                  ,
                                    Concat(
                                      Value(
                                        String
                                      ,
                                        "百万")))
                                ,
                                  If(
                                    Get(Char).
                                    Attr(AnnotationScript.String).
                                    Matches(
                                      "千万")
                                  ,
                                    Modify(
                                      Get(Whiteboard).
                                      Attr(AnnotationScript.String)
                                    ,
                                      Concat(
                                        Value(
                                          String
                                        ,
                                          "千万")))
                                  ,
                                    If(
                                      Get(Char).
                                      Attr(AnnotationScript.String).
                                      Matches(
                                        "亿")
                                    ,
                                      Modify(
                                        Get(Whiteboard).
                                        Attr(AnnotationScript.String)
                                      ,
                                        Concat(
                                          Value(
                                            String
                                          ,
                                            "亿")))
                                    ,
                                      If(
                                        Get(Char).
                                        Attr(AnnotationScript.String).
                                        Matches(
                                          "十亿")
                                      ,
                                        Modify(
                                          Get(Whiteboard).
                                          Attr(AnnotationScript.String)
                                        ,
                                          Concat(
                                            Value(
                                              String
                                            ,
                                              "十亿")))
                                      ,
                                        If(
                                          Get(Char).
                                          Attr(AnnotationScript.String).
                                          Matches(
                                            "百亿")
                                        ,
                                          Modify(
                                            Get(Whiteboard).
                                            Attr(AnnotationScript.String)
                                          ,
                                            Concat(
                                              Value(
                                                String
                                              ,
                                                "百亿")))
                                        ,
                                          If(
                                            Get(Char).
                                            Attr(AnnotationScript.String).
                                            Matches(
                                              "千亿")
                                          ,
                                            Modify(
                                              Get(Whiteboard).
                                              Attr(AnnotationScript.String)
                                            ,
                                              Concat(
                                                Value(
                                                  String
                                                ,
                                                  "千亿")))
                                          ,
                                            If(
                                              Get(Char).
                                              Attr(AnnotationScript.String).
                                              Matches(
                                                "万亿")
                                            ,
                                              Modify(
                                                Get(Whiteboard).
                                                Attr(AnnotationScript.String)
                                              ,
                                                Concat(
                                                  Value(
                                                    String
                                                  ,
                                                    "万亿")))
                                            ,
                                              If(
                                                Get(Char).
                                                Attr(AnnotationScript.String).
                                                Matches(
                                                  "元")
                                              ,
                                                Modify(
                                                  Get(Whiteboard).
                                                  Attr(AnnotationScript.String)
                                                ,
                                                  Concat(
                                                    Value(
                                                      String
                                                    ,
                                                      "元")))
                                              ,
                                                If(
                                                  Get(Char).
                                                  Attr(AnnotationScript.String).
                                                  Matches(
                                                    "斤")
                                                ,
                                                  Modify(
                                                    Get(Whiteboard).
                                                    Attr(AnnotationScript.String)
                                                  ,
                                                    Concat(
                                                      Value(
                                                        String
                                                      ,
                                                        "斤"))))))))))))))))))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

--------------------
[Chunk Grammar Rule]
number_week
--------------------
== GUID ==
e8dbfdcf-adcb-482a-8bd7-5ea4b51a344e

== DESCRIPTION ==
This rule targets numbers, when they are used in Chinese week-related expressions. The suggestion is to replace them with the corresponding 
Chinese characters, e.g., 星期1 -> 星期一.

== PATTERN ==
<TARGET>
  [@Annotations:
      Tokenization.TokenName=
        "NUMBER"
  ]
</TARGET>
WHERE:
  AND(
    *SubSRE(
      Before(TARGET)
    ,
      <WORD>
        [@Text:
            "星期|礼拜|周"
        ]
      </WORD>)
  ,
    *SubSRE(
      TARGET
    ,
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "1|2|3|4|5|6|7|１|２|３|４|５|６|７"_@n)
      ]))

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
Region(
  GenerateSuggestion
,
  Assign(
    Get(Whiteboard).
    Attr(AnnotationScript.String)
  ,
    Value(
      String
    ,
      ""))
  .
  Enumerate(
  Char
  ,
    %{SpanTextWithoutFinalWS(
        Get(Target))}.
    ToCharList()
  ,
    If(
      Get(Char).
      Attr(AnnotationScript.String).
      Matches(
        "1|１")
    ,
      Modify(
        Get(Whiteboard).
        Attr(AnnotationScript.String)
      ,
        Concat(
          Value(
            String
          ,
            "一")))
    ,
      If(
        Get(Char).
        Attr(AnnotationScript.String).
        Matches(
          "2|２")
      ,
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.String)
        ,
          Concat(
            Value(
              String
            ,
              "二")))
      ,
        If(
          Get(Char).
          Attr(AnnotationScript.String).
          Matches(
            "3|３")
        ,
          Modify(
            Get(Whiteboard).
            Attr(AnnotationScript.String)
          ,
            Concat(
              Value(
                String
              ,
                "三")))
        ,
          If(
            Get(Char).
            Attr(AnnotationScript.String).
            Matches(
              "4|４")
          ,
            Modify(
              Get(Whiteboard).
              Attr(AnnotationScript.String)
            ,
              Concat(
                Value(
                  String
                ,
                  "四")))
          ,
            If(
              Get(Char).
              Attr(AnnotationScript.String).
              Matches(
                "5|５")
            ,
              Modify(
                Get(Whiteboard).
                Attr(AnnotationScript.String)
              ,
                Concat(
                  Value(
                    String
                  ,
                    "五")))
            ,
              If(
                Get(Char).
                Attr(AnnotationScript.String).
                Matches(
                  "6|６")
              ,
                Modify(
                  Get(Whiteboard).
                  Attr(AnnotationScript.String)
                ,
                  Concat(
                    Value(
                      String
                    ,
                      "六")))
              ,
                If(
                  Get(Char).
                  Attr(AnnotationScript.String).
                  Matches(
                    "7|７")
                ,
                  Modify(
                    Get(Whiteboard).
                    Attr(AnnotationScript.String)
                  ,
                    Concat(
                      Value(
                        String
                      ,
                        "七"))))))))))))
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList()
  ,
    Value(
      String
    ,
      "Mixed Number Format Error")
  ,
    %{SuggestLiteral(
        Get(Whiteboard).
        Attr(AnnotationScript.String))})}
.
Remove(
  Get(Whiteboard)
,
  AnnotationScript.String)

-----------------------------------
[Chunk Grammar Rule]
Redundant_Morphemes_after_Verbs_XX于
-----------------------------------
== GUID ==
1a3a7f8a-d86c-4401-8b1b-afddfc0ce46b

== DESCRIPTION ==
This rule targets CHS character 做  (zuo) incorrectly used in the word 坐月子 (zuoyuezi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "付诸")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "于")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Redundant Morphemes after Verbs")
  ,
    %{SuggestDeletionAtEOS(
        Get(Target1)
      ,
        Get(Target))})}

----------------------------------
[Chunk Grammar Rule]
Redundant_Morphemes_after_Verbs_X到
----------------------------------
== GUID ==
528b60d0-5044-4ad1-be82-86f5429e474a

== DESCRIPTION ==
This rule targets CHS character 做  (zuo) incorrectly used in the word 坐月子 (zuoyuezi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "关乎|涉及")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "到")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Redundant Morphemes after Verbs")
  ,
    %{SuggestDeletionAtEOS(
        Get(Target1)
      ,
        Get(Target))})}

-----------------------------------
[Chunk Grammar Rule]
Redundant_Morphemes_after_Verbs_X自于
-----------------------------------
== GUID ==
bc4f2c72-a871-43f6-b462-ec0707c5a355

== DESCRIPTION ==
This rule targets CHS character 做  (zuo) incorrectly used in the word 坐月子 (zuoyuezi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "出自|源自|来自")
  ]
</TARGET> :
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "于")
  ]
</TARGET1>

== ACTION ==
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target1).
    ToList().
    Append(
      Get(Target))
  ,
    Value(
      String
    ,
      "Redundant Morphemes after Verbs")
  ,
    %{SuggestDeletionAtEOS(
        Get(Target1)
      ,
        Get(Target))})}

-----------------------------------
[Chunk Grammar Rule]
Redundant_Morphemes_after_Verbs_源自于
-----------------------------------
== GUID ==
4837be83-c1bb-4325-a0f5-50d63413c3a2

== DESCRIPTION ==
This rule targets CHS character 做  (zuo) incorrectly used in the word 坐月子 (zuoyuezi). 
The suggestion is to flag the whole word and replace it with correct one.

== PATTERN ==
<TARGET1>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "源")
  ]
</TARGET1> :
<TARGET2>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "自")
  ]
</TARGET2> :
<TARGET>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              "于")
  ]
</TARGET>

== ACTION ==
New(
  Target1
,
  %{GetSingleCapture(
      Get(TARGET1))})
.
New(
  Target2
,
  %{GetSingleCapture(
      Get(TARGET2))})
.
New(
  Target
,
  %{GetSingleCapture(
      Get(TARGET))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Target).
    ToList().
    Append(
      Get(Target2)).
    Append(
      Get(Target1))
  ,
    Value(
      String
    ,
      "Redundant Morphemes after Verbs")
  ,
    %{SuggestLiteral(
        Value(
          String
        ,
          "源自"))})}

--------------------
[Chunk Grammar Rule]
TokenAdjustment1
--------------------
== GUID ==
6bce0cbf-d9e7-4ea0-886c-e1d4a3037bd7

== PATTERN ==
<ELLIPSIS_3D>
  (
    [@Text:
        ^[\u002E]$
    ] :
    [@Text:
        ^[\u002E]$
    ] :
    [@Text:
        ^[\u002E]$
    ]
  )
  |
  (
    [@Text:
        ^[\u06D4]$
    ] :
    [@Text:
        ^[\u06D4]$
    ] :
    [@Text:
        ^[\u06D4]$
    ]
  )
  |
  (
    [@Text:
        ^[\u3002]$
    ] :
    [@Text:
        ^[\u3002]$
    ] :
    [@Text:
        ^[\u3002]$
    ]
  )
  |
  (
    [@Text:
        ^[\uFE52]$
    ] :
    [@Text:
        ^[\uFE52]$
    ] :
    [@Text:
        ^[\uFE52]$
    ]
  )
  |
  (
    [@Text:
        ^[\uFF0E]$
    ] :
    [@Text:
        ^[\uFF0E]$
    ] :
    [@Text:
        ^[\uFF0E]$
    ]
  )
  |
  (
    [@Text:
        ^[\uFF61]$
    ] :
    [@Text:
        ^[\uFF61]$
    ] :
    [@Text:
        ^[\uFF61]$
    ]
  )
</ELLIPSIS_3D>
|
<ELLIPSIS_CHAR>
  [@Text:
      ^[\u2026\u1801\uFE19]$
  ]
</ELLIPSIS_CHAR>
|
<SMILEY_CHAR>
  [@Text:
      ^[\u2639-\u263B]$
  ]
</SMILEY_CHAR>
|
<BULLET_CHAR>
  [@Text:
      ^[\u2022\u2023\u2043\u204C\u204D\u25A0\u25A1\u25AA\u25AB\u25CA\u25CB\u25CF\u25E6]$
  ]
</BULLET_CHAR>
|
<Z_SPACE>
  [@Text:
      ^[\p{Zs}]$
  ]
</Z_SPACE>
|
<Z_TAB>
  [@Text:
      ^[\u0009]$
  ]
</Z_TAB>
|
<Z_LINEDELIMITER>
  [@Text:
      ^[\p{Zl}\p{Zp}\u000A-\u000D\u0085]$
  ]
</Z_LINEDELIMITER>
|
<P_QUES>
  [@Text:
      ^[\u003F\u037E\u055E\u061F\u1367\u1945\u203D\u2047\u2049\u2CFA\u2CFB\u2E2E\uA60F\uA6F7\uFE16\uFE56\uFF1F]$
  ]
</P_QUES>
|
<P_EXCLAM>
  [@Text:
      ^[\u0021\u055C\u07F9\u1944\u203C\u2048\uFE15\uFE57\uFF01]$
  ]
</P_EXCLAM>
|
<P_FULLSTOP>
  [@Text:
      ^[\u002E\u0589\u06D4\u0701\u0702\u1362\u166E\u1803\u1809\u2CF9\u2CFE\u3002\uA4FF\uA60E\uA6F3\uFE12\uFE52\uFF0E\uFF61]$
  ]
</P_FULLSTOP>
|
<P_COMMA>
  [@Text:
      ^[\u002C\u055D\u060C\u07F8\u1363\u1802\u1808\u3001\uA4FE\uA60D\uA6F5\uFE10\uFE11\uFE50\uFE51\uFF0C\uFF64]$
  ]
</P_COMMA>
|
<P_COLON>
  [@Text:
      ^[\u003A\u0703-\u0709\u1365\u1366\u1804\u205D\uA6F4\uFE13\uFE55\uFF1A]$
  ]
</P_COLON>
|
<P_SEMICOLON>
  [@Text:
      ^[\u003B\u061B\u1364\u204F\uA6F6\uFE14\uFE54\uFF1B]$
  ]
</P_SEMICOLON>
|
<P_UNDERSCORE>
  [@Text:
      ^[\u005F\u203F\u2040\u2054\uFF3F]$
  ]
</P_UNDERSCORE>
|
<P_HYPHEN>
  [@Text:
      ^[\u002D\u058A\u05BE\u1400\u1806\u2010\u2015\u2212\u2E17\u2E1A\u30A0\uFE63\uFF0D]$
  ]
</P_HYPHEN>
|
<P_DASH>
  [@Text:
      ^[\u2012-\u2014\u301C\u3030\uFE31\uFE32\uFE58]$
  ]
</P_DASH>
|
<P_NONBREAKING_HYPHEN>
  [@Text:
      ^[\u2011]$
  ]
</P_NONBREAKING_HYPHEN>
|
<P_QUOTE_NEUTRAL>
  [@Text:
      ^[\u0022\u0027\uFF02\uFF07]$
  ]
</P_QUOTE_NEUTRAL>
|
<P_QUOTE_INITIAL>
  [@Text:
      ^[\u00AB\u2018\u201A-\u201C\u201E\u201F\u2039\u275B\u275D\u276E\u300C\u300E\u301D\uFE41\uFE43]$
  ]
</P_QUOTE_INITIAL>
|
<P_QUOTE_FINAL>
  [@Text:
      ^[\u00BB\u2019\u201D\u203A\u275C\u275E\u276F\u300D\u300F\u301E\u301F\uFE42\uFE44]$
  ]
</P_QUOTE_FINAL>
|
<P_APOSTROPHE>
  [@Text:
      ^[\u0027\u2019\uFF07]$
  ]
</P_APOSTROPHE>
|
<P_PAREN_LEFT>
  [@Text:
      ^[\u0028\u207D\u208D\u2768\u276A\u27EE\u2985\u2E28\uFD3E\uFE35\uFE59\uFF08\uFF5F]$
  ]
</P_PAREN_LEFT>
|
<P_PAREN_RIGHT>
  [@Text:
      ^[\u0029\u207E\u208E\u2769\u276B\u27EF\u2986\u2E29\uFD3F\uFE36\uFE5A\uFF09\uFF60]$
  ]
</P_PAREN_RIGHT>
|
<P_BRACKET_LEFT>
  [@Text:
      ^[\u005B\u007B\u2045\u2329\u276C\u2770\u2772\u2774\u27E6\u27E8\u27EA\u27EC\u2983\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29FC\u2E22\u2E24\u2E26\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\uFE17\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE5B\uFE5D\uFF3B\uFF5B\uFF62]$
  ]
</P_BRACKET_LEFT>
|
<P_BRACKET_RIGHT>
  [@Text:
      ^[\u005D\u007D\u2046\u232A\u276D\u2771\u2773\u2775\u27E7\u27E9\u27EB\u27ED\u2984\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29FD\u2E23\u2E25\u2E27\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\uFE18\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5C\uFE5E\uFF3D\uFF5D\uFF63]$
  ]
</P_BRACKET_RIGHT>
|
<P_PUNC_OTHERS>
  [@Text:
      ^[\u0023\u0025\u0026\u002A\u002F\u0040\u005C\u00A1\u00B7\u00BF\u0387\u055A\u055B\u055F\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060D\u061E\u066A-\u066D\u0700\u070A-\u070D\u07F7\u0830-\u083E\u0964\u0965\u0970\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u104A-\u104F\u10FB\u1361\u1368\u166D\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800\u1801\u1805\u1807\u180A\u19DE\u19DF\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1C3B-\u1C3F\u1C7E\u1C7F\u1CD3\u2016\u2017\u2020\u2021\u2024-\u2027\u2030-\u2038\u203B\u203E\u2041\u2042\u204A\u204B\u204E\u2050\u2051\u2053\u2055-\u205C\u205E\u27C5\u27C6\u29D8-\u29DB\u2CFC\u2CFF\u2E00-\u2E16\u2E18\u2E19\u2E1B-\u2E21\u2E2A-\u2E2D\u2E30\u2E31\u3003\u303D\u30FB\uA673\uA67E\uA6F2\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uABEB\uFE19\uFE30\uFE33\uFE34\uFE45\uFE46\uFE49-\uFE4F\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF03\uFF05\uFF06\uFF0A\uFF0F\uFF20\uFF3C\uFF65]$]
  ]
</P_PUNC_OTHERS>
|
<S_CURRENCY>
  [@Text:
      ^[\p{Sc}\p{IsCurrencySymbols}]$
  ]
</S_CURRENCY>
|
<S_MATH>
  [@Text:
      ^[\p{Sm}]$
  ]
</S_MATH>
|
<S_SYMBOL_OTHERS>
  [@Text:
      ^[\p{Sk}\p{So}]$
  ]
</S_SYMBOL_OTHERS>
|
<Q_MARKS>
  [@Text:
      ^[\p{Mc}\p{Mc}]$
  ]
</Q_MARKS>
|
<Q_CONTROL>
  [@Text:
      ^[\p{Cc}-[\u0009\u000A-\u000D\u0085]]$
  ]
</Q_CONTROL>
|
<Q_FORMAT>
  [@Text:
      ^[\p{Cf}]$
  ]
</Q_FORMAT>
|
<Q_CONTROL_OTHERS>
  [@Text:
      ^[\p{Co}]$
  ]
</Q_CONTROL_OTHERS>
|
<NUMBER>
  [@Text:
      ^([0-9０-９]+([、,，][0-9０-９]+)*([・･.．][0-9０-９]+)?)$
  ]
</NUMBER>

== ACTION ==
New(
  Token
,
  %{GetSingleCapture(
      Get(Match))})
.
New(
  Chunk
,
  Get(Token))
.
If(
  IsDefined(ELLIPSIS_3D)
,
  Assign(
    Get(Chunk).
    Attr(Tokenization.TokenName)
  ,
    Value(
      String
    ,
      "ELLIPSIS_3D"))
,
  If(
    IsDefined(ELLIPSIS_CHAR)
  ,
    Assign(
      Get(Chunk).
      Attr(Tokenization.TokenName)
    ,
      Value(
        String
      ,
        "ELLIPSIS_CHAR"))
  ,
    If(
      IsDefined(SMILEY_CHAR)
    ,
      Assign(
        Get(Chunk).
        Attr(Tokenization.TokenName)
      ,
        Value(
          String
        ,
          "SMILEY_CHAR"))
    ,
      If(
        IsDefined(BULLET_CHAR)
      ,
        Assign(
          Get(Chunk).
          Attr(Tokenization.TokenName)
        ,
          Value(
            String
          ,
            "BULLET_CHAR"))
      ,
        If(
          IsDefined(Z_SPACE)
        ,
          Assign(
            Get(Chunk).
            Attr(Tokenization.TokenName)
          ,
            Value(
              String
            ,
              "Z_SPACE"))
        ,
          If(
            IsDefined(Z_TAB)
          ,
            Assign(
              Get(Chunk).
              Attr(Tokenization.TokenName)
            ,
              Value(
                String
              ,
                "Z_TAB"))
          ,
            If(
              IsDefined(Z_LINEDELIMITER)
            ,
              Assign(
                Get(Chunk).
                Attr(Tokenization.TokenName)
              ,
                Value(
                  String
                ,
                  "Z_LINEDELIMITER"))
            ,
              If(
                IsDefined(P_QUES)
              ,
                Assign(
                  Get(Chunk).
                  Attr(Tokenization.TokenName)
                ,
                  Value(
                    String
                  ,
                    "P_QUES"))
              ,
                If(
                  IsDefined(P_EXCLAM)
                ,
                  Assign(
                    Get(Chunk).
                    Attr(Tokenization.TokenName)
                  ,
                    Value(
                      String
                    ,
                      "P_EXCLAM"))
                ,
                  If(
                    IsDefined(P_FULLSTOP)
                  ,
                    Assign(
                      Get(Chunk).
                      Attr(Tokenization.TokenName)
                    ,
                      Value(
                        String
                      ,
                        "P_FULLSTOP"))
                  ,
                    If(
                      IsDefined(P_COMMA)
                    ,
                      Assign(
                        Get(Chunk).
                        Attr(Tokenization.TokenName)
                      ,
                        Value(
                          String
                        ,
                          "P_COMMA"))
                    ,
                      If(
                        IsDefined(P_COLON)
                      ,
                        Assign(
                          Get(Chunk).
                          Attr(Tokenization.TokenName)
                        ,
                          Value(
                            String
                          ,
                            "P_COLON"))
                      ,
                        If(
                          IsDefined(P_SEMICOLON)
                        ,
                          Assign(
                            Get(Chunk).
                            Attr(Tokenization.TokenName)
                          ,
                            Value(
                              String
                            ,
                              "P_SEMICOLON"))
                        ,
                          If(
                            IsDefined(P_UNDERSCORE)
                          ,
                            Assign(
                              Get(Chunk).
                              Attr(Tokenization.TokenName)
                            ,
                              Value(
                                String
                              ,
                                "P_UNDERSCORE"))
                          ,
                            If(
                              IsDefined(P_HYPHEN)
                            ,
                              Assign(
                                Get(Chunk).
                                Attr(Tokenization.TokenName)
                              ,
                                Value(
                                  String
                                ,
                                  "P_HYPHEN"))
                            ,
                              If(
                                IsDefined(P_DASH)
                              ,
                                Assign(
                                  Get(Chunk).
                                  Attr(Tokenization.TokenName)
                                ,
                                  Value(
                                    String
                                  ,
                                    "P_DASH"))
                              ,
                                If(
                                  IsDefined(P_NONBREAKING_HYPHEN)
                                ,
                                  Assign(
                                    Get(Chunk).
                                    Attr(Tokenization.TokenName)
                                  ,
                                    Value(
                                      String
                                    ,
                                      "P_NONBREAKING_HYPHEN"))
                                ,
                                  If(
                                    IsDefined(P_QUOTE_NEUTRAL)
                                  ,
                                    Assign(
                                      Get(Chunk).
                                      Attr(Tokenization.TokenName)
                                    ,
                                      Value(
                                        String
                                      ,
                                        "P_QUOTE_NEUTRAL"))
                                  ,
                                    If(
                                      IsDefined(P_QUOTE_INITIAL)
                                    ,
                                      Assign(
                                        Get(Chunk).
                                        Attr(Tokenization.TokenName)
                                      ,
                                        Value(
                                          String
                                        ,
                                          "P_QUOTE_INITIAL"))
                                    ,
                                      If(
                                        IsDefined(P_QUOTE_FINAL)
                                      ,
                                        Assign(
                                          Get(Chunk).
                                          Attr(Tokenization.TokenName)
                                        ,
                                          Value(
                                            String
                                          ,
                                            "P_QUOTE_FINAL"))
                                      ,
                                        If(
                                          IsDefined(P_APOSTROPHE)
                                        ,
                                          Assign(
                                            Get(Chunk).
                                            Attr(Tokenization.TokenName)
                                          ,
                                            Value(
                                              String
                                            ,
                                              "P_APOSTROPHE"))
                                        ,
                                          If(
                                            IsDefined(P_PAREN_LEFT)
                                          ,
                                            Assign(
                                              Get(Chunk).
                                              Attr(Tokenization.TokenName)
                                            ,
                                              Value(
                                                String
                                              ,
                                                "P_PAREN_LEFT"))
                                          ,
                                            If(
                                              IsDefined(P_PAREN_RIGHT)
                                            ,
                                              Assign(
                                                Get(Chunk).
                                                Attr(Tokenization.TokenName)
                                              ,
                                                Value(
                                                  String
                                                ,
                                                  "P_PAREN_RIGHT"))
                                            ,
                                              If(
                                                IsDefined(P_BRACKET_LEFT)
                                              ,
                                                Assign(
                                                  Get(Chunk).
                                                  Attr(Tokenization.TokenName)
                                                ,
                                                  Value(
                                                    String
                                                  ,
                                                    "P_BRACKET_LEFT"))
                                              ,
                                                If(
                                                  IsDefined(P_BRACKET_RIGHT)
                                                ,
                                                  Assign(
                                                    Get(Chunk).
                                                    Attr(Tokenization.TokenName)
                                                  ,
                                                    Value(
                                                      String
                                                    ,
                                                      "P_BRACKET_RIGHT"))
                                                ,
                                                  If(
                                                    IsDefined(P_PUNC_OTHERS)
                                                  ,
                                                    Assign(
                                                      Get(Chunk).
                                                      Attr(Tokenization.TokenName)
                                                    ,
                                                      Value(
                                                        String
                                                      ,
                                                        "P_PUNC_OTHERS"))
                                                  ,
                                                    If(
                                                      IsDefined(S_CURRENCY)
                                                    ,
                                                      Assign(
                                                        Get(Chunk).
                                                        Attr(Tokenization.TokenName)
                                                      ,
                                                        Value(
                                                          String
                                                        ,
                                                          "S_CURRENCY"))
                                                    ,
                                                      If(
                                                        IsDefined(S_MATH)
                                                      ,
                                                        Assign(
                                                          Get(Chunk).
                                                          Attr(Tokenization.TokenName)
                                                        ,
                                                          Value(
                                                            String
                                                          ,
                                                            "S_MATH"))
                                                      ,
                                                        If(
                                                          IsDefined(S_SYMBOL_OTHERS)
                                                        ,
                                                          Assign(
                                                            Get(Chunk).
                                                            Attr(Tokenization.TokenName)
                                                          ,
                                                            Value(
                                                              String
                                                            ,
                                                              "S_SYMBOL_OTHERS"))
                                                        ,
                                                          If(
                                                            IsDefined(Q_MARKS)
                                                          ,
                                                            Assign(
                                                              Get(Chunk).
                                                              Attr(Tokenization.TokenName)
                                                            ,
                                                              Value(
                                                                String
                                                              ,
                                                                "Q_MARKS"))
                                                          ,
                                                            If(
                                                              IsDefined(Q_CONTROL)
                                                            ,
                                                              Assign(
                                                                Get(Chunk).
                                                                Attr(Tokenization.TokenName)
                                                              ,
                                                                Value(
                                                                  String
                                                                ,
                                                                  "Q_CONTROL"))
                                                            ,
                                                              If(
                                                                IsDefined(Q_FORMAT)
                                                              ,
                                                                Assign(
                                                                  Get(Chunk).
                                                                  Attr(Tokenization.TokenName)
                                                                ,
                                                                  Value(
                                                                    String
                                                                  ,
                                                                    "Q_FORMAT"))
                                                              ,
                                                                If(
                                                                  IsDefined(Q_CONTROL_OTHERS)
                                                                ,
                                                                  Assign(
                                                                    Get(Chunk).
                                                                    Attr(Tokenization.TokenName)
                                                                  ,
                                                                    Value(
                                                                      String
                                                                    ,
                                                                      "Q_CONTROL_OTHERS"))
                                                                ,
                                                                  If(
                                                                    IsDefined(NUMBER)
                                                                  ,
                                                                    Assign(
                                                                      Get(Chunk).
                                                                      Attr(Tokenization.TokenName)
                                                                    ,
                                                                      Value(
                                                                        String
                                                                      ,
                                                                        "NUMBER"))))))))))))))))))))))))))))))))))))
.
Modify(
  Get(Whiteboard).
  Attr(ChunkParsing.NewChunks)
,
  Append(
    Get(Chunk)))

--------------------
[Chunk Grammar Rule]
TokenAdjustment2
--------------------
== GUID ==
98aa2a8f-7eee-4504-9f29-52e5d3580880

== PATTERN ==
<EMAIL>
  [@Annotations:
      Tokenization.TokenName=
        "Email"
  ]
</EMAIL>
|
<LOCATION>
  [@Annotations:
      Tokenization.TokenName=
        "Url|FileName|Location"
  ]
</LOCATION>
|
<DATE>
  [@Annotations:
      Tokenization.TokenName=
        "Date"
  ]
</DATE>
|
<TIME>
  [@Annotations:
      Tokenization.TokenName=
        "Time"
  ]
</TIME>
|
<CURRENCY>
  [@Annotations:
      Tokenization.TokenName=
        "Currency"
  ]
</CURRENCY>
|
<NUMBER>
  [@Annotations:
      Tokenization.TokenName=
        "Number"
  ]
</NUMBER>
|
[@Annotations:
    Tokenization.TokenName=
      OR(
        [a-z]_s
      ,
        ^[\p{Nd}]+$)
]

== ACTION ==
New(
  Token
,
  %{GetSingleCapture(
      Get(Match))})
.
New(
  Chunk
,
  Get(Token))
.
If(
  IsDefined(EMAIL)
,
  Assign(
    Get(Chunk).
    Attr(Tokenization.TokenName)
  ,
    Value(
      String
    ,
      "EMAIL"))
,
  If(
    IsDefined(LOCATION)
  ,
    Assign(
      Get(Chunk).
      Attr(Tokenization.TokenName)
    ,
      Value(
        String
      ,
        "LOCATION"))
  ,
    If(
      IsDefined(DATE)
    ,
      Assign(
        Get(Chunk).
        Attr(Tokenization.TokenName)
      ,
        Value(
          String
        ,
          "DATE"))
    ,
      If(
        IsDefined(TIME)
      ,
        Assign(
          Get(Chunk).
          Attr(Tokenization.TokenName)
        ,
          Value(
            String
          ,
            "TIME"))
      ,
        If(
          IsDefined(CURRENCY)
        ,
          Assign(
            Get(Chunk).
            Attr(Tokenization.TokenName)
          ,
            Value(
              String
            ,
              "CURRENCY"))
        ,
          If(
            IsDefined(NUMBER)
          ,
            Assign(
              Get(Chunk).
              Attr(Tokenization.TokenName)
            ,
              Value(
                String
              ,
                "NUMBER"))
          ,
            Assign(
              Get(Chunk).
              Attr(Tokenization.TokenName)
            ,
              Value(
                String
              ,
                "WORD"))))))))
.
Modify(
  Get(Whiteboard).
  Attr(ChunkParsing.NewChunks)
,
  Append(
    Get(Chunk)))	
	
---------------------------
[Chunk Grammar Rule]
WhitespaceError_ciwai_token
---------------------------
== GUID ==
c2e6131f-08c7-4d89-ae33-a201021e5355

== DESCRIPTION ==
The Pattern is to flag sequences comprised of "此外" (except) followed by a whitespace and a set of potential tokens:
 1. tokens except punctuation,
 2. certain symbols, for instance, (@|#|%|&|*), and
 3. currency.

The Action is to insert a comma (，) between 此外 and the following tokens.

== PATTERN ==
<TARGET>
  <WORD>
    [@Annotations:
        AND(
          Syntax.FinalWSCount=
            >0
        ,
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "此外"))
    ]
  </WORD> :
  <POSTWORD>
    [@Annotations:
        OR(
          OR(
            Tokenization.TokenName?=
              NOT(
                *StartsWith(P_))
          ,
            Tokenization.TokenName=
              "Currency")
        ,
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "@|#|%|&|*"))
    ]
  </POSTWORD>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  New(
    Postword
  ,
    %{GetSingleCapture(
        Get(POSTWORD))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Word))}.
        Concat(
          Value(
            String
          ,
            "，")).
        Concat(
          Get(Postword).
          Attr(Span.Text)))})}

----------------------------------
[Chunk Grammar Rule]
WhitespaceError_digit_measure_word
----------------------------------
== GUID ==
e3cd67f9-8d75-4677-b608-e7f4e78b199b

== DESCRIPTION ==
The Pattern is to flag sequences comprised of numbers followed by a whitespace and English measure words.

The Action is to remove the whitespace between numbers and English measure words.

== PATTERN ==
<TARGET>
  <DIGIT>
    [@Annotations:
        AND(
          Tokenization.TokenName=
            *StartsWith(NUMBER)
        ,
          Syntax.FinalWSCount=
            >0)
    ]
  </DIGIT> :
  <UNIT>
    [@Annotations:
        Syntax.Analyses=
          *Contains(
            Normalization.Result=
              NormalizedForm=
                "cm|g|gb|hr|hrs|inch|inches|kg|kgs|km|kms|kps|l|lb|lbs|ls|m|mb|mile|miles|min|mins|ml|mls|mm|ms|oz|s|second|seconds"_i)
    ]
  </UNIT>
</TARGET>
WHERE:
  OR(
    *AnnotationQuery(
      %{SpanTextWithoutFinalWS(
          %{GetSingleCapture(
              Get(DIGIT))})}.
      Analyze(Chinese_Simplified).
      ItemsMatching(
        +Chinese_SimplifiedMorph.Lemma).
      Count().
      Matches(
        =0))
  ,
    *AnnotationQuery(
      %{SpanTextWithoutFinalWS(
          %{GetSingleCapture(
              Get(DIGIT))})}.
      Analyze(Chinese_Simplified).
      ItemsMatching(
        Chinese_SimplifiedMorph.Num=
          NumType=
            Cardinal).
      Count().
      Matches(
        >0)))

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Digit
  ,
    %{GetSingleCapture(
        Get(DIGIT))})
  .
  New(
    Unit
  ,
    %{GetSingleCapture(
        Get(UNIT))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Digit))}.
        Concat(
          Get(Unit).
          Attr(Span.Text)))})}

--------------------------
[Chunk Grammar Rule]
WhitespaceError_diwu_token
--------------------------
== GUID ==
050801ab-894c-4385-9e0e-d1c6eebc98c6

== DESCRIPTION ==
The Pattern is to flag sequences comprised of a set of patterns beginning of “第五” (fifth) (e.g. 第五条 (fifth article) | 第五项 (fifth item) | 第五章 (fifth chapter) | 第五款 (fifth means)) followed by a whitespace and tokens except punctuation.

The Action is to insert a slight-pause mark (、) between (第五条|第五项|第五章|第五款) and tokens.

== PATTERN ==
<TARGET>
  <WORD01>
    [@Annotations:
        AND(
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "第五条|第五项|第五章|第五款")
        ,
          Syntax.FinalWSCount=
            >0)
    ]
  </WORD01> :
  <WORDS02>
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            *StartsWith(P_))
    ]
  </WORDS02>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Word01
  ,
    %{GetSingleCapture(
        Get(WORD01))})
  .
  New(
    Word02
  ,
    %{GetSingleCapture(
        Get(WORDS02))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Word01))}.
        Concat(
          Value(
            String
          ,
            "、")).
        Concat(
          Get(Word02).
          Attr(Span.Text)))})}

---------------------------
[Chunk Grammar Rule]
WhitespaceError_enumeration
---------------------------
== GUID ==
5f3d5b73-5ebb-4dc5-9c7c-f20d32c7994e

== DESCRIPTION ==
The Pattern is to flag sequences comprised of a set of patterns beginning of ordinal numbers followed by a set of tokens (条 (article) | 项 (item) | 章 (chapter) | 款 (means)), a whitespace and tokens except punctuation.

The Action is to replace the whitespace by a slight-pause mark (、).

== PATTERN ==
<ORDINAL>
  [@Annotations:
      Tokenization.TokenName=
        *StartsWith(NUMBER)
  ]
</ORDINAL> :
<TARGET>
  <CLASSIFIER>
    [@Annotations:
        AND(
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "条|款|项|章")
        ,
          Syntax.FinalWSCount=
            >0)
    ]
  </CLASSIFIER> :
  <WORD>
    [@Annotations:
        Tokenization.TokenName?=
          NOT(
            *StartsWith(P_))
    ]
  </WORD>
</TARGET>
WHERE:
  AND(
    OR(
      *AnnotationQuery(
        %{SpanTextWithoutFinalWS(
            %{GetSingleCapture(
                Get(ORDINAL))})}.
        Analyze(Chinese_Simplified).
        ItemsMatching(
          +Chinese_SimplifiedMorph.Lemma).
        Count().
        Matches(
          >=0))
    ,
      *AnnotationQuery(
        %{SpanTextWithoutFinalWS(
            %{GetSingleCapture(
                Get(ORDINAL))})}.
        Analyze(Chinese_Simplified).
        ItemsMatching(
          Chinese_SimplifiedMorph.Num=
            NumType=
              Ordinal).
        Count().
        Matches(
          >0)))
  ,
    *SubSRE(
      ORDINAL
    ,
      [@Text:
          *StartsWith(第)
      ])
  ,
    *SubSRE(
      WORD
    ,
      [@Text:
          NOT(
            "的")
      ]))

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Classifier
  ,
    %{GetSingleCapture(
        Get(CLASSIFIER))})
  .
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Classifier))}.
        Concat(
          Value(
            String
          ,
            "、")).
        Concat(
          Get(Word).
          Attr(Span.Text)))})}

------------------------
[Chunk Grammar Rule]
WhitespaceError_ma_punct
------------------------
== GUID ==
8403599c-ec99-4c0d-8d83-7be81ceea06d

== DESCRIPTION ==
The Pattern is to flag sequences comprised of an interrogative particle 吗, a whitespace and tokens except punctuation.

The Action is to replace the whitespace by a question mark (？).

== PATTERN ==
<TARGET>
  <MA>
    [@Annotations:
        AND(
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "吗")
        ,
          Syntax.FinalWSCount=
            >0)
    ]
  </MA> :
  <WORD>
    [@Annotations:
        Tokenization.TokenName?=
          NOT(
            *StartsWith(P_))
    ]
  </WORD>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Ma
  ,
    %{GetSingleCapture(
        Get(MA))})
  .
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Ma))}.
        Concat(
          Value(
            String
          ,
            "？")).
        Concat(
          Get(Word).
          Attr(Span.Text)))})}

------------------------------------------
[Chunk Grammar Rule]
WhitespaceError_paired_Chinese_parentheses
------------------------------------------
== GUID ==
9f009651-279a-44c9-952f-9d06b91f2bab

== DESCRIPTION ==
The Pattern is to flag pairs of parentheses comprised of open parentheses, a half-width whitespace and close parentheses.

The Action is to replace the half-width whitespace by a full-width one.

== PATTERN ==
<WORD>
  [@Text:
      ^(\｛\ |〈\ |《\ |『\ |【\ |〔\ |「\ |（\ )$
  ]
</WORD> :
<POSTWORD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              *StartsWith(》|〉|｝|〕|】|』|」|）))
  ]
</POSTWORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
New(
  Postword
,
  %{GetSingleCapture(
      Get(POSTWORD))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Word).
    ToList().
    Append(
      Get(Postword))
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Word))}.
        Concat(
          Value(
            String
          ,
            "　")).
        Concat(
          Get(Postword).
          Attr(Span.Text)))})}

----------------------------------
[Chunk Grammar Rule]
WhitespaceError_paired_parentheses
----------------------------------
== GUID ==
7dc0705c-1962-4016-af55-55a93e6eb5af

== DESCRIPTION ==
The Pattern is to flag pairs of Non-Chinese parentheses comprised of open parentheses, a full-width whitespace and close parentheses.

The Action is to replace the full-width whitespace by a half-width one.

== PATTERN ==
<WORD>
  [@Text:
      ^(\{\　|\(\　|'\　|"\　|\[\　|\‘\　|\“\　)$
  ]
</WORD> :
<POSTWORD>
  [@Annotations:
      Syntax.Analyses=
        *Contains(
          Normalization.Result=
            NormalizedForm=
              ^(}|\)|'|"|\]|’|”)$)
  ]
</POSTWORD>

== ACTION ==
New(
  Word
,
  %{GetSingleCapture(
      Get(WORD))})
.
New(
  Postword
,
  %{GetSingleCapture(
      Get(POSTWORD))})
.
%{CreateCritiqueOverMultipleChunks(
    Get(Word).
    ToList().
    Append(
      Get(Postword))
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Word))}.
        Concat(
          Value(
            String
          ,
            " ")).
        Concat(
          Get(Postword).
          Attr(Span.Text)))})}

------------------------------
[Chunk Grammar Rule]
WhitespaceError_particle_punct
------------------------------
== GUID ==
2e487e34-33f4-41a4-8167-8722f5557540

== DESCRIPTION ==
The Pattern is to flag sequences comprised of a set of final modal particle (哟 (yo) | 唉 (well) | 吼 (hou) | 呗 (bei) | 哎 (ai) | 嘛 (ma)), a whitespace and tokens except punctuation.

The Action is to replace the whitespace by an exclamation mark (！).

== PATTERN ==
<TARGET>
  <PARTICLE>
    [@Annotations:
        AND(
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "哟|唉|吼|呗|哎|嘛")
        ,
          Syntax.FinalWSCount=
            >=0)
    ]
  </PARTICLE> :
  <WORD>
    [@Annotations:
        Tokenization.TokenName=
          NOT(
            *StartsWith(P_))
    ]
  </WORD>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Particle
  ,
    %{GetSingleCapture(
        Get(PARTICLE))})
  .
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Particle))}.
        Concat(
          Value(
            String
          ,
            "！")).
        Concat(
          Get(Word).
          Attr(Span.Text)))})}

--------------------------------------
[Chunk Grammar Rule]
WhitespaceError_particle_twopuncsugsts
--------------------------------------
== GUID ==
c2c9795b-6d47-450c-8e58-90fe05403cc1

== DESCRIPTION ==
The Pattern is to flag sequences comprised of a set of final modal particle (呢 (ne) | 吧 (ba) | 哦 (oh) | 啊 (ah) | 啦 (la) | 呀 (ya) | 喔 (ouh) | 耶 (yeah)), a whitespace and tokens except punctuation.

The Action is to replace the whitespace by two suggestions:
 1. a question mark (？), and
 2. an exclamation mark (！).

== PATTERN ==
<TARGET>
  <PARTICLE>
    [@Annotations:
        AND(
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "呢|吧|哦|啊|啦|呀|喔|耶")
        ,
          Syntax.FinalWSCount=
            >0)
    ]
  </PARTICLE> :
  <WORD>
    [@Annotations:
        Tokenization.TokenName?=
          NOT(
            *StartsWith(P_))
    ]
  </WORD>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Particle
  ,
    %{GetSingleCapture(
        Get(PARTICLE))})
  .
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        Get(Particle).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "？")).
        Concat(
          Get(Word).
          Attr(Span.Text)))}
    .
    %{SuggestLiteral(
        Get(Particle).
        Attr(Span.Text).
        Concat(
          Value(
            String
          ,
            "！")).
        Concat(
          Get(Word).
          Attr(Span.Text)))})}

--------------------------------
[Chunk Grammar Rule]
WhitespaceError_pattern_ws_token
--------------------------------
== GUID ==
f19377ca-2d29-449a-9211-282bd4ad0365

== DESCRIPTION ==
The Pattern is to flag two types of sequences comprised of:
 1. a set of tokens annotated by NUMBER, DATE, DET and TIME, followed by a whitespace and tokens (e.g. not Latin words, numbers, TIME, DATE and also not a set of symbols (+|-|=|>|<|＋|－|＝|＞|＜|≤|≥));
 2. punctuation and the pipeline (|) followed by a whitespace and tokens (e.g. not Latin words, punctuation and also not symbols).

The Action is to remove the whitespace in these sequences.

== PATTERN ==
<TARGET>
  (
    <PATTERN01>
      [@Annotations:
          AND(
            OR(
              Tokenization.TokenName=
                *StartsWith(NUMBER|DATE|DET|TIME)
            ,
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Num))
          ,
            Syntax.FinalWSCount=
              >0)
      ]
    </PATTERN01> :
    <POSTWORD01>
      .
    </POSTWORD01>
  )
  |
  (
    <PATTERN02>
      OR(
        [@Annotations:
            AND(
              Tokenization.TokenName=
                *StartsWith(P_)
            ,
              Syntax.FinalWSCount=
                >0)
        ]
      ,
        [@Text:
            *StartsWith(｜)
        ])
    </PATTERN02> :
    <POSTWORD02>
      .
    </POSTWORD02>
  )
</TARGET>
WHERE:
  OR(
    *SubSRE(
      POSTWORD01
    ,
      [@Annotations:
          AND(
            Tokenization.TokenName=
              NOT(
                *StartsWith(S_|NUMBER|TIME|DATE))
          ,
            -Chinese_SimplifiedSyntax.LatinString
          ,
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    NOT(
                      "-|<|=|>|＋|－|＜|＝|＞|≤|≥")))
      ])
  ,
    *SubSRE(
      POSTWORD02
    ,
      [@Annotations:
          AND(
            Tokenization.TokenName=
              NOT(
                *StartsWith(P_|S_))
          ,
            -Chinese_SimplifiedSyntax.LatinString)
      ]))

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Pattern01
  ,
    If(
      IsDefined(PATTERN01)
    ,
      %{GetSingleCapture(
          Get(PATTERN01))}))
  .
  New(
    Pattern02
  ,
    If(
      IsDefined(PATTERN02)
    ,
      %{GetSingleCapture(
          Get(PATTERN02))}))
  .
  New(
    Postword01
  ,
    If(
      IsDefined(POSTWORD01)
    ,
      %{GetSingleCapture(
          Get(POSTWORD01))}))
  .
  New(
    Postword02
  ,
    If(
      IsDefined(POSTWORD02)
    ,
      %{GetSingleCapture(
          Get(POSTWORD02))})))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    If(
      IsDefined(PATTERN01)
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Pattern01))}.
          Concat(
            Get(Postword01).
            Attr(Span.Text)))}
    ,
      If(
        IsDefined(PATTERN02)
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Pattern02))}.
            Concat(
              Get(Postword02).
              Attr(Span.Text)))})))}

--------------------------
[Chunk Grammar Rule]
WhitespaceError_punct_conj
--------------------------
== GUID ==
2c09621b-d2fd-47d9-ab2d-c4ef395e2a71

== DESCRIPTION ==
The Pattern is to flag two types of sequences comprised of a set of tokens except punctuation, followed by conjunctions:
 1. 虽然 (although) | 不过 (but);
 2. 但是 (but) | 如果 (if) | 所以 (therefore) | 可是 (but) | 然后 (then) | 但 (but) | 据悉 (according to).

The Action is to replace the whitespace in first sequences by a period (。) and in the second sequences by a comma (，).

== PATTERN ==
<TARGET>
  <PREFWORD>
    [@Annotations:
        AND(
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_))
        ,
          Syntax.FinalWSCount=
            >0)
    ]
  </PREFWORD> :
  (
    <SUFWORD01>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "虽然|不过")
      ]
    </SUFWORD01>
    |
    <SUFWORD02>
      [@Annotations:
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  "但|但是|如果|所以|可是|然后|据悉")
      ]
    </SUFWORD02>
  )
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Prefword
  ,
    %{GetSingleCapture(
        Get(PREFWORD))})
  .
  New(
    Sufword01
  ,
    If(
      IsDefined(SUFWORD01)
    ,
      %{GetSingleCapture(
          Get(SUFWORD01))}))
  .
  New(
    Sufword02
  ,
    If(
      IsDefined(SUFWORD02)
    ,
      %{GetSingleCapture(
          Get(SUFWORD02))})))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    If(
      IsDefined(SUFWORD01)
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Prefword))}.
          Concat(
            Value(
              String
            ,
              "。")).
          Concat(
            Get(Sufword01).
            Attr(Span.Text)))}
    ,
      If(
        IsDefined(SUFWORD02)
      ,
        %{SuggestLiteral(
            %{SpanTextWithoutFinalWS(
                Get(Prefword))}.
            Concat(
              Value(
                String
              ,
                "，")).
            Concat(
              Get(Sufword02).
              Attr(Span.Text)))})))}

------------------------------
[Chunk Grammar Rule]
WhitespaceError_punct_ws_token
------------------------------
== GUID ==
7ce5989e-f7cf-4ced-bb1d-a505326a9927

== DESCRIPTION ==
The Pattern is to flag sequences comprised of punctuation, followed by a whitespace, and conjunctions (e.g. 不过 (but) | 所以 (therefore) | 虽然 (although) | 但是 (but) | 如果 (if) | 可是 (but) | 然后 (then) | 但 (but) | 据悉 (according to)) or currency.

The Action is to remove the whitespace in the flagged sequences.

== PATTERN ==
<TARGET>
  <PUNCT>
    [@Annotations:
        AND(
          Tokenization.TokenName=
            *StartsWith(P_)
        ,
          Syntax.FinalWSCount=
            >0)
    ]
  </PUNCT> :
  <WORD>
    [@Annotations:
        OR(
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  *Contains(不过|所以|虽然|但是|如果|可是|然后|但|据悉))
        ,
          Tokenization.TokenName=
            "Currency")
    ]
  </WORD>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  New(
    Punct
  ,
    %{GetSingleCapture(
        Get(PUNCT))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Punct))}.
        Concat(
          Get(Word).
          Attr(Span.Text)))})}

-------------------------------
[Chunk Grammar Rule]
WhitespaceError_token_num_token
-------------------------------
== GUID ==
997d2995-b6db-4a8e-aa6d-70bb9e6021f4

== DESCRIPTION ==
The Pattern is to flag sequences comprised of tokens except punctuation, symbols and numbers, followed by a potential whitespace, cardinal numbers, a potential whitespace and then tokens except punctuation, symbols and numbers.

The Action is to remove these two potential whitespaces in the flagged sequences.

== PATTERN ==
<TARGET>
  (
    <WORD01>
      [@Annotations:
          AND(
            Tokenization.TokenName=
              NOT(
                *StartsWith(P_|S_|NUMBER))
          ,
            Syntax.FinalWSCount=
              >=1)
      ]
    </WORD01> :
    <CARDINAL>
      [@Annotations:
          AND(
            Tokenization.TokenName=
              *StartsWith(NUMBER)
          ,
            Syntax.FinalWSCount=
              >=0)
      ]
    </CARDINAL> :
    <WORD02>
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_|NUMBER))
      ]
      |
      (
        (
          [@Annotations:
              Syntax.Analyses=
                *Contains(
                  +Chinese_SimplifiedMorph.Noun)
          ]
        )? :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                +Chinese_SimplifiedMorph.Measure)
        ]
      )
    </WORD02>
  )
  |
  (
    <WORD01>
      [@Annotations:
          AND(
            Tokenization.TokenName=
              NOT(
                *StartsWith(P_|S_|NUMBER))
          ,
            Syntax.FinalWSCount=
              >=1)
      ]
    </WORD01> :
    <CURRENCY>
      [@Annotations:
          Tokenization.TokenName=
            "Currency"
      ]
    </CURRENCY>
  )
  |
  (
    <WORD01>
      [@Annotations:
          AND(
            Tokenization.TokenName=
              NOT(
                *StartsWith(P_|S_|NUMBER))
          ,
            Syntax.FinalWSCount=
              >=0)
      ]
    </WORD01> :
    <CARDINAL>
      [@Annotations:
          AND(
            Tokenization.TokenName=
              *StartsWith(NUMBER)
          ,
            Syntax.FinalWSCount=
              >=1)
      ]
    </CARDINAL> :
    <WORD02>
      [@Annotations:
          Tokenization.TokenName=
            NOT(
              *StartsWith(P_|S_|NUMBER))
      ]
      |
      (
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                +Chinese_SimplifiedMorph.Noun)
        ] :
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                +Chinese_SimplifiedMorph.Measure)
        ]
      )
    </WORD02>
  )
</TARGET>
WHERE:
  AND(
    NOT(
      *SubSRE(
        WORD01
      ,
        [@Annotations:
            Chinese_SimplifiedSyntax.LatinString=
              True
        ]))
  ,
    NOT(
      *SubSRE(
        WORD02
      ,
        [@Annotations:
            AND(
              Tokenization.TokenName=
                "TIME"
            ,
              Chinese_SimplifiedSyntax.LatinString=
                True)
        ])))

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Word01
  ,
    %{GetSingleCapture(
        Get(WORD01))})
  .
  New(
    Cardinal
  ,
    If(
      IsDefined(CARDINAL)
    ,
      %{GetSingleCapture(
          Get(CARDINAL))}))
  .
  New(
    Word02
  ,
    If(
      IsDefined(WORD02)
    ,
      %{GetSingleCapture(
          Get(WORD02))}))
  .
  New(
    Currency
  ,
    If(
      IsDefined(CURRENCY)
    ,
      %{GetSingleCapture(
          Get(CURRENCY))})))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    If(
      Get(Cardinal).
      Attr(Tokenization.TokenName).
      Matches(
        *StartsWith(NUMBER))
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word01))}.
          Concat(
            %{SpanTextWithoutFinalWS(
                Get(Cardinal))}).
          Concat(
            Get(Word02).
            Attr(Span.Text)))}
    ,
      %{SuggestLiteral(
          %{SpanTextWithoutFinalWS(
              Get(Word01))}.
          Concat(
            Get(Currency).
            Attr(Span.Text)))}))}

--------------------------------
[Chunk Grammar Rule]
WhitespaceError_token_ws_pattern
--------------------------------
== GUID ==
694593e5-9f91-4f99-9923-fc7517b719bb

== DESCRIPTION ==
The Pattern is to flag sequences comprised of tokens (e.g. not Latin words, numbers and also not a set of symbols ((|+|-|<|=|>|≤|≥|＋|－|＜|＝|＞)), followed by a whitespace and a set of tokens annotated by NUMBER, DATE, DET and punctuation.

The Action is to remove the whitespace in these sequences.

== PATTERN ==
<PREWORD>
  (
    .
  )?
</PREWORD> :
<TARGET>
  <WORD>
    [@Text:
        NOT(
          [A-Za-z0-9]),
     @Annotations:
        Syntax.FinalWSCount=
          >0
    ]
  </WORD> :
  <PATTERN>
    AND(
      OR(
        [@Annotations:
            Tokenization.TokenName=
              *StartsWith(P_|NUMBER|DATE|DET)
        ]
      ,
        [@Text:
            [0-9]
        ])
    ,
      [@Annotations:
          Syntax.FinalWSCount?=
            >=0
      ])
  </PATTERN>
</TARGET> :
(
  <POSTWORD>
    .
  </POSTWORD>
)?
WHERE:
  AND(
    *SubSRE(
      WORD
    ,
      [@Annotations:
          Syntax.Analyses?=
            *ForAll(
              Normalization.Result?=
                NormalizedForm=
                  NOT(
                    ^(\(|\+|-|<|=|>|≤|≥|＋|－|＜|＝|＞)$))
      ])
  ,
    AND(
      *SubSRE(
        PREWORD
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    NOT(
                      ^("|'|\(|\[|\{|‘|“)$))
        ])
    ,
      *SubSRE(
        POSTWORD
      ,
        [@Annotations:
            Syntax.Analyses=
              *Contains(
                Normalization.Result=
                  NormalizedForm=
                    NOT(
                      ^(}|\)|'|"|\]|’|”)$))
        ])))

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  New(
    Pattern
  ,
    %{GetSingleCapture(
        Get(PATTERN))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Word))}.
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Pattern))}))})}

------------------------------
[Chunk Grammar Rule]
WhitespaceError_token_ws_punct
------------------------------
== GUID ==
a1a56178-5a6b-4d56-9f8a-cc6306a6c832

== DESCRIPTION ==
The Pattern is to flag sequences comprised of final modal particles (e.g. 吗 (ma, interrogative particle) | 呢 (ne, interrogative particle) | 吧 (ba) | 哦 (oh) | 啦 (la)), followed by a whitespace and punctuation.

The Action is to remove the whitespace in these sequences.

== PATTERN ==
<TARGET>
  <WORD>
    [@Annotations:
        AND(
          Syntax.Analyses=
            *Contains(
              Normalization.Result=
                NormalizedForm=
                  *Contains(吗|呢|吧|哦|啦))
        ,
          Syntax.FinalWSCount=
            >0)
    ]
  </WORD> :
  <PUNCT>
    [@Annotations:
        Tokenization.TokenName=
          *StartsWith(P_)
    ]
  </PUNCT>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Word
  ,
    %{GetSingleCapture(
        Get(WORD))})
  .
  New(
    Punct
  ,
    %{GetSingleCapture(
        Get(PUNCT))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Word))}.
        Concat(
          Get(Punct).
          Attr(Span.Text)))})}

------------------------------
[Chunk Grammar Rule]
WhitespaceError_token_ws_token
------------------------------
== GUID ==
8702bc2c-8619-4910-b8ea-d7235a589e05

== DESCRIPTION ==
The Pattern is to flag sequences comprised of:
 1. tokens except Latin words, numbers, DATE, TIME, defined symbols (e.g. ("|'|(|+|-|<|=|>|[|{|‘|“|＋|－|＜|＝|＞)) and tokens (e.g. 了|吧|吼|呀|呗|呢|哎|哟|哦|唉|啊|啦|嘛|此外), followed by 
 2. a whitespace and 
 3.  tokens except Latin words, numbers, DATE, TIME, defined symbols (e.g. ("|'|)|+|-|<|=|>|]|}|’|”|＋|－|＜|＝|＞|≤|≥)) and tokens (e.g. 不过|但是|可是|如果|所以|据悉|此外|然后|虽然).

The Action is to remove the whitespace in these sequences.

== PATTERN ==
<TARGET>
  <WORD01>
    [@Text:
        OR(
          NOT(
            [0-9A-Za-z]\s$)
        ,
          *Contains(#)),
     @Annotations:
        AND(
          Syntax.Analyses=
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  NOT(
                    ("|'|\(|\+|-|<|=|>|\[|\{|‘|“|了|吧|吼|呀|呗|呢|哎|哟|哦|唉|啊|啦|嘛|此外|＋|－|＜|＝|＞|≤|≥)$))
        ,
          Syntax.FinalWSCount=
            >0
        ,
          Tokenization.TokenName?=
            NOT(
              *StartsWith(DATE|TIME)))
    ]
  </WORD01> :
  <WORD02>
    [@Text:
        NOT(
          [0-90-9A-Za-z]),
     @Annotations:
        AND(
          Syntax.Analyses=
            *ForAll(
              Normalization.Result=
                NormalizedForm=
                  NOT(
                    ^("|'|\)|\+|\-|<|=|>|\]|\}|’|”|不过|但是|可是|如果|所以|据悉|此外|然后|虽然|＋|－|＜|＝|＞|≤|≥)$))
        ,
          Tokenization.TokenName?=
            NOT(
              *StartsWith(DATE|TIME))
        ,
          Syntax.FinalWSCount?=
            >=0)
    ]
  </WORD02>
</TARGET>

== ACTION ==
Region(
  Variables
,
  New(
    Target
  ,
    %{GetSingleCapture(
        Get(TARGET))})
  .
  New(
    Word01
  ,
    %{GetSingleCapture(
        Get(WORD01))})
  .
  New(
    Word02
  ,
    %{GetSingleCapture(
        Get(WORD02))}))
.
%{CreateCritiqueOverChunk(
    Get(Target)
  ,
    Value(
      String
    ,
      "Whitespace Error")
  ,
    %{SuggestLiteral(
        %{SpanTextWithoutFinalWS(
            Get(Word01))}.
        Concat(
          %{SpanTextWithoutFinalWS(
              Get(Word02))}))})}

-------------------------------
[Macro]
ListBasedCritiqueAction_updated
-------------------------------
== GUID ==
882f8902-46a1-449e-a9dc-4c0f70f66c03

== TYPE ==
Annotation Script

== PARAMETERS ==
Normalizer : String(StringAnalyzer)
Sentence : Annotation Query|FeatureBundle|FeatureBundle

== EXPANSION ==
New(
  Sentence
,
  %{GetSingleCapture(
      %{Sentence})})
.
New(
  Target
,
  Get(Whiteboard))
.
Enumerate(
Analysis
,
  Get(Target).
  Attr(Chinese_SimplifiedSyntax.GrammarLBCs)
,
  New(
    Critique)
  .
  Assign(
    Get(Critique).
    Attr(GrammarChecker.CritiqueType)
  ,
    Get(Analysis).
    Attr(GrammarChecker.CritiqueType))
  .
  Assign(
    Get(Critique).
    Attr(Span.StartIndex)
  ,
    Get(Analysis).
    Attr(Span.StartIndex))
  .
  Assign(
    Get(Critique).
    Attr(Span.Length)
  ,
    Get(Analysis).
    Attr(Span.Length))
  .
  Assign(
    Get(Critique).
    Attr(GrammarChecker.CritiqueExplanationOverride)
  ,
    Get(Analysis).
    Attr(GrammarChecker.CritiqueExplanationOverride))
  .
  Enumerate(
  AREntry
  ,
    Get(Analysis).
    Attr(GrammarChecker.AutoReplace)
  ,
    Modify(
      Get(Critique).
      Attr(GrammarChecker.Suggestions)
    ,
      Append(
        Get(Analysis).
        Attr(Span.Text)))
    .
    Enumerate(
    ARXForm
    ,
      Get(AREntry).
      Attr(GrammarChecker.AutoReplaceEntry)
    ,
      If(
        Get(ARXForm).
        Attr(GrammarChecker.AutoReplaceTransform).
        Field(Type).
        Matches(
          Insert)
      ,
        Assign(
          Get(Critique).
          Attr(GrammarChecker.Suggestions).
          LastItem().
          Substring(
            Get(ARXForm).
            Attr(GrammarChecker.AutoReplaceTransform).
            Field(Index)
          ,
            Value(
              Integer
            ,
              0))
        ,
          Get(ARXForm).
          Attr(GrammarChecker.AutoReplaceTransform).
          Field(Value))
      ,
        If(
          Get(ARXForm).
          Attr(GrammarChecker.AutoReplaceTransform).
          Field(Type).
          Matches(
            Delete)
        ,
          Assign(
            Get(Critique).
            Attr(GrammarChecker.Suggestions).
            LastItem().
            Substring(
              Get(ARXForm).
              Attr(GrammarChecker.AutoReplaceTransform).
              Field(Index)
            ,
              Get(ARXForm).
              Attr(GrammarChecker.AutoReplaceTransform).
              Field(Length))
          ,
            Value(
              String
            ,
              ""))
        ,
          Assign(
            Get(Critique).
            Attr(GrammarChecker.Suggestions).
            LastItem().
            Substring(
              Get(ARXForm).
              Attr(GrammarChecker.AutoReplaceTransform).
              Field(Index)
            ,
              Get(ARXForm).
              Attr(GrammarChecker.AutoReplaceTransform).
              Field(Length))
          ,
            Get(ARXForm).
            Attr(GrammarChecker.AutoReplaceTransform).
            Field(Value)))))
    .
    If(
      Get(AREntry).
      Attr(GrammarChecker.AutoReplaceCaseSensitive).
      Not()
    ,
      Modify(
        Get(Critique).
        Attr(GrammarChecker.Suggestions).
        LastItem()
      ,
        ApplyPhrasalCaseShape(%{Normalizer}
        ,
          Get(Analysis).
          Attr(Span.Text).
          GetPhrasalCaseShape(%{Normalizer})))))
  .
  If(
    Get(Critique).
    Attr(GrammarChecker.Suggestions).
    Count().
    Matches(
      >0)
  ,
    Modify(
      Get(Whiteboard).
      Attr(GrammarChecker.Critiques)
    ,
      Append(
        Get(Critique)))
    .
    New(
      Chunk
    ,
      Get(Critique))
    .
    Remove(
      Get(Chunk)
    ,
      Syntax.Analyses)
    .
    Assign(
      Get(Chunk).
      Attr(Syntax.FinalWSCount)
    ,
      Value(
        Integer
      ,
        0))
    .
    Assign(
      Get(Whiteboard).
      Attr(AnnotationScript.Integer)
    ,
      Value(
        Integer
      ,
        1))
    .
    If(
      Get(Sentence).
      Attr(Span.Length).
      Matches(
        NOT(
          =${
            Get(Chunk).
            Attr(Span.StartIndex).
            Subtract(
              Get(EntireInput).
              Attr(Capture.Matches).
              LastItem().
              Attr(Span.StartIndex)).
            Add(
              Get(Chunk).
              Attr(Span.Length))}))
    ,
      While(
        Get(Sentence).
        Attr(Span.Text).
        Substring(
          Get(Chunk).
          Attr(Span.StartIndex).
          Subtract(
            Get(EntireInput).
            Attr(Capture.Matches).
            LastItem().
            Attr(Span.StartIndex))
        ,
          Get(Chunk).
          Attr(Span.Length).
          Add(
            Value(
              Integer
            ,
              1))).
        Matches(
          *EndsWith( ))
      ,
        Modify(
          Get(Chunk).
          Attr(Syntax.FinalWSCount)
        ,
          Add(
            Value(
              Integer
            ,
              1)))
        .
        Modify(
          Get(Chunk).
          Attr(Span.Length)
        ,
          Add(
            Value(
              Integer
            ,
              1)))
        .
        Modify(
          Get(Whiteboard).
          Attr(AnnotationScript.Integer)
        ,
          Add(
            Value(
              Integer
            ,
              1)))))
    .
    Remove(
      Get(Chunk)
    ,
      Tokenization.TokenName)
    .
    Remove(
      Get(Whiteboard)
    ,
      AnnotationScript.Integer)
    .
    Modify(
      Get(Whiteboard).
      Attr(ChunkParsing.NewChunks)
    ,
      Append(
        Get(Chunk)))))

------------------
[String Analyzer]
Chinese_Simplified
------------------
== GUID ==
153fff4f-15e9-4eca-951d-9557edb08b1a

== TYPE ==
Morphological Engine

== INIT ==
..\..\MorphModels\Chinese_Simplified\Chinese_Simplified.morph

== CHARACTER NORMALIZATION ==
LCID="2052"

-----------------
[String Analyzer]
Normalizer
-----------------
== GUID ==
87737e40-6e91-4f78-95f0-e784e440ce08

== TYPE ==
Script

== INIT ==
ANALYZE=Modify(Get(root).Attr(ScriptStringAnalyzer.Analyses), Append(Value(FeatureBundle, [])))
GENERATE=Modify(Get(root).Attr(ScriptStringAnalyzer.GeneratedWords), Append(Get(root).Attr(ScriptStringAnalyzer.FeatureBundleToGenerate).Attr(Normalization.Result).Field(NormalizedForm)))

== CHARACTER NORMALIZATION ==
LCID="2052"


